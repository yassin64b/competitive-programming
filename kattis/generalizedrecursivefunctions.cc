/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>
#include <iomanip>

using namespace std;

/*some bigint*/

class generalizedrecursivefunctions {
private:
    vector<vector<bigint>> dp;
    vector<pair<int, int>> ab;
    int c;
    bigint f(int x, int y) {
        x = max(0, x);
        y = max(0, y);
        if (dp[x][y] != -1)
            return dp[x][y];
        bigint ans = c;
        for (int i = 0; i < (int)ab.size(); ++i)
            ans += f(x - ab[i].first, y - ab[i].second);
        dp[x][y] = ans;
        return dp[x][y];
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        in.ignore();
        for (int i = 0; i < n; ++i) {
            string s1, s2;
            getline(in, s1);
            getline(in, s2);
            stringstream ss(s1);
            ab.clear();
            int tmp1, tmp2;
            while (ss >> tmp1 >> tmp2)
                ab.emplace_back(tmp1, tmp2);
            c = ab.back().first;
            int d = ab.back().second;
            ab.pop_back();
            dp.assign(100, vector<bigint>(100, -1));
            for (int j = 0; j < 100; ++j) {
                dp[0][j] = d;
                dp[j][0] = d;
            }
            ss = stringstream(s2);
            while (ss >> tmp1 >> tmp2) {
                out << f(tmp1, tmp2) << "\n";
            }
            out << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    generalizedrecursivefunctions solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
