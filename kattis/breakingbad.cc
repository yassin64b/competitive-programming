/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>
#include <unordered_map>

using namespace std;

class breakingbad {
private:
    void dfs(int u, const vector<vector<int>> &g, vector<bool> &vis,
            vector<bool> &a, vector<bool> &b)
    {
        vis[u] = 1;
        a[u] = 1;
        for (int v : g[u]) {
            if (!vis[v]) {
                dfs(v, g, vis, b, a);
            }
        }
    }
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        int id = -1;
        vector<string> items(N);
        unordered_map<string, int> item_id;
        for (int i = 0; i < N; ++i) {
            in >> items[i];
            item_id[items[i]] = ++id;
        }
        int M;
        in >> M;
        vector<vector<int>> g(N);
        for (int i = 0; i < M; ++i) {
            string s1, s2;
            in >> s1 >> s2;
            g[item_id[s1]].push_back(item_id[s2]);
            g[item_id[s2]].push_back(item_id[s1]);
        }
        vector<bool> a(N, 0), b(N, 0), vis(N, 0);
        for (int u = 0; u < N; ++u) {
            if (!vis[u]) {
                dfs(u, g, vis, a, b);
            }
        }
        for (int u = 0; u < N; ++u) {
            for (int v : g[u]) {
                if ((a[u] && a[v]) || (b[u] && b[v])) {
                    out << "impossible\n";
                    return;
                }
            }
        }
        for (int u = 0; u < N; ++u) {
            if (a[u]) {
                out << items[u] << " ";
            }
        }
        out << "\n";
        for (int u = 0; u < N; ++u) {
            if (b[u]) {
                out << items[u] << " ";
            }
        }
        out << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    breakingbad solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
