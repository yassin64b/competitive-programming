/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class aoc12_2 {
private:
    void dfs(int u, const vector<vector<int>>& g, vector<int>& comp) {
        for (int v : g[u]) {
            if (!comp[v]) {
                comp[v] = comp[u];
                dfs(v, g, comp);
            }
        }
    }
public:
    void solve(istream& in, ostream& out) {
        string s;
        vector<vector<int>> g;
        while (getline(in, s)) {
            stringstream ss(s);
            int u, v;
            g.push_back({});
            string trash;
            ss >> u >> trash;
            while (ss >> v) {
                g[u].push_back(v); //v <-> u is guaranteed to come later again
                ss >> trash;
            }
        }
        vector<int> comp(g.size(), 0);
        int comp_id = 0;
        for (int u = 0; u < (int)g.size(); ++u) {
            if (!comp[u]) {
                comp[u] = ++comp_id;
                dfs(u, g, comp);
            }
        }
        out << comp_id << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    aoc12_2 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
