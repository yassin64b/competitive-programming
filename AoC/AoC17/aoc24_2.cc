/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class aoc24_1 {
private:
    pair<int, int> dfs(int port, vector<pair<int, int>>& v) {
        pair<int, int> mx = {0, 0};
        for (auto& p : v) {
            int x = p.first, y = p.second;
            if (y == port)
                swap(x, y);
            if (x == port) {
                p.first = p.second = -1;
    
                pair<int, int> tmp(dfs(y, v));
                tmp.first += 1; //0 for part 1
                tmp.second += x + y;
                mx = max(mx, tmp);
    
                p.first = x, p.second = y;
            }
        }
        return mx;
    }
public:
    void solve(istream& in, ostream& out) {
        string s;
        vector<pair<int, int>> v;
        while (getline(in, s)) {
            int x, y;
            char trash;
            stringstream ss(s);
            ss >> x >> trash >> y;
            v.emplace_back(x, y);
        }
        pair<int, int> res(dfs(0, v));
        out << res.first << " " << res.second << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    aoc24_1 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
