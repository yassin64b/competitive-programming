/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class aoc22_1 {
public:
    void solve(istream& in, ostream& out) {
        vector<string> input;
        string s;
        while (in >> s)
            input.push_back(s);
        int n = input.size(), m = input[0].size();
        constexpr int SZ = 10'000;
        vector<vector<int>> grid(2*SZ+1, vector<int>(2*SZ+1, 0));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                grid[SZ + i - n / 2][SZ + j - m / 2] = (input[i][j] == '#' ? 2 : 0);
            }
        }
        int i = SZ, j = SZ, diri = -1, dirj = 0, res = 0;
        for (int k = 0; k < 10'000'000; ++k) {
            if (grid[i][j] == 2) {
                if (diri) {
                    dirj = -diri;
                    diri = 0;
                } else {
                    diri = dirj;
                    dirj = 0;
                }
            } else if (grid[i][j] == 0) {
                if (diri) {
                    dirj = diri;
                    diri = 0;
                } else {
                    diri = -dirj;
                    dirj = 0;
                }
            } else if (grid[i][j] == 3) {
                diri = -diri;
                dirj = -dirj;
            } else {
                ++res;
            }
            grid[i][j] = (grid[i][j] + 1) % 4;
            i += diri;
            j += dirj;
            assert(i >= 0 && i <= 2*SZ && j >= 0 && j <= 2*SZ);
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    aoc22_1 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
