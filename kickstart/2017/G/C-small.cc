/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class kickC {
private:
    int brute(int start, int end, const vector<vector<int>>& m) {
        if (start + 1 >= end)
            return 0;
        int res = m[0][start];
        for (int i = start; i < end; ++i)
            res = min(res, m[0][i]);
        int best = 0;
        for (int i = start; i + 1 < end; ++i) {
            best = max(best, brute(start, i + 1, m) + brute(i + 1, end, m));
        }
        return res + best;
    }
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int N, M;
            in >> N >> M;
            vector<vector<int>> m(N, vector<int>(M));
            for (int i = 0; i < N; ++i) {
                for (int j = 0; j < M; ++j) {
                    in >> m[i][j];
                }
            }
            out << "Case #" << t << ": " << brute(0, M, m) << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    kickC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
