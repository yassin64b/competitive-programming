/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class kickC {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
    
        for (int t = 1; t <= T; ++t) {
            int N, M, K;
            in >> N >> M >> K;
            vector<vector<int>> grid(N, vector<int>(M, 0));
            for (int i = 0; i < N; ++i) {
                for (int j = 0; j < M; ++j) {
                    char c;
                    in >> c;
                    if (c == '#') {
                        grid[i][j] = 1;
                    }
                }
            }
            
            vector<vector<vector<int>>> v(N, vector<vector<int>>(M, vector<int>(N+1, 0)));
            for (int si = 0; si < N; ++si) {
                for (int sj = 0; sj < M; ++sj) {
                    if (grid[si][sj]) {
                        for (int k = 1; k <= K && k <= N; ++k) {
                            if (k > 1 && (si == 0 || !v[si-1][sj][k-1])) {
                                continue;
                            }
                            int sum = 1;
                            if (si > 0 && k > 1) {
                                sum = v[si-1][sj][k-1] + 1;
                            }
                            v[si][sj][k] = max(v[si][sj][k], sum);
                            
                            bool good = true;
                            for (int i = si + 1; good && i < N; ++i) {
                                if (sj - (i - si) < 0 || sj + (i - si) >= M) {
                                    good = false;
                                }
                                for (int j = sj - (i - si); good && j <= sj + (i - si); ++j) {
                                    good = grid[i][j];
                                    ++sum;
                                }
                                if (good) {
                                    for (int j = sj - (i - si); j <= sj + (i - si); ++j) {
                                        v[i][j][k] = max(v[i][j][k], sum);
                                    }
                                }
                            }
    
                        }
                    }
                }
            }
            
            int res = 0;
            for (int i = 0; i < N; ++i) {
                for (int j = 0; j < M; ++j) {
                    res = max(res, (K <= N ? v[i][j][K] : 0));
                }
            }
            out << "Case #" << t << ": " << res << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    kickC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
