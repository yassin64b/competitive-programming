/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <bits/stdc++.h>

using namespace std;

class kickstart_a {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int n;
            in >> n;
            vector<int> a(n), b(n);
            for (int i = 0; i < n; ++i) {
                in >> a[i] >> b[i];
            }
            vector<int> cnt(5002, 0);
            for (int i = 0; i < n; ++i) {
                ++cnt[a[i]];
                --cnt[b[i] + 1];
            }
            for (int i = 1; i <= 5000; ++i) {
                cnt[i] += cnt[i - 1];
            }
            out << "Case #" << t << ":";
            int P;
            in >> P;
            for (int p = 0; p < P; ++p) {
                int city_id, res = 0;
                in >> city_id;
                /*for (int i = 0; i < n; ++i) { // O(n * P)
                    res += (a[i] <= city_id && b[i] >= city_id);
                }*/
                res = cnt[city_id]; // O(n + 5000)
                out << " " << res;
            }
            out << "\n";
        }
    }
};

int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    kickstart_a solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
