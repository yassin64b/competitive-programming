/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pair<int,int>> vii;

class COINS {
private:
    int64_t calc(int64_t n, map<int,int64_t> &memo) {
        if (n <= 1) {
            return n;
        }
        if (memo.find(n) != memo.end()) {
            return memo[n];
        }
    
        int64_t tmp = calc(n/2, memo) + calc(n/3, memo) + calc(n/4, memo);
        memo[n] = max(n, tmp);
        
        return memo[n];
    }
public:
    void solve(istream& in, ostream& out) {
        map<int,int64_t> memo;
        
        int n;
        while (in >> n) {
            out << calc(n, memo) << endl;
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    COINS solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
