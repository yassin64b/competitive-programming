/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pair<int,int>> vii;

class ACODE {
public:
    void solve(istream& in, ostream& out) {
        string digits;
        
        while (in >> digits && digits != "0") {
            int n = digits.size();
            vector<vector<int>> dp(n+1, vector<int>(2, 0));
            dp[0] = {1, 1};
            //dp[i][0] is num of possibilities ending with single digit num at i
            //dp[i][1] is num of possibilities ending with two digit number at i,i+1
            
            for (int i = 0; i < n; ++i) {
                int x = stoi(digits.substr(i, 1));
                
                if (x >= 1) {
                    dp[i+1][0] += dp[i][0];
                    if (i-1 > 0) dp[i+1][0] += dp[i-1][1];
                }
                
                if (i < n-1) {
                    x = stoi(digits.substr(i, 2));
                    if (x >= 10 && x <= 26) {
                        dp[i+1][1] += dp[i][0];
                        if (i-1 > 0) dp[i+1][1] += dp[i-1][1];
                    }
                }
                //out << dp[i+1][0] << " " << dp[i+1][1] << endl;
                //cout << endl;
            }
            //out << endl;
            //out << dp[n][0] << " " << (n-1 > 0 ? dp[n-1][1] : 0) << endl;
            out << dp[n][0] + (n-1 > 0 ? dp[n-1][1] : 0) << endl;
            //out << endl;
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    ACODE solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
