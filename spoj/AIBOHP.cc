/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pair<int,int>> vii;

class AIBOHP {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        
        for (int t = 0; t < T; ++t) {
            string S;
            in >> S;
            
            string left = S, right = S;
            reverse(right.begin(), right.end());
            int n = S.size();
            vector<vector<int>> dp(n+1, vector<int>(n+1));
            for (int i = 0; i <= n; ++i) {
                dp[i][0] = i;
            }
            for (int j = 0; j <= n; ++j) {
                dp[0][j] = j;
            }
            for (int i = 1; i <= n; ++i) {
                for (int j = 1; j <= n; ++j) {
                    dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + 1;
                    if (left[i-1] == right[j-1]) {
                        dp[i][j] = min(dp[i][j], dp[i-1][j-1]);
                    }
                }
            }
            
            int mn = S.size();
            
            //even length
            for (int i = 0; i <= n; ++i) {
                int j = n - i;
                mn = min(mn, dp[i][j]);
            }
            
            //uneven length
            for (int i = 0; i <= n; ++i) {
                int j = (n - i + 1 > n ? n : n - i + 1);
                mn = min(mn, dp[i][j]);
            }
            
            out << mn << endl;
            
            /* TLE
            int mn = S.size();
            for (int i = 0; i <= (int)S.size(); ++i) { //split before i-th character
                string left = S.substr(0, i);
                string right = S.substr(i);
                int n = left.size(), m = right.size();
                
                vector<vector<int>> dp(n+1, vector<int>(m+1));
                for (int j = 0; j <= n; ++j) {
                    dp[j][0] = j;
                }
                for (int k = 0; k <= m; ++k) {
                    dp[0][k] = k;
                }
                for (int j = 1; j <= n; ++j) {
                    for (int k = 1; k <= m; ++k) {
                        dp[j][k] = min(dp[j][k-1] + 1, dp[j-1][k] + 1);
                        if (left[j-1] == right[k-1]) {
                            dp[j][k] = min(dp[j][k], dp[j-1][k-1]);
                        }
                    }
                }
                
                //out << left << " " << right << " -> " << dp[n][m] << endl;
                //for (int j = 0; j <= n; ++j) {
                //    for (int k = 0; k <= m; ++k) {
                //        out << dp[j][k] << " ";
                //    }
                //    out << endl;
                //}
                
                mn = min(dp[n][m], mn);
            }
            out << mn << endl;*/
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    AIBOHP solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
