/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class aoc19_1 {
public:
    void solve(istream& in, ostream& out) {
        vector<string> g;
        string s;
        while (getline(in, s)) {
            g.push_back(s);
            cout << s << endl;
        }
        g.back() = string(g[0].size(), ' ');
        
        int n = g.size();
        int i = 0, j = 0;
        for (j = 0; j < (int)g[i].size(); ++j)
            if (g[i][j] != ' ') break;
        ++i;
        int dx[4]{1, -1, 0, 0};
        int dy[4]{0, 0, 1, -1};
        int dir = 0;
        string res;
        int num_steps = 1;
        while (true) {
            ++num_steps;
            int nxti = -2, nxtj = -2;
            if (g[i + dx[dir]][j + dy[dir]] != ' ') {
                nxti = i + dx[dir];
                nxtj = j + dy[dir];
            } else {
                for (int d = 0; d < 4; ++d) {
                    if (d / 2 != dir / 2) {
                        if (g[i + dx[d]][j + dy[d]] != ' ') {
                            nxti = i + dx[d];
                            nxtj = j + dy[d];
                            dir = d;
                            break;
                        }
                    }
                }
            }
            if (nxti == -2) {
                break;
            }
            i = nxti;
            j = nxtj;
            if (g[i][j] >= 'A' && g[i][j] <= 'Z')
                res += g[i][j];
        }
        cout << res << "\n";
        cout << num_steps << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    aoc19_1 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
