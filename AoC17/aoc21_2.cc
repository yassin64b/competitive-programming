/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>
using namespace std;

class aoc21_1 {
private:
    void swap(char& a, char& b, char& c, char& d) {
        int tmp = d;
        d = c;
        c = b;
        b = a;
        a = tmp;
    }
    void flip(vector<string>& a) {
        int n = a.size();
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n / 2; ++j)
                std::swap(a[i][j], a[i][n - j - 1]);
        }
    }
    void rotateImage(vector<string>& a) {
        int n = a.size();
        for (int i = 0; i < n / 2; ++i) {
            for (int j = 0; j < (n + 1) / 2; ++j) {
                swap(a[i][j], a[j][n-i-1], a[n-i-1][n-j-1], a[n-j-1][i]);
            }
        }
    }

public:
    void solve(istream& in, ostream& out) {
        vector<pair<vector<string>, vector<string>>> rules;
        string s;
        while (getline(in, s)) {
            stringstream ss(s);
            string a, b, trash;
            ss >> a >> trash >> b;
            ss = stringstream(a);
            vector<string> ra, rb;
            while (getline(ss, s, '/'))
                ra.push_back(s);
            ss = stringstream(b);
            while (getline(ss, s, '/'))
                rb.push_back(s);
            rules.emplace_back(ra, rb);
        }
        vector<string> cur{".#.", "..#", "###"};
        for (int k = 0; k < 18; ++k) {
            int n = cur.size();
            vector<string> nxt;
            if (n % 2 == 0U) {
                nxt.resize(n / 2 * 3);
                for (int i = 0; i < n; i += 2) {
                    for (int j = 0; j < n; j += 2) {
                        vector<string> tmp;
                        tmp.push_back(cur[i].substr(j, 2));
                        tmp.push_back(cur[i + 1].substr(j, 2));
                        bool found = false;
                        for (int y = 0; y < 2; ++y) {
                            for (int x = 0; !found && x < 4; ++x) {
                                for (const auto& p : rules) {
                                    if (p.first == tmp) {
                                        for (int a = 0; a < 3; ++a)
                                            nxt[i / 2 * 3 + a] += p.second[a];
                                        found = true;
                                        break;
                                    }
                                }
                                rotateImage(tmp);
                            }
                            flip(tmp);
                        }
                        assert(found);
                    }
                }
            } else {
                nxt.resize(n / 3 * 4);
                for (int i = 0; i < n; i += 3) {
                    for (int j = 0; j < n; j += 3) {
                        vector<string> tmp;
                        tmp.push_back(cur[i].substr(j, 3));
                        tmp.push_back(cur[i + 1].substr(j, 3));
                        tmp.push_back(cur[i + 2].substr(j, 3));
                        bool found = false;
                        for (int y = 0; y < 2; ++y) {
                            for (int x = 0; !found && x < 4; ++x) {
                                for (const auto& p : rules) {
                                    if (p.first == tmp) {
                                        for (int a = 0; a < 4; ++a)
                                            nxt[i / 3 * 4 + a] += p.second[a];
                                        found = true;
                                        break;
                                    }
                                }
                                rotateImage(tmp);
                            }
                            flip(tmp);
                        }
                        assert(found);
                    }
                }
            }
            cur = nxt;
        }
        int res = 0;
        for (const string& s : cur) {
            //cout << s << endl;
            for (char c : s)
                res += c == '#';
        }
        out << res << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    aoc21_1 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
