/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class aoc11_2 {
public:
    void solve(istream& in, ostream& out) {
        string s;
        int x = 0, y = 0;
        int res = 0;
        while (getline(in, s, ',')) {
            if (s.size() == 1U) {
                switch (s[0]) {
                    case 'n':
                        y += 2;
                        break;
                    case 's':
                        y -= 2;
                        break;
                    case 'e':
                        x += 2;
                        break;
                    case 'w':
                        x -= 2;
                        break;
                    default:
                        assert(false);
                        break;
                }
            } else {
                if (s[0] == 'n')
                    y += 1;
                else
                    y -= 1;
                if (s[1] == 'e')
                    x += 1;
                else
                    x -= 1;
            }
            int tmpres = 0, tmpx = x, tmpy = y;
            while (tmpx || tmpy) {
                if (abs(tmpx) > abs(tmpy)) {
                    if (tmpx < 0) tmpx += 2;
                    else tmpx -= 2;
                } else if (abs(tmpx) < abs(tmpy)) {
                    if (tmpy < 0) tmpy += 2;
                    else tmpy -= 2;
                } else {
                    if (tmpx < 0) ++tmpx;
                    else --tmpx;
                    if (tmpy < 0) ++tmpy;
                    else --tmpy;
                }
                ++tmpres;
            }
            res = max(res, tmpres);
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    aoc11_2 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
