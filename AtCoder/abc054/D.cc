/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

constexpr int MAX = 10*40;
constexpr int MXVAL = 1 << 29;

class atD {
public:
    void solve(istream &in, ostream &out) {
        int N, Ma, Mb;
        in >> N >> Ma >> Mb;
        
        vector<int> a(N), b(N), c(N);
        for (int i = 0; i < N; ++i) {
            in >> a[i] >> b[i] >> c[i];
        }
        
        vector<vector<int>> dp(MAX + 1, vector<int>(MAX + 1, MXVAL));
        dp[0][0] = 0;
        
        for (int m = 0; m < N; ++m) {
            vector<vector<int>> dpnew(dp);
    
            for (int i = 0; i <= MAX; ++i) {
                for (int j = 0; j <= MAX; ++j) {
                    if (i - a[m] >= 0 && j - b[m] >= 0) {
                        dpnew[i][j] = min(dpnew[i][j], dp[i - a[m]][j - b[m]] + c[m]);
                    }
                }
            }
            
            dp = dpnew;
        }
        
        int res = MXVAL;
        for (int i = 1; i * Ma <= MAX && i * Mb <= MAX; ++i) {
            res = min(res, dp[i * Ma][i * Mb]);
        }
        
        out << (res == MXVAL ? -1 : res) << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    atD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
