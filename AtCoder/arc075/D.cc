/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        long long N, A, B;
        in >> N >> A >> B;
        vector<int> h(N);
        for (int i = 0; i < N; ++i) {
            in >> h[i];
        }
    
        long long low = 1, high = 1000 * 1000 * 1000, ans = high;
        while (low <= high) {
            long long mid = (low + high) / 2;
            long long cur = 0;
            for (int i = 0; i < N; ++i) {
                long long rem = h[i] - mid * B;
                if (rem > 0) {
                    cur += (rem + (A - B) - 1) / (A - B);
                }
            }
            if (cur > mid) {
                low = mid + 1;
            } else {
                high = mid - 1;
                ans = mid;
            }
        }
        out << ans << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
