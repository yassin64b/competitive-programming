/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr int MOD = 1000*1000*1000 + 7;

class arcD {
public:
    void solve(istream& in, ostream& out) {
        long long n, m;
        in >> n >> m;
        vector<long long> x(n), y(m);
        long long sumx = 0, sumy = 0;
        for (int i = 0; i < n; ++i) {
            in >> x[i];
            sumx += i * x[i] - (n - (i + 1)) * x[i];
            sumx %= MOD;
            
        }
        for (int i = 0; i < m; ++i) {
            in >> y[i];
            sumy += i * y[i] - (m - (i + 1)) * y[i];
            sumy %= MOD;
        }
        
        out << sumx * sumy % MOD << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    arcD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
