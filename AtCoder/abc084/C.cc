/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class abc084_C {
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        vector<tuple<int, int, int>> trains;
        trains.reserve(N);
        for (int i = 1; i <= N - 1; ++i) {
            int c, s, f;
            in >> c >> s >> f;
            trains.emplace_back(c, s, f);
        }
        vector<int> res(N, 0);
        res[N - 1] = 0;
        for (int i = 0; i < N - 1; ++i) {
            res[i] = 0;
            for (int j = i; j < N - 1; ++j) {
                int c, s, f;
                tie(c, s, f) = trains[j];
                res[i] = max(res[i], s);
                if (res[i] % f)
                    res[i] += f - res[i] % f;
                res[i] += c;
            }
        }
        for (int x : res)
            out << x << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    abc084_C solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
