/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class abc084_D {
private:
    static constexpr int MXV = 100'000;
public:
    void solve(istream& in, ostream& out) {
        vector<int> prime(MXV + 1, 1);
        prime[0] = prime[1] = 0;
        for (int i = 2; i * i <= MXV; ++i) {
            if (prime[i]) {
                for (int j = i * i; j <= MXV; j += i) {
                    prime[j] = 0;
                }
            }
        }
        vector<int> simil(MXV + 1, 0);
        for (int i = 0; i <= MXV; ++i)
            simil[i] = (prime[i] && prime[(i + 1) / 2]);
        for (int i = 1; i <= MXV; ++i)
            simil[i] += simil[i - 1];
        
        int Q;
        in >> Q;
        for (int q = 0; q < Q; ++q) {
            int l, r;
            in >> l >> r;
            out << simil[r] - simil[l - 1] << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    abc084_D solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
