/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class abcD {
private:
    vector<vector<long long>> C;
    
    long long binomialCoeff(int n, int k)
    {
        int i, j;
        
        // Caculate value of Binomial Coefficient in bottom up manner
        for (i = 0; i <= n; i++)
        {
            for (j = 0; j <= min(i, k); j++)
            {
                // Base Cases
                if (j == 0 || j == i)
                    C[i][j] = 1;
                    
                    // Calculate value using previosly stored values
                else
                    C[i][j] = C[i-1][j-1] + C[i-1][j];
            }
        }
        
        return C[n][k];
    }
public:
    void solve(istream& in, ostream& out) {
        int N, A, B;
        in >> N >> A >> B;
        vector<long long> v(N);
        for (int i = 0; i < N; ++i) {
            in >> v[i];
        }
        sort(v.begin(), v.end(), greater<long long>());
        double sum = 0;
        for (int i = 0; i < A; ++i) {
            sum += v[i];
        }
        double mean = sum / A;
        
        out.precision(20);
        out << fixed << mean << "\n";
    
        C.assign(N+1, vector<long long>(N+1, 0));
        binomialCoeff(N, N);
        
        int cnt1 = 0, cnt2 = 0;
        for (int i = A-1; i >= 0 && v[i] == v[A-1]; --i) {
            ++cnt1;
        }
        for (int i = 0; i < N; ++i) {
            cnt2 += v[i] == v[A-1];
        }
        
        //cout << cnt1 << " " << cnt2 << endl;
        if (cnt1 == A) {
            long long ways = 0;
            for (int i = A; i <= B; ++i) {
                ways += C[cnt2][i];
            }
            out << ways << "\n";
        } else {
            long long ways = C[cnt2][cnt1];
            out << ways << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    abcD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
