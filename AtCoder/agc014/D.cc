/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class agcD {
private:
    void dfs(int u, int par, const vector<vector<int>>& g, vector<int>& fin) {
        for (int v : g[u]) {
            if (v != par && !fin[v]) {
                dfs(v, u, g, fin);
            }
        }
        
        for (int v : g[u]) {
            if (v != par && !fin[v]) {
                fin[v] = fin[u] = 1;
                return;
            }
        }
    }
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        vector<vector<int>> g(N);
        for (int i = 0; i + 1 < N; ++i) {
            int a, b;
            in >> a >> b;
            g[a-1].push_back(b-1);
            g[b-1].push_back(a-1);
        }
        
        vector<int> fin(N, 0);
        dfs(0, -1, g, fin);
        
        for (int u = 0; u < N; ++u) {
            if (!fin[u]) {
                out << "First\n";
                return;
            }
        }
        out << "Second\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    agcD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
