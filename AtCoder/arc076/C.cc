/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr int MOD = 1000 * 1000 * 1000 + 7;

class arcC {
private:
    long long fac(long long a) {
        long long res = 1;
        for (long long i = 1; i <= a; ++i) {
            res *= i;
            res %= MOD;
        }
        return res;
    }
public:
    void solve(istream& in, ostream& out) {
        int N, M;
        in >> N >> M;
        
        if (N == M) {
            out << 2 * fac(N) * fac(M) % MOD << "\n";
        } else if (abs(N - M) == 1) {
            out << fac(N) * fac(M) % MOD << "\n";
        } else {
            out << 0 << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    arcC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
