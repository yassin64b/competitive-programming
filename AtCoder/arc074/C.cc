/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        long long H, W;
        in >> H >> W;
    
        long long mn = abs(H/3 * W - (H - 2*(H/3)) * W);
        mn = min(mn, abs(W/3 * H - (W - 2*(W/3)) * H));
        
        for (int i = 0; i <= H; ++i) {
            long long newH = H - i;
            long long a1 = i * W, a2 = newH / 2 * W, a3 = (newH/2 + newH%2) * W;
            mn = min(mn, max(a1, max(a2, a3)) - min(a1, min(a2, a3)));
            a2 = W / 2 * newH; a3 = (W / 2 + W%2) * newH;
            mn = min(mn, max(a1, max(a2, a3)) - min(a1, min(a2, a3)));
        }
        
        for (int i = 0; i <= W; ++i) {
            long long newW = W - i;
            long long a1 = i * H, a2 = newW / 2 * H, a3 = (newW/2 + newW%2) * H;
            mn = min(mn, max(a1, max(a2, a3)) - min(a1, min(a2, a3)));
            a2 = H / 2 * newW; a3 = (H / 2 + H%2) * newW;
            mn = min(mn, max(a1, max(a2, a3)) - min(a1, min(a2, a3)));
        }
        
        out << mn << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
