/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

struct bills {
    int a = 0, b = 0, c = 0;
    int poss = 0;
};

class abc085_c {
public:
    void solve(istream& in, ostream& out) {
        int N, Y;
        in >> N >> Y;
        Y /= 1000;
        vector<bills> dp(Y + 1);
        dp[0].poss = 1;
        for (int i = 0; i < N; ++i) {
            for (int j = Y; j >= 0; --j) {
                dp[j].poss = 0;
                if (j - 1 >= 0 && dp[j - 1].poss) {
                    dp[j] = dp[j - 1];
                    ++dp[j].c;
                }
                if (j - 5 >= 0 && dp[j - 5].poss) {
                    dp[j] = dp[j - 5];
                    ++dp[j].b;
                }
                if (j - 10 >= 0 && dp[j - 10].poss) {
                    dp[j] = dp[j - 10];
                    ++dp[j].a;
                }
            }
        }
        if (dp[Y].poss) {
            out << dp[Y].a << " " << dp[Y].b << " " << dp[Y].c << "\n";
        } else {
            out << "-1 -1 -1\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    abc085_c solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
