/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class atD {
private:
    bool play(int turn, long long X, long long Y) {
        for (int i = 1; 2*i <= X; ++i) {
            if (!play(1 - turn, X - 2*i, Y + i)) {
                return true;
            }
        }
        for (int i = 1; 2*i <= Y; ++i) {
            if (!play(1 - turn, X + i, Y - 2*i)) {
                return true;
            }
        }
        return false;
    }
public:
    void solve(istream& in, ostream& out) {
        long long X, Y;
        in >> X >> Y;
        
        /*
        //bruteforce for small X,Y to find pattern
        for (int i = 0; i <= 10; ++i) {
            for (int j = 0; j <= 10; ++j) {
                out << "(" << i << "," << j << ")->" << play(0, i, j) << " ";
            }
            out << "\n";
        }*/
        
        if (abs(X - Y) > 1) {
            out << "Alice\n";
        } else {
            out << "Brown\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    atD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
