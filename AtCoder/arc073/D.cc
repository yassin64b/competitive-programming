/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class atD {
private:
    int N, W;
    vector<int> w, v;
    vector<map<int, int>> dp;
    int solve(int id, int remW) {
        if (remW == 0 || id == N) {
            return 0;
        }
        if (dp[id].find(remW) != dp[id].end()) {
            return dp[id][remW];
        }
        if (w[id] > remW) {
            return dp[id][remW] = solve(id + 1, remW);
        } else {
            return dp[id][remW] = max(solve(id + 1, remW), v[id] + solve(id + 1, remW - w[id]));
        }
    }
public:
    void solve(istream& in, ostream& out) {
        in >> N >> W;
        w.resize(N);
        v.resize(N);
        vector<pair<int, int>> wv(N);
        for (int i = 0; i < N; ++i) {
            in >> w[i] >> v[i];
            wv[i] = {w[i], v[i]};
        }
        
        dp.resize(N);
        out << solve(0, W) << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    atD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
