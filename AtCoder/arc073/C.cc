/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class at {
private:
    int sign(long long a) {
        return (a >= 0 ? 1 : -1);
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        
        long long ans = 1000LL*1000*1000*1000*1000*1000;
        for (int flag = 0; flag <= 1; ++flag) {
            long long sum = 0, res = 0;
            for (int i = 0; i < n; ++i) {
                sum += a[i];
                if (i % 2 == flag) {
                    if (sum <= 0) {
                        res += 1 - sum;
                        sum = 1;
                    }
                } else {
                    if (sum >= 0) {
                        res += 1 + sum;
                        sum = -1;
                    }
                }
            }
            ans = min(ans, res);
        }
        out << ans << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    at solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
