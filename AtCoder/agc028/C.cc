/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <bits/stdc++.h>

using namespace std;

class agc028_c {
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        vector<int> A(N), B(N);
        for (int i = 0; i < N; ++i) {
            in >> A[i] >> B[i];
        }
        long long ans = min(accumulate(begin(A), end(A), 0LL),
                            accumulate(begin(B), end(B), 0LL));
        vector<pair<int, int>> v(2 * N);
        for (int i = 0; i < N; ++i) {
            v[i] = {A[i], i};
        }
        for (int i = 0; i < N; ++i) {
            v[i + N] = {B[i], i};
        }
        sort(begin(v), end(v));
        vector<pair<int, int>> ind(N, {-1, -1});
        for (int i = 0; i < 2 * N; ++i) {
            //auto [val, j] = v[i];
            int val = v[i].first, j = v[i].second;
            if (ind[j].first == -1) {
                ind[j].first = i;
            } else {
                ind[j].second = i;
            }
        }
        vector<long long> psum(2 * N + 1, 0);
        for (int i = 0; i < 2 * N; ++i) {
            psum[i + 1] = psum[i] + v[i].first;
        }
        for (int i = 0; i < N; ++i) {
            //auto [j1, j2] = ind[i];
            int j1 = ind[i].first, j2 = ind[i].second;
            long long cursum = psum[N - 2] + v[j1].first + v[j2].first;
            if (j1 <= N - 2) {
                cursum = psum[N - 1] + v[j2].first;
                if (j2 <= N - 1) {
                    cursum = psum[N];
                }
            }
            ans = min(ans, cursum);
        }
        out << ans << "\n";
    }
};

int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    agc028_c solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
