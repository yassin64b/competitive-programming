/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class AGC_B {
public:
    void solve(istream& in, ostream& out) {
        int N, M;
        in >> N >> M;
        vector<vector<int>> g(N);
        int v1, v2;
        for (int i = 0; i < M; ++i) {
            int a, b;
            in >> a >> b;
            g[a-1].push_back(b-1);
            g[b-1].push_back(a-1);
            v1 = a-1;
            v2 = b-1;
        }
        
        vector<int> vis(N, 0), res;
        vis[v1] = vis[v2] = 1;
        int u = v1;
        while (true) {
            begin:
            vis[u] = 1;
            res.push_back(u);
            for (int v : g[u]) {
                if (!vis[v]) {
                    u = v;
                    goto begin;
                }
            }
            break;
        }
        reverse(res.begin(), res.end());
        u = v2;
        while (true) {
            begin2:
            vis[u] = 1;
            res.push_back(u);
            for (int v : g[u]) {
                if (!vis[v]) {
                    u = v;
                    goto begin2;
                }
            }
            break;
        }
        
        out << res.size() << "\n";
        for (int v : res) {
            out << v+1 << " ";
        }
        out << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    AGC_B solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
