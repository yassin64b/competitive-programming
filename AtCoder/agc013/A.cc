/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr int INF = 1000 * 1000 * 1000;

class AGC_A {
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        vector<int> A(N);
        for (int i = 0; i < N; ++i) {
            in >> A[i];
        }
        if (N == 1) {
            out << 1 << "\n";
            return;
        }
        
        vector<pair<int, int>> dp(N, {INF, INF});
        dp[0].first = dp[0].second = 1;
        for (int i = 1; i < N; ++i) {
            if (A[i] >= A[i-1]) {
                dp[i].first = min(dp[i].first, dp[i-1].first);
                dp[i].first = min(dp[i].first, (i-2 >= 0 ? dp[i-2].second : 0) + 1);
                dp[i].first = min(dp[i].first, (i-2 >= 0 ? dp[i-2].first : 0) + 1);
            }
            if (A[i] <= A[i-1]) {
                dp[i].second = min(dp[i].second, dp[i-1].second);
                //dp[i].second = min(dp[i].second, dp[i-1].first + 1);
                dp[i].second = min(dp[i].second, (i-2 >= 0 ? dp[i-2].first : 0) + 1);
                dp[i].second = min(dp[i].second, (i-2 >= 0 ? dp[i-2].second : 0) + 1);
            }
        }
        
        out << min(dp[N-1].first, dp[N-1].second) << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    AGC_A solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
