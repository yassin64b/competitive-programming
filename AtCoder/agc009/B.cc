/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pair<int,int>> vii;

class atB {
private:
    int solve(int i, vector<int> &dp, const vector<vector<int>> &g) {
        if (dp[i] != -1) {
            return dp[i];
        }
        
        if ((int)g[i].size() == 0) {
            return 0;
        }
        
        int ans = 0;
        vector<int> sz;
        for (int j = 0; j < (int)g[i].size(); ++j) {
            sz.push_back(solve(g[i][j], dp, g));
        }
        sort(sz.begin(), sz.end(), greater<int>());
        for (int j = 0; j < (int)sz.size(); ++j) {
            ans = max(ans, j+1 + sz[j]);
        }
        
        return (dp[i] = ans);
    }

public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        
        vector<int> a(N+1);
        for (int i = 2; i <= N; ++i) {
            in >> a[i];
        }
        vector<vector<int>> g(N+1);
        for (int i = 2; i <= N; ++i) {
            g[a[i]].push_back(i);
            //g[a[i]].push_back(a[i]);
        }
        vector<int> dp(N+1, -1);
        int ans = solve(1, dp, g);
        
        out << ans << endl;
        
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    atB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
