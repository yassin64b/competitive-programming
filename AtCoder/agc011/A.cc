/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class atA {
public:
    void solve(istream& in, ostream& out) {
        int N, C, K;
        in >> N >> C >> K;
        vector<int> T(N);
        for (int i = 0; i < N; ++i) {
            in >> T[i];
        }
        sort(T.begin(), T.end());
        
        int startTime = 0, num = 0, res = 0;
        for (int t : T) {
            if (t - startTime > K) {
                res += num > 0;
                num = 0;
            }
            if (num == 0) {
                startTime = t;
            }
            ++num;
            if (num == C) {
                ++res;
                num = 0;
            }
        }
        res += num > 0;
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    atA solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
