/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class atcoderD {
public:
    void solve(istream& in, ostream& out) {
        int64_t N, A, B;
        in >> N >> A >> B;
        
        vector<int> X(N);
        for (int i = 0; i < N; ++i) {
            in >> X[i];
        }
        
        vector<int64_t> dp(N);
        dp[0] = 0;
        for (int i = 1; i < N; ++i) {
            dp[i] = min(A * (X[i] - X[i-1]), B) + dp[i-1];
        }
        out << dp[N-1] << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    atcoderD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
