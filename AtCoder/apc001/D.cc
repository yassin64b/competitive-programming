/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class apc001_d {
private:
    int dfs(int u, const vector<vector<int>> &g, vector<int> &vis,
            const vector<int> &a)
    {
        vis[u] = 1;
        int res = u;
        for (int v : g[u]) {
            if (!vis[v]) {
                int tmp = dfs(v, g, vis, a);
                if (a[tmp] < a[res]) {
                    res = tmp;
                }
            }
        }
        return res;
    }
public:
    void solve(istream& in, ostream& out) {
        int N, M;
        in >> N >> M;
        vector<int> a(N);
        for (int i = 0; i < N; ++i) {
            in >> a[i];
        }
        vector<vector<int>> g(N);
        for (int i = 0; i < M; ++i) {
            int x, y;
            in >> x >> y;
            g[x].push_back(y);
            g[y].push_back(x);
        }
        if (M == N - 1) {
            out << 0 << "\n";
            return;
        }
        int num_edges = N - 1 - M;
        int num_vert = 2 * num_edges;
        if (N < num_vert) {
            out << "Impossible\n";
            return;
        }
        long long cost = 0;
        vector<int> vis(N, 0);
        for (int u = 0; u < N; ++u) {
            if (!vis[u]) {
                int v = dfs(u, g, vis, a);
                cost += a[v];
                --num_vert;
                a[v] = 2'000'000'000;
            }
        }
        sort(a.begin(), a.end());
        for (int i = 0; i < num_vert; ++i) {
            cost += a[i];
        }
        out << cost << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    apc001_d solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
