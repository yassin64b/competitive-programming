/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class apc001_e {
private:
    void dfs(int u, const vector<vector<int>> &g, vector<int> &vis,
            vector<int> &dp)
    {
        vis[u] = 1;
        dp[u] = 0;
        int num_zero = 0;
        for (int v : g[u]) {
            if (!vis[v]) {
                dfs(v, g, vis, dp);
                dp[u] += dp[v];
                num_zero += (dp[v] == 0);
            }
        }
        if (num_zero > 1) {
            dp[u] += num_zero - 1;
        }
    }
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        vector<vector<int>> g(N);
        for (int i = 0; i < N - 1; ++i) {
            int a, b;
            in >> a >> b;
            g[a].push_back(b);
            g[b].push_back(a);
        }
        int root = 0;
        for (int u = 0; u < N; ++u) {
            if (g[u].size() > 2U) {
                root = u;
                break;
            }
        }
        if (g[root].size() <= 2U) { // path
            out << 1 << "\n";
            return;
        }
        vector<int> vis(N, 0), dp(N, 0);
        dfs(root, g, vis, dp);
        out << dp[root] << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    apc001_e solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
