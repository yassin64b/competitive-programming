/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class atD {
public:
    void solve(istream& in, ostream& out) {
        int N, K;
        in >> N >> K;
        vector<int> a(N);
        int mx = 0;
        for (int i = 0; i < N; ++i) {
            in >> a[i];
            mx = max(mx, a[i]);
        }
    
        vector<vector<int>> prefix(K+1, vector<int>(N+1, 0)), suffix(K+1, vector<int>(N+1, 0));
        for (int j = 0; j <= N; ++j) {
            prefix[0][j] = 1;
        }
        for (int i = 1; i <= K; ++i) {
            for (int j = 1; j <= N; ++j) {
                prefix[i][j] = prefix[i][j-1] || (i-a[j-1] >= 0 ? prefix[i-a[j-1]][j-1] : 0);
            }
        }
        for (int j = 0; j <= N; ++j) {
            suffix[0][j] = 1;
        }
        for (int i = 1; i <= K; ++i) {
            for (int j = 1; j <= N; ++j) {
                suffix[i][j] = suffix[i][j-1] || (i-a[N-j] >= 0 ? suffix[i-a[N-j]][j-1] : 0);
            }
        }
        
        int res = 0;
        for (int ind = 0; ind < N; ++ind) {
            //check if sum with a[i] in the range [K, K+a[i]) is possible
            //if so, a[i] is NOT unnecessary
            if (a[ind] >= K) {
                continue;
            }
            
            bool flag = false;
            for (int S = 0; !flag && S <= K; ++S) {
                if (prefix[S][ind] == 1) {
                    for (int x = max(K-a[ind]-S, 0); !flag && x < K-S; ++x) {
                        if (suffix[x][N-ind-1] == 1) {
                            flag = true;
                        }
                    }
                }
            }
            
            res += !flag;
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    atD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
