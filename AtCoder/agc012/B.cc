/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class agcB {
public:
    void solve(istream& in, ostream& out) {
        int N, M, Q;
        in >> N >> M;
        vector<int> a(M), b(M);
        vector<vector<int>> g(N);
        for (int i = 0; i < M; ++i) {
            in >> a[i] >> b[i];
            g[a[i]-1].push_back(b[i]-1);
            g[b[i]-1].push_back(a[i]-1);
        }
        in >> Q;
        vector<int> v(Q), d(Q), c(Q);
        for (int i = 0; i < Q; ++i) {
            in >> v[i] >> d[i] >> c[i];
            --v[i];
        }
        
        vector<int> col(N, 0);
        vector<int> within(N, -1);
        for (int i = Q-1; i >= 0; --i) {
            if (within[v[i]] >= d[i]) {
                continue;
            }
            within[v[i]] = d[i];
            queue<pair<int,int>> q;
            q.emplace(v[i], d[i]);
            while (!q.empty()) {
                int u = q.front().first, dist = q.front().second;
                q.pop();
                if (col[u] == 0) {
                    col[u] = c[i];
                }
                //cout << "paint " << u << " with " << c[i] << endl;
                if (dist > 0) {
                    for (int vv : g[u]) {
                        if (within[vv] < dist-1) {
                            q.emplace(vv, dist-1);
                            within[vv] = dist-1;
                        }
                    }
                }
            }
        }
        for (int i = 0; i < N; ++i) {
            out << col[i] << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    agcB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
