/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pair<int,int>> vii;

class arc068D {
public:
    void solve(istream& in, ostream& out) {
        int64_t N;
        in >> N;
        
        vector<int64_t> A(N);
        map<int64_t,int64_t> cnt;
        for (int i = 0; i < N; ++i) {
            in >> A[i];
            ++cnt[A[i]];
        }
        sort(A.begin(), A.end());
    
        int64_t res = A.size();
        int i = 0, j = A.size()-1;
        while (i < j) {
            if (A[i] == A[j]) {
                --j;
            } else if (cnt[A[i]] > 1 && cnt[A[j]] > 1) {
                int64_t anz = min(cnt[A[i]], cnt[A[j]]) - 1;
                cnt[A[i]] -= anz;
                cnt[A[j]] -= anz;
                res -= anz * 2;
                //out << "del: " << A[i] << " " << A[j] << " - " << anz << endl;
            } else if (cnt[A[i]] == 1) {
                ++i;
            } else if (cnt[A[j]] == 1) {
                --j;
            } else {
                //cout << i << " " << j << endl;
                //cout << A[i] << " " << A[j] << endl;
                //cout << cnt[A[i]] << " " << cnt[A[j]] << endl;
                assert(false);
            }
        }
        //out << res << endl;
        
        for (pair<const int64_t,int64_t> &p : cnt) {
            if (p.second > 1) {
                //out << p.first << " " << p.second << endl;
                //out << (p.second / 3) * 2 << endl;
                
                while (p.second >= 3) {
                    res -= (p.second / 3) * 2;
                    p.second -= (p.second / 3) * 2;
                }
                
                if (p.second > 1) {
                    res -= (p.second - 1) * 2;
                }
            }
        }
        
        out << res << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    arc068D solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
