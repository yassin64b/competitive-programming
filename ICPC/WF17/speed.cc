/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class speed {
private:
    double time(const vector<int>& d, const vector<int>& s, double c) {
        double t = 0;
        for (int i = 0; i < (int)d.size(); ++i) {
            t += d[i] / (s[i] + c);
        }
        return t;
    }
public:
    void solve(istream& in, ostream& out) {
        int n, t;
        in >> n >> t;
        vector<int> d(n), s(n);
        for (int i = 0; i < n; ++i) {
            in >> d[i] >> s[i];
        }
        
        double low = -1e15, high = 1e15;
        for (int i = 0; i < n; ++i) {
            low = max(low, (double)-s[i]);
        }
        for (int i = 0; i <= 1000; ++i) {
            double c = (low + high) / 2;
            //cout << c << endl;
            double res_t = time(d, s, c);
            if (res_t > t) {
                low = c;
            } else {
                high = c;
            }
        }
        out.precision(17);
        out << fixed << (low + high) / 2 << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    speed solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
