/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class secretchamber {
public:
    void solve(istream& in, ostream& out) {
        int m, n;
        in >> m >> n;
        vector<pair<char, char>> v(m);
        vector<vector<int>> adjm(26, vector<int>(26, 0));
        for (int i = 0; i < m; ++i) {
            in >> v[i].first >> v[i].second;
            adjm[v[i].first - 'a'][v[i].second - 'a'] = 1;
        }
        
        for (int i = 0; i < n; ++i) {
            string s1, s2;
            in >> s1 >> s2;
            
            bool poss = (s1.size() == s2.size());
            for (int j = 0; poss && j < (int)s1.size(); ++j) {
                vector<int> vis(26, 0);
                queue<int> q;
                q.push(s1[j] - 'a');
                vis[s1[j] - 'a'] = 1;
                bool found = false;
                while (!q.empty()) {
                    int x = q.front();
                    q.pop();
                    if (x == s2[j] - 'a') {
                        found = true;
                        break;
                    }
                    for (int k = 0; k < 26; ++k) {
                        if (!vis[k] && adjm[x][k]) {
                            q.push(k);
                            vis[k] = 1;
                        }
                    }
                }
                if (!found) {
                    poss = false;
                }
            }
            if (!poss) {
                out << "no\n";
            } else {
                out << "yes\n";
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    secretchamber solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
