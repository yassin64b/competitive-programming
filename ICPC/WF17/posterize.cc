/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

typedef long long i64;

constexpr i64 INF = 1000LL * 1000 * 1000 * 1000 * 1000;

class posterize {
private:
    i64 pow2(i64 a) {
        return a * a;
    }
public:
    void solve(istream& in, ostream& out) {
        int d, k;
        in >> d >> k;
        vector<int> cnts(256, 0);
        for (int i = 0; i < d; ++i) {
            int ind;
            in >> ind;
            in >> cnts[ind];
        }
        
        vector<vector<i64>> cost_save(256, vector<i64>(256, 0));
        for (int j = 0; j < 256; ++j) {
            for (int nxt = j + 1; nxt < 256; ++nxt) {
                for (int a = j; a < 256; ++a) {
                    if (cnts[a] && pow2(a - nxt) < pow2(a - j)) {
                        cost_save[j][nxt] += cnts[a] * (pow2(a - j) - pow2(a - nxt));
                    }
                }
            }
        }
        
        vector<vector<i64>> dp(k + 1, vector<i64>(256, INF));
        for (int j = 0; j < 256; ++j) {
            dp[1][j] = 0;
            for (int a = 0; a < 256; ++a) {
                dp[1][j] += cnts[a] * pow2(a - j);
            }
        }

        for (int i = 0; i < k; ++i) {
            for (int j = 0; j < 256; ++j) {
                for (int nxt = j + 1; nxt < 256; ++nxt) {
                    /*i64 nxt_cost = dp[i][j]; //also AC, but close to TL (2.7s/3s)
                    for (int a = j; a < 256; ++a) {
                        if (cnts[a] && pow2(a - nxt) < pow2(a - j)) {
                            nxt_cost -= cnts[a] * (pow2(a - j) - pow2(a - nxt));
                        }
                    }*/
                    dp[i + 1][nxt] = min(dp[i + 1][nxt], dp[i][j] - cost_save[j][nxt]);
                }
            }
        }
        i64 res = INF;
        for (int j = 0; j < 256; ++j) {
            res = min(res, dp[k][j]);
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    posterize solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
