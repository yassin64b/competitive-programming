/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class ceiling {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;
        set<vector<pair<int, int>>> s;
        for (int i = 0; i < n; ++i) {
            vector<pair<int, int>> v(k);
            for (int j = 0; j < k; ++j) {
                in >> v[j].first;
                v[j].second = j;
            }
            sort(v.begin(), v.end());
            
            vector<int> res(k);
            for (int j = 0; j < k; ++j) {
                res[v[j].second] = j;
            }
            
            vector<pair<int, int>> def(k);
            for (int j = 0; j < k; ++j) {
                int a = 1000 * 1000 + 1, b = 0;
                for (int l = 0; l < j; ++l) {
                    if (res[l] < a && res[l] >= b) {
                        if (res[j] < res[l]) {
                            a = res[l];
                        } else {
                            b = res[l];
                        }
                    }
                }
                def[res[j]] = {a, b};
                //cout << a << " " << b << endl;
            }
            
            s.insert(def);
        }
        out << s.size() << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    ceiling solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
