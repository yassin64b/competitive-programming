/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

struct shield {
    int l, u;
    double f;
    
    bool operator<(const shield& rhs) {
        return l < rhs.l;
    }
};
class C101170 {
public:
    void solve(istream& in, ostream& out) {
        int x, y, n;
        in >> x >> y >> n;
        vector<shield> v(n);
        for (int i = 0; i < n; ++i) {
            in >> v[i].l >> v[i].u >> v[i].f;
        }
        sort(v.begin(), v.end());
        
        double low = -1e9, high = 1e9;
        for (int k = 0; k <= 10000; ++k) {
            double velo = (low + high) / 2;
            int cur = 0;
            double dist = 0;
            for (int i = 0; i < n; ++i) {
                //assert(cur <= v[i].l);
                dist += (v[i].l - cur) * velo;
                cur = v[i].l;
                //assert(cur <= v[i].u);
                dist += (v[i].u - cur) * velo * v[i].f;
                cur = v[i].u;
            }
            //assert(cur <= y);
            dist += (y - cur) * velo;
            if (dist > x) {
                high = velo;
            } else {
                low = velo;
            }
        }
        out.precision(17);
        out << fixed << (low + high) / 2 << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    C101170 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
