/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class F101170 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<vector<int>> w(2, vector<int>(n));
        for (int j = 0; j < 2; ++j) {
            for (int i = 0; i < n; ++i) {
                in >> w[j][i];
            }
        }
        
        int low = 0, high = 1000 * 1000 * 1000, ans = high;
        while (low <= high) {
            int mid = (low + high) / 2;
            bool valid = true;
            for (int i = 0; valid && i < 2; ++i) {
                int last = 0;
                for (int j = 0; valid && j < n; ++j) {
                    if (w[i][j] > mid) {
                        if (last) {
                            if (last == w[i][j]) {
                                last = 0;
                            } else {
                                valid = false;
                            }
                        } else {
                            last = w[i][j];
                        }
                    }
                }
                if (last) {
                    valid = false;
                }
            }
            if (valid) {
                high = mid - 1;
                ans = mid;
            } else {
                low = mid + 1;
            }
        }
        out << ans << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    F101170 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
