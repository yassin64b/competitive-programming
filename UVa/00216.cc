/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class uva216 {
private:
    int n;
    vector<vector<double>> dist;
    vector<vector<pair<double, int>>> dp;
    
    pair<double, int> tsp(int pos, int mask) {
        if (mask == (1 << n) - 1) {
            return {0., -1};
        }
        if (dp[pos][mask].first >= 0) {
            return dp[pos][mask];
        }
        
        pair<double, int> res{1000.*1000., -1};
        for (int nxt = 0; nxt < n; ++nxt) {
            if ((mask & (1 << nxt)) == (1 << nxt)) continue;

            double tmp = dist[pos][nxt] + tsp(nxt, mask | (1 << nxt)).first + 16;
            if (tmp < res.first) {
                res = {tmp, nxt};
            }
        }
        
        return dp[pos][mask] = res;
    }
    
    inline double sqr(double x) {
        return x*x;
    }
    inline double calc_dist(const pair<int,int> &p1, const pair<int,int> &p2) {
        return sqrt(sqr(p1.first - p2.first) + sqr(p1.second - p2.second));
    }
public:
    void solve(istream& in, ostream& out) {
        int t = 0;
        while (in >> n && n) {
            vector<pair<int,int>> v(n);
            dist.assign(n, vector<double>(n));
            dp.assign(n, vector<pair<double, int>>(1 << n, {-1., -1}));
            
            for (int i = 0; i < n; ++i) {
                in >> v[i].first >> v[i].second;
            }
            
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < n; ++j) {
                    dist[i][j] = calc_dist(v[i], v[j]);
                }
            }
            
            double res = 1000.*1000.;
            int start = -1;
            for (int i = 0; i < n; ++i) {
                double x = tsp(i, (1 << i)).first;
                if (x < res) {
                    res = x;
                    start = i;
                }
            }
            
            
            out << "**********************************************************\n";
            out << "Network #" << ++t << "\n";
            int mask = (1 << start);
            while (true) {
                int bla = tsp(start, mask).second;
                if (bla == -1) break;
                
                out << "Cable requirement to connect (";
                out << v[start].first << "," << v[start].second << ") to (";
                double tmp = dist[start][bla];
                start = bla;
                out << v[start].first << "," << v[start].second << ") is ";
                out.precision(2);
                out << fixed << tmp+16 << " feet.\n";
                
                mask |= (1 << bla);
            }
            out.precision(2);
            out << "Number of feet of cable required is " << fixed << res << ".\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    uva216 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
