/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class uva10827 {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        
        for (int t = 0; t < T; ++t) {
            int N;
            in >> N;
            
            vector<vector<int>> dp(N, vector<int>(N));
            for (int i = 0; i < N; ++i) {
                for (int j = 0; j < N; ++j) {
                    in >> dp[i][j];
                }
            }
            
            for (int i = 0; i < N; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (i > 0) {
                        dp[i][j] += dp[i-1][j];
                    }
                    if (j > 0) {
                        dp[i][j] += dp[i][j-1];
                    }
                    if (i > 0 && j > 0) {
                        dp[i][j] -= dp[i-1][j-1];
                    }
                }
            }
            
            int mx = -101;
            for (int a = 0; a < N; ++a) {
                for (int b = 0; b < N; ++b) {
                    for (int i = 0; i < N; ++i) {
                        for (int j = 0; j < N; ++j) {
                            int val = 0;
                            if (i >= a && j >= b) { //from [a][b] to [i][j]
                                val = dp[i][j];
                                if (a > 0) {
                                    val -= dp[a-1][j];
                                }
                                if (b > 0) {
                                    val -= dp[i][b-1];
                                }
                                if (a > 0 && b > 0) {
                                    val += dp[a-1][b-1];
                                }
                            } else if (i >= a) { // from [a][b] to [i][N-1] and [a][0] to [i][j]
                                val = dp[i][N-1];
                                if (a > 0) {
                                    val -= dp[a-1][N-1];
                                }
                                if (b > 0) {
                                    val -= dp[i][b-1];
                                }
                                if (a > 0 && b > 0) {
                                    val += dp[a-1][b-1];
                                }
    
                                val += dp[i][j];
                                if (a > 0) {
                                    val -= dp[a-1][j];
                                }
                            } else if (j >= b) { //from [a][b] to [N-1][j] and [0][b] to [i][j]
                                val = dp[N-1][j];
                                if (a > 0) {
                                    val -= dp[a-1][j];
                                }
                                if (b > 0) {
                                    val -= dp[N-1][b-1];
                                }
                                if (a > 0 && b > 0) {
                                    val += dp[a-1][b-1];
                                }
    
                                val += dp[i][j];
                                if (b > 0) {
                                    val -= dp[i][b-1];
                                }
                            } else {    //look at: [0][0]-[i][j] and [0][b]-[i][N-1]
                                        //and [a][0]-[N-1][j] and [a][b]-[N-1][N-1]
                                //first
                                val = dp[i][j];
                                
                                //second
                                val += dp[i][N-1];
                                if (b > 0) {
                                    val -= dp[i][b-1];
                                }
                                
                                //third
                                val += dp[N-1][j];
                                if (a > 0) {
                                    val -= dp[a-1][j];
                                }
                                
                                //fourth
                                val += dp[N-1][N-1];
                                if (a > 0) {
                                    val -= dp[a-1][N-1];
                                }
                                if (b > 0) {
                                    val -= dp[N-1][b-1];
                                }
                                if (a > 0 && b > 0) {
                                    val += dp[a-1][b-1];
                                }
                            }
                            mx = max(mx, val);
                        }
                    }
                }
            }
            out << mx << endl;
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    uva10827 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
