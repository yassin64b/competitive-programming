/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pair<int,int>> vii;

class uva11951 {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        
        for (int t = 1; t <= T; ++t) {
            int N, M, K;
            in >> N >> M >> K;
            
            vector<vector<int>> P(N, vector<int>(M));
            for (int i = 0; i < N; ++i) {
                for (int j = 0; j < M; ++j) {
                    in >> P[i][j];
                }
            }
            vector<vector<int64_t>> dp(N, vector<int64_t>(M));
            for (int i = 0; i < N; ++i) {
                for (int j = 0; j < M; ++j) {
                    dp[i][j] = P[i][j];
                    if (i > 0) dp[i][j] += dp[i-1][j];
                    if (j > 0) dp[i][j] += dp[i][j-1];
                    if (i > 0 && j > 0) dp[i][j] -= dp[i-1][j-1];
                }
            }
            
            //what is max plot size ending at point i,j for price x
            //note: must be rectangular
            
            int64_t minprice = 1e18, maxplot = -1;
            //N,M <= 100 --> 100^4 = 10^8
            for (int i = 0; i < N; ++i) {
                for (int j = 0; j < M; ++j) {
                    for (int a = i; a < N; ++a) {
                        for (int b = j; b < M; ++b) {
                            //rect from (i,j) to (a,b)
                            int64_t curplot = (a - i + 1) * (b - j + 1);
                            if (curplot < maxplot) {
                                continue;
                            }
                            
                            int64_t curprice = dp[a][b];
                            if (i > 0) curprice -= dp[i-1][b];
                            if (j > 0) curprice -= dp[a][j-1];
                            if (i > 0 && j > 0) curprice += dp[i-1][j-1];
                            
                            if (curprice <= K) {
                                if (curplot > maxplot) {
                                    maxplot = curplot;
                                    minprice = curprice;
                                } else if (curplot == maxplot && curprice < minprice) {
                                    maxplot = curplot;
                                    minprice = curprice;
                                }
                            }
                        }
                    }
                }
            }
            out << "Case #" << t << ": ";
            if (maxplot == -1) {
                out << 0 << " " << 0 << endl;
            } else {
                out << maxplot << " " << minprice << endl;
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    uva11951 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
