/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<int64_t> vl;
typedef vector<vl> vvl;

class uva10755 {
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        
        for (int q = 0; q < N; ++q) {
            int A, B, C;
            in >> A >> B >> C;
            
            vector<vvl> pp(A, vvl(B, vl(C)));
            vector<vvl> dp(A, vvl(B, vl(C, 0)));
            for (int i = 0; i < A; ++i) {
                for (int j = 0; j < B; ++j) {
                    for (int k = 0; k < C; ++k) {
                        in >> pp[i][j][k];
                        
                        int64_t sum = pp[i][j][k];
                        if (i > 0) {
                            sum += dp[i-1][j][k];
                        }
                        if (j > 0) {
                            sum += dp[i][j-1][k];
                        }
                        if (k > 0) {
                            sum += dp[i][j][k-1];
                        }
                        if (i > 0 && j > 0) {
                            sum -= dp[i-1][j-1][k];
                        }
                        if (i > 0 && k > 0) {
                            sum -= dp[i-1][j][k-1];
                        }
                        if (j > 0 && k > 0) {
                            sum -= dp[i][j-1][k-1];
                        }
                        if (i > 0 && j > 0 && k > 0) {
                            sum += dp[i-1][j-1][k-1];
                        }
                        dp[i][j][k] = sum;
                        //out << i << " " << j << " " << k << " : " << dp[i][j][k] << endl;
                    }
                }
            }
            
            int64_t res = -1e18;
            for (int i = 0; i < A; ++i) {
                for (int j = 0; j < B; ++j) {
                    for (int k = 0; k < C; ++k) {
                        for (int a = i; a < A; ++a) {
                            for (int b = j; b < B; ++b) {
                                for (int c = k; c < C; ++c) {
                                    int64_t sum = dp[a][b][c];
                                    if (i > 0) {
                                        sum -= dp[i-1][b][c];
                                    }
                                    if (j > 0) {
                                        sum -= dp[a][j-1][c];
                                    }
                                    if (k > 0) {
                                        sum -= dp[a][b][k-1];
                                    }
                                    if (i > 0 && j > 0) {
                                        sum += dp[i-1][j-1][c];
                                    }
                                    if (i > 0 && k > 0) {
                                        sum += dp[i-1][b][k-1];
                                    }
                                    if (j > 0 && k > 0) {
                                        sum += dp[a][j-1][k-1];
                                    }
                                    if (i > 0 && j > 0 && k > 0) {
                                        sum -= dp[i-1][j-1][k-1];
                                    }
                                    res = max(res, sum);
                                }
                            }
                        }
                    }
                }
            }
            out << res << "\n" << (q < N-1 ? "\n": "");
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    uva10755 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
