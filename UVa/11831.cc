/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pair<int,int>> vii;

class uva11831 {
public:
    void solve(istream& in, ostream& out) {
        int N, M, S;
        while (in >> N >> M >> S && (N || M || S)) {
            vector<string> arena(N);
            int ri, rj;
            char dir;
            for (int i = 0; i < N; ++i) {
                in >> arena[i];
                for (int j = 0; j < M; ++j) {
                    if (arena[i][j] != '.' && arena[i][j] != '*' && arena[i][j] != '#') {
                        ri = i;
                        rj = j;
                        dir = arena[i][j];
                    }
                }
            }
            
            string instructions;
            in >> instructions;
            
            map<char,char> right{{'N', 'L'}, {'L', 'S'}, {'S', 'O'}, {'O', 'N'}};
            map<char,char> left{{'N', 'O'}, {'L', 'N'}, {'S', 'L'}, {'O', 'S'}};
            map<char,pair<int,int>> forward{{'N', {-1, 0}}, {'L', {0, 1}}, {'S', {1, 0}}, {'O', {0, -1}}};
            int sticker = 0;
            for (int i = 0; i < S; ++i) {
                if (instructions[i] == 'D') {
                    dir = right[dir];
                    //cout << "turn right" << endl;
                } else if (instructions[i] == 'E') {
                    dir = left[dir];
                    //cout << "turn left" << endl;
                } else {
                    assert(instructions[i] == 'F');
                    int nri = ri + forward[dir].first, nrj = rj + forward[dir].second;
                    
                    if (nri >= 0 && nri < N && nrj >= 0 && nrj < M) {
                        if (arena[nri][nrj] != '#') {
                            ri = nri;
                            rj = nrj;
                            if (arena[ri][rj] == '*') {
                                ++sticker;
                                arena[ri][rj] = '.';
                            }
                        }
                    }
                    
                    //cout << ri << " " << rj << endl;
                }
            }
            out << sticker << endl;
            //cin.get();
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    uva11831 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
