/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin64b
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>

using namespace std;


// InfInt code goes here


class uva787 {
public:
    void solve(istream& in, ostream& out) {
        while (!in.eof()) {
            int x;
            vector<int> v;
            while (in >> x && x != -999999) {
                v.push_back(x);
            }
            if (v.size() == 0) {
                continue;
            }
    
            //first positive, second negative max
            vector<pair<InfInt,InfInt>> dp(v.size(), {"0", "0"});
            if (v[0] < 0) {
                dp[0].second = v[0];
            } else if (v[0] > 0) {
                dp[0].first = v[0];
            }
            InfInt mx = v[0];
            for (size_t i = 1; i < dp.size(); ++i) {
                if (v[i] < 0) {
                    if (dp[i-1].first > InfInt(0)) {
                        dp[i].second = dp[i-1].first * v[i];
                    } else {
                        dp[i].second = v[i];
                    }
                    if (dp[i-1].second < InfInt(0)) {
                        dp[i].first = dp[i-1].second * v[i];
                    }
                } else if (v[i] > 0) {
                    if (dp[i-1].first > InfInt(0)) {
                        dp[i].first = dp[i-1].first * v[i];
                    } else {
                        dp[i].first = v[i];
                    }
                    if (dp[i-1].second < InfInt(0)) {
                        dp[i].second = dp[i-1].second * v[i];
                    }
                } else {
                    mx = max(mx, InfInt(0));
                }
                if (dp[i].first > 0) {
                    mx = max(mx, dp[i].first);
                }
                if (dp[i].second < 0) {
                    mx = max(mx, dp[i].second);
                }
            }
            out << mx << endl;
        }
        
    }
};

int main() {
    std::ios::sync_with_stdio(false);

    uva787 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
