/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class uva481 {
public:
    void solve(istream& in, ostream& out) {
        vector<int> v;
        int tmp;
        
        while (in >> tmp) {
            v.push_back(tmp);
        }
        
        int n = v.size();
        int mx = 1, ind = n-1;
        vector<int> par(n, -1);
        vector<int> L, L_id;
        par[0] = 0;
        for (int i = 0; i < n; ++i) {
            vector<int>::iterator low = lower_bound(L.begin(), L.end(), v[i]);
            int pos = low-L.begin();
            if (low == L.end()) {
                par[i] = ((int)L_id.size()-1 >= 0 ? L_id[(int)L_id.size()-1] : i);
                
                L.push_back(v[i]);
                L_id.push_back(i);
            } else {
                par[i] = (pos-1 >= 0 ? L_id[pos - 1] : i);
                
                L[pos] = v[i];
                L_id[pos] = i;
            }
            
            if (pos + 1 >= mx) {
                mx = pos + 1;
                ind = i;
            }
            
            /*for (int i = 0; i < (int)L.size(); ++i) {
                out << L[i] << " ";
            }
            out << endl;*/
        }
    
        out << mx << endl << "-" << endl;
        
        vector<int> res(mx);
        int cnt = 0;
        while (par[ind] != ind) {
            res[cnt++] = v[ind];
            ind = par[ind];
        }
        res[mx-1] = v[ind];

        for (int i = res.size()-1; i >= 0; --i) {
            out << res[i] << endl;
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    uva481 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
