/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class uva00108 {
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        
        vector<vector<int>> dp(N, vector<int>(N));
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                in >> dp[i][j];
                
                if (i > 0) {
                    dp[i][j] += dp[i-1][j];
                }
                if (j > 0) {
                    dp[i][j] += dp[i][j-1];
                }
                if (i > 0 && j > 0) {
                    dp[i][j] -= dp[i-1][j-1];
                }
            }
        }
        
        int res{-100*100*256-10};
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                for (int a = i;  a < N; ++a) {
                    for (int b = j; b < N; ++b) {
                        int sum = dp[a][b];
                        if (i > 0) {
                            sum -= dp[i-1][b];
                        }
                        if (j > 0) {
                            sum -= dp[a][j-1];
                        }
                        if (i > 0 && j > 0) {
                            sum += dp[i-1][j-1];
                        }
                        res = max(res, sum);
                    }
                }
            }
        }
        out << res << endl;
        
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    uva00108 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
