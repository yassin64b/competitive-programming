/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class uva10496 {
private:
    int n;
    vector<vector<int>> dp;
    vector<pair<int,int>> beepers;
    
    int tsp(int pos, int mask) {
        if (mask == (1 << n) - 1) {
            return dist(pos, 0);
        }
        if (dp[pos][mask] >= 0) {
            return dp[pos][mask];
        }
        
        int res = 1000*1000;
        for (int nxt = 0; nxt < n; ++nxt) {
            if ((mask & (1 << nxt)) == (1 << nxt)) continue;
            
            int tmp = dist(pos, nxt) + tsp(nxt, mask | (1 << nxt));
            if (tmp < res) {
                res = tmp;
            }
        }
        
        return dp[pos][mask] = res;
    }
    
    int dist(int from, int to) {
        return abs(beepers[from].first - beepers[to].first) +
                abs(beepers[from].second - beepers[to].second);
    }
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int x_sz, y_sz;
            pair<int,int> start;
            in >> x_sz >> y_sz >> start.first >> start.second >> n;
            
            beepers.resize(n+1);
            beepers[0] = start;
            for (int i = 1; i <= n; ++i) {
                in >> beepers[i].first >> beepers[i].second;
            }
            
            ++n;
            dp.assign(n, vector<int>(1 << n, -1));
            out << "The shortest path has length " << tsp(0, 1) << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    uva10496 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
