/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskA {
private:
    pair<int, bool> check(string S, int n, int K) {
        int cnt = 0;
        for (int i = 0; i+K-1 < n; ++i) {
            if (S[i] == '-') {
                ++cnt;
                for (int j = i; j < i+K; ++j) {
                    S[j] = (S[j] == '+' ? '-' : '+');
                }
            }
        }
        bool is_ok = true;
        for (int i = 0; is_ok && i < n; ++i) {
            is_ok = (S[i] == '+');
        }
        
        return {cnt, is_ok};
    }
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            string S;
            int K;
            in >> S >> K;
            int n = S.size();
            
            pair<int, bool> res1 = check(S, n, K), res2;
            reverse(S.begin(), S.end());
            res2 = check(S, n, K);
            
            out << "Case #" << t << ": ";
            if (!res1.second && !res2.second) {
                out << "IMPOSSIBLE";
            } else if (res1.second && res2.second) {
                out << min(res1.first, res2.first);
            } else if (res1.second) {
                out << res1.first;
            } else {
                out << res2.first;
            }
            out << "\n";
        }
    }
};

int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskA solver;
    std::istream& in(cin);
    std::ostream& out(cout);
    solver.solve(in, out);
    return 0;
}
