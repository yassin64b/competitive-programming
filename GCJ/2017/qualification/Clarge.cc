/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            long long N, K;
            in >> N >> K;
            
            map<long long, long long> cnt;
            priority_queue<long long> pq; //pq of len of segments
            pq.emplace(N);
            cnt[N] = 1;
            long long last = N;
            for (long long i = 0; i < K; ) {
                long long cur = pq.top(), cnt_cur = cnt[cur];
                i += cnt[cur];
                last = cur;
                pq.pop();
                cnt.erase(cur);
                
                if (cur % 2 == 1) {
                    if (cnt[cur / 2] == 0) {
                        pq.emplace(cur / 2);
                    }
                    cnt[cur / 2] += 2*cnt_cur;
                } else {
                    if (cnt[cur / 2 - 1] == 0) {
                        pq.emplace(cur / 2 - 1);
                    }
                    cnt[cur / 2 - 1] += 1*cnt_cur;
    
                    if (cnt[cur / 2] == 0) {
                        pq.emplace(cur / 2);
                    }
                    cnt[cur / 2] += 1*cnt_cur;
                }
            }
            
            out << "Case #" << t << ": ";
            if (last % 2 == 1) {
                out << last / 2 << " " << last / 2 << "\n";
            } else {
                out << last / 2 << " " << last / 2 - 1 << "\n";
            }
        }
    }
};

int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(cin);
    std::ostream& out(cout);
    solver.solve(in, out);
    return 0;
}
