/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class GCJ17_D {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int N, M;
            in >> N >> M;
            vector<vector<int>> grid(N, vector<int>(N, 0));
            for (int i = 0; i < M; ++i) {
                char type;
                int R, C;
                in >> type >> R >> C;
                grid[R-1][C-1] = type;
            }
            
            //original grid
            /*for (int i = 0; i < N; ++i) {
                for (int j = 0; j < N; ++j) {
                    out << (grid[i][j] == 0 ? '.' : (char)grid[i][j]);
                }
                out << "\n";
            }*/
            
            int cnt = 0;
            string res;
            int indj = -1;
            for (int j = 0; j < N; ++j) {
                if (grid[0][j] == 'o' || grid[0][j] == 'x') {
                    indj = j;
                }
            }
            if (indj == -1) {
                grid[0][0] = 'o';
                indj = 0;
                res += "o 1 " + to_string(indj+1) + "\n";
                ++cnt;
            }
            if (grid[0][indj] == 'x') {
                grid[0][indj] = 'o';
                res += "o 1 " + to_string(indj+1) + "\n";
                ++cnt;
            }
            
            for (int j = 0; j < N; ++j) {
                if (j != indj && grid[0][j] != '+') {
                    grid[0][j] = '+';
                    res += "+ 1 " + to_string(j+1) + "\n";
                    ++cnt;
                }
            }
            
            vector<int> colfree(N, 1);
            colfree[indj] = 0;
            if (indj == N-1) {
                for (int i = 1; i < N; ++i) {
                    for (int j = N-1; j >= 0; --j) {
                        if (colfree[j]) {
                            colfree[j] = 0;
                            grid[i][j] = 'x';
                            res += "x " + to_string(i+1) + " " + to_string(j+1) + "\n";
                            ++cnt;
                            break;
                        }
                    }
                }
            } else {
                for (int i = 1; i < N; ++i) {
                    for (int j = 0; j < N; ++j) {
                        if (colfree[j]) {
                            colfree[j] = 0;
                            grid[i][j] = 'x';
                            res += "x " + to_string(i+1) + " " + to_string(j+1) + "\n";
                            ++cnt;
                            break;
                        }
                    }
                }
            }
            
            if (N > 1) {
                for (int j = 1; j < N-1; ++j) {
                    if (grid[N-1][j] == 0) {
                        grid[N-1][j] = '+';
                        res += "+ " + to_string(N-1+1) + " " + to_string(j+1) + "\n";
                        ++cnt;
                    }
                }
            }
            
            int score = 0;
            for (int i = 0; i < N; ++i) {
                for (int j = 0; j < N; ++j) {
                    if (grid[i][j] == 'x' || grid[i][j] == '+') {
                        score += 1;
                    } else if (grid[i][j] == 'o') {
                        score += 2;
                    }
                }
            }
            
            /*out << "final:\n";
            //final grid
            for (int i = 0; i < N; ++i) {
                for (int j = 0; j < N; ++j) {
                    out << (grid[i][j] == 0 ? '.' : (char)grid[i][j]);
                }
                out << "\n";
            }*/
            
            out << "Case #" << t << ": " << score << " " << cnt << "\n" << res;
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    GCJ17_D solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
