/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class gcjB {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int N, C, M;
            in >> N >> C >> M;
            vector<int> P(M), B(M);
            vector<vector<int>> cust(C+1, vector<int>(N+1, 0));
            for (int i = 0; i < M; ++i) {
                in >> P[i] >> B[i];
                ++cust[B[i]][P[i]];
            }
            
            int y = 0, z = 0;
            
            int sum = 0;
            for (int i = 1; i <= N; ++i) {
                for (int j = 1; j <= C; ++j) {
                    sum += cust[j][i];
                }
                if (sum > y * i) {
                    y = (sum + i - 1) / i;
                }
            }
            for (int i = 1; i <= C; ++i) {
                sum = 0;
                for (int j = 1; j <= N; ++j) {
                    sum += cust[i][j];
                }
                y = max(y, sum);
            }

            for (int i = 1; i <= N; ++i) {
                sum = 0;
                for (int j = 1; j <= C; ++j) {
                    sum += cust[j][i];
                }
                z += max(0, sum - y);
            }
            
            out << "Case #" << t << ": " << y << " " << z << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    gcjB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
