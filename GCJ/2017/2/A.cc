/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class gcjA {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int N, P;
            in >> N >> P;
            vector<int> G(N);
            for (int i = 0; i < N; ++i) {
                in >> G[i];
            }
            vector<int> rest(P+4, 0);
            for (int i = 0; i < N; ++i) {
                ++rest[G[i] % P];
            }
            
            int res = 0;
            res += rest[0];
            rest[0] = 0;
            if (P == 2) {
                res += rest[1] / 2;
                rest[1] %= 2;
            } else if (P == 3) {
                int tmp = min(rest[1], rest[2]);
                res += tmp;
                rest[1] -= tmp;
                rest[2] -= tmp;
                res += rest[1] / 3;
                res += rest[2] / 3;
                rest[1] %= 3;
                rest[2] %= 3;
            } else if (P == 4) {
                int tmp = min(rest[1], rest[3]);
                res += tmp;
                rest[1] -= tmp;
                rest[3] -= tmp;
                res += rest[2] / 2;
                rest[2] %= 2;
                if (rest[2] && rest[3] >= 2) {
                    ++res;
                    rest[2] = 0;
                    rest[3] -= 2;
                }
                if (rest[2] && rest[1] >= 2) {
                    ++res;
                    rest[2] = 0;
                    rest[1] -= 2;
                }
                res += rest[1] / 4;
                res += rest[3] / 4;
                rest[1] %= 4;
                rest[3] %= 4;
            }
            if (rest[1] || rest[2] || rest[3]) {
                ++res;
            }
            out << "Case #" << t << ": " << res << "\n";

            /*int num = 0;
            for (int i = 0; i < (int)G.size(); ) {
                G[i] %= P;
                if (G[i] == 0) {
                    G.erase(G.begin()+i);
                    ++num;
                } else {
                    ++i;
                }
            }
            int sres = 0;
            for (int x = 0; x < 10000000; ++x) {
                random_shuffle(G.begin(), G.end());
                int cur = 0, tmp = 0;
                for (int i = 0; i < (int)G.size(); ++i) {
                    if (cur == 0) {
                        ++tmp;
                    }
                    cur += G[i];
                    cur %= P;
                }
                sres = max(sres, tmp + num);
            }
            if (sres > res) {
                cout << "ALGO WRONG" << endl;
                assert(false);
            } else if (sres < res) {
                cout << "SHUFFLING WRONG" << endl;
            }*/
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    gcjA solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
