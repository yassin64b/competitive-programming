/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr double eps = 1e-12;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int N, P;
            in >> N >> P;
            vector<int> R(N);
            for (int i = 0; i < N; ++i) {
                in >> R[i];
            }
            vector<vector<int>> Q(N, vector<int>(P));
            for (int i = 0; i < N; ++i) {
                for (int j = 0; j < P; ++j) {
                    in >> Q[i][j];
                }
                sort(Q[i].begin(), Q[i].end());
            }
            
            int res = 0;
            vector<int> indj(N, 0);
            while (true) {
                int servings = 1;
                for (int i = 0; i < N; ++i) {
                    int& j = indj[i];
                    if (j >= P) {
                        break;
                    }
                    if (Q[i][j]+eps < 0.9*servings*R[i] || Q[i][j]-eps > 1.1*servings*R[i]) {
                        while (j < P && Q[i][j]+eps < 0.9*servings*R[i]) {
                            ++j;
                        }
                        while (j < P && Q[i][j]-eps > 1.1*servings*R[i]) {
                            ++servings;
                        }
                        i = -1;
                    }
                }
                if (*max_element(indj.begin(), indj.end()) < P) {
                    ++res;
                    //cout << "take with " << servings << ": ";
                    for (int i = 0; i < N; ++i) {
                        //cout << indj[i] << " ";
                        ++indj[i];
                    }
                    //cout << endl;
                } else {
                    break;
                }
            }
            out << "Case #" << t << ": " << res << "\n";
        }
    }
};

int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(cin);
    std::ostream& out(cout);
    solver.solve(in, out);
    return 0;
}
