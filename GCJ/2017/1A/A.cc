/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskA {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int R, C;
            in >> R >> C;
            vector<vector<char>> cake(R, vector<char>(C));
            for (int i = 0; i < R; ++i) {
                for (int j = 0; j < C; ++j) {
                    in >> cake[i][j];
                }
            }
            
            for (int i = 0; i < R; ++i) {
                for (int j = 0; j+1 < C; ++j) {
                    if (cake[i][j] != '?' && cake[i][j+1] == '?') {
                        cake[i][j+1] = cake[i][j];
                    }
                }
                for (int j = C-1; j-1 >= 0; --j) {
                    if (cake[i][j] != '?' && cake[i][j-1] == '?') {
                        cake[i][j-1] = cake[i][j];
                    }
                }
            }
            for (int i = 0; i+1 < R; ++i) {
                if (cake[i][0] != '?' && cake[i+1][0] == '?') {
                    cake[i+1] = cake[i];
                }
            }
            for (int i = R-1; i-1 >= 0; --i) {
                if (cake[i][0] != '?' && cake[i-1][0] == '?') {
                    cake[i-1] = cake[i];
                }
            }
            
            out << "Case #" << t << ":\n";
            for (int i = 0; i < R; ++i) {
                for (int j = 0; j < C; ++j) {
                    out << cake[i][j];
                }
                out << "\n";
            }
        }
    }
};

int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskA solver;
    std::istream& in(cin);
    std::ostream& out(cout);
    solver.solve(in, out);
    return 0;
}
