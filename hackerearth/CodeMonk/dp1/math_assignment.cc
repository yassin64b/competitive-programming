/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr int MAXV = 1000*10;

class dp3 {
public:
    void solve(istream& in, ostream& out) {
        int L, N, X, Y;
        in >> L >> N >> X >> Y;
        vector<int> nums(N);
        for (int i = 0; i < N; ++i) {
            in >> nums[i];
        }
        
        vector<int> dp(MAXV+1, 0);
        dp[L] = 1;
        for (int i = 0; i < N; ++i) {
            vector<int> tmp(MAXV+1, 0);
            for (int j = X; j <= Y; ++j) {
                if (dp[j]) {
                    if (j - nums[i] >= X && j - nums[i] <= Y) {
                        tmp[j - nums[i]] = 1;
                    }
                    if (j + nums[i] >= X && j + nums[i] <= Y) {
                        tmp[j + nums[i]] = 1;
                    }
                }
            }
            dp = tmp;
        }
        
        int Q;
        in >> Q;
        for (int q = 1; q <= Q; ++q) {
            char A;
            int B;
            in >> A >> B;
            bool flag = false;
            if (A == '<') {
                for (int i = X; !flag && i < B && i <= Y; ++i) {
                    if (dp[i]) {
                        out << "YES\n";
                        flag = true;
                    }
                }
            } else {
                for (int i = B+1; !flag && i <= Y; ++i) {
                    if (dp[i]) {
                        out << "YES\n";
                        flag = true;
                    }
                }
            }
            if (!flag) {
                out << "NO\n";
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    dp3 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
