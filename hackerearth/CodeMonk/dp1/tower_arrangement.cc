/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class dp1 {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        
        for (int t = 1; t <= T; ++t) {
            int N;
            in >> N;
            vector<int> v(N);
            for (int i = 0; i < N; ++i) {
                in >> v[i];
            }
            
            vector<int> num1(N, 0), num_1(N, 0);
            num1[0] = (v[0] == 1);
            for (int i = 1; i < N; ++i) {
                num1[i] = num1[i-1] + (v[i] == 1);
            }
            num_1[N-1] = (v[N-1] == -1);
            for (int i = N-2; i >= 0; --i) {
                num_1[i] = num_1[i+1] + (v[i] == -1);
            }
            int res = 1000*1000;
            for (int i = 0; i < N-1; ++i) {
                int tmp = num1[i] + num_1[i+1];
                res = min(res, tmp);
            }
            out << res << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    dp1 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
