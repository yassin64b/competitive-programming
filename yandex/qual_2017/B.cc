/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

struct office {
    string s, t;
};

class yandexB {
public:
    void solve(istream& in, ostream& out) {
        int c;
        in >> c;
        vector<vector<office>> offices(c);
        map<string, int> city_id;
        int id = 0;
        for (int i = 0; i < c; ++i) {
            string city;
            int n;
            in >> city >> n;
            city_id[city] = id;
            offices[id].resize(n);
            for (int j = 0; j < n; ++j) {
                in >> offices[id][j].t >> offices[id][j].s;
            }
            ++id;
        }
        
        cin.get();
        
        int m;
        in >> m;
        for (int i = 0; i < m; ++i) {
            int l;
            in >> l;
            vector<int> cities(l);
            for (int j = 0; j < l; ++j) {
                string city;
                in >> city;
                cities[j] = city_id[city];
            }
            
            for (int t = 0; t < 24; ++t) {
                bool free = true;
                for (int j = 0; free && j < l; ++j) {
                    free = false;
                    for (int k = 0; !free && k < (int)offices[cities[j]].size(); ++k) {
                        free = (offices[cities[j]][k].t[t] == '.');
                    }
                }
                
                if (free) {
                    out << "Yes ";
                    for (int j = 0; j < l; ++j) {
                        free = false;
                        int k;
                        for (k = 0; !free && k < (int)offices[cities[j]].size(); ++k) {
                            free = (offices[cities[j]][k].t[t] == '.');
                        }
                        assert(free);
                        out << offices[cities[j]][k - 1].s << (j + 1 < l ? " " : "\n");
                    }
                    goto next;
                }
            }
            out << "No\n";
            next:;
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    yandexB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
