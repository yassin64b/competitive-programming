/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class yandexD {
public:
    void solve(istream& in, ostream& out) {
        int t;
        in >> t;
        for (int tt = 0; tt < t; ++tt) {
            unsigned long long n;
            in >> n;
            
            int i = 1;
            while (true) {
                unsigned long long cur = n * i;
                //does cur have at most i bits set
                int x = 0;
                while (cur && x <= i) {
                    cur = (cur & (cur-1));
                    ++x;
                }
                if (x <= i) {
                    cur = n * i;
                    vector<int> res;
                    for (int shift = 0; shift <= 63; ++shift) {
                        unsigned long long v = (1ULL << shift);
                        if (v & cur) {
                            res.push_back(shift);
                            //out << shift << " ";
                        }
                    }
                    for (int k = 0; (int)res.size() < i && k < (int)res.size(); ++k) {
                        while ((int)res.size() < i && res[k] > 0) {
                            --res[k];
                            res.push_back(res[k]);
                        }
                    }
                    if ((int)res.size() == i) {
                        out << i << " ";
                        for (int y : res) {
                            out << y << " ";
                        }
                        out << "\n";
                    } else {
                        continue;
                    }
                    
                    break;
                }
                ++i;
            }
        }
        
        
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    yandexD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
