/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class rccB {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int n, H, A;
            in >> n >> H >> A;
            vector<pair<int, int>> ha(n);
            for (int i = 0; i < n; ++i) {
                in >> ha[i].first >> ha[i].second;
            }
            
            sort(ha.begin(), ha.end(), [A](const pair<int, int>& lhs, const pair<int, int>& rhs) {
                int num1 = (lhs.first-1) / A + 1;
                int num2 = (rhs.first-1) / A + 1;
                return num1 * lhs.second > num2 * rhs.second;
            });
            
            int i;
            for (i = 0; H > 0 && i < n; ++i) {
                int num = (ha[i].first-1) / A + 1;
                H -= num * ha[i].second;
                //cout << ha[i].first << " " << ha[i].second << " " << num << " " << H << endl;
            }
            //cout << endl;
            if (H > 0) {
                out << -1 << "\n";
            } else {
                out << i-1 << "\n";
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    rccB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
