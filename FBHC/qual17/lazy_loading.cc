/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pair<int,int>> vii;

class lazy_loading {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        
        for (int t = 1; t <= T; ++t) {
            int N;
            in >> N;
            
            vector<int> W(N);
            for (int i = 0; i < N; ++i) {
                in >> W[i];
            }
            sort(W.begin(), W.end(), greater<int>());
            
            int cnt = 0;
            vector<int> taken(N, 0);
            
            for (int i = 0; i < N; ++i) {
                if (taken[i]) {
                    continue;
                }
                taken[i] = 1;
                int num = 50 / W[i] + (50 % W[i] > 0 ? 1 : 0) - 1;
                //out << W[i] << " + ";
                for (int j = N-1; num > 0 && j > i; --j) {
                    if (!taken[j]) {
                        //out << W[j] << " + ";
                        --num;
                        taken[j] = 1;
                    }
                }
                //out << endl;
                if (num == 0) {
                    ++cnt;
                } else {
                    break;
                }
            }
            
            out << "Case #" << t << ": " << cnt << endl;
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    lazy_loading solver;
    std::ifstream in("lazy_loading.in");
    std::ofstream out("lazy_loading.out");
    solver.solve(in, out);
    return 0;
}
