/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class timus1893 {
public:
    void solve(istream& in, ostream& out) {
        int row;
        char seat;
        in >> row >> seat;
        vector<set<char>> window{{'A', 'D'}, {'A', 'F'}, {'A', 'K'}};
        vector<set<char>> aisle{{'B', 'C'}, {'B', 'C', 'D', 'E'}, {'C', 'D', 'G', 'H'}};
        if (row <= 2) {
            if (window[0].find(seat) != window[0].end()) {
                out << "window\n";
            } else {
                out << "aisle\n";
            }
        } else if (row <= 20) {
            if (window[1].find(seat) != window[1].end()) {
                out << "window\n";
            } else if (aisle[1].find(seat) != aisle[1].end()) {
                out << "aisle\n";
            } else {
                out << "neither\n";
            }
        } else {
            if (window[2].find(seat) != window[2].end()) {
                out << "window\n";
            } else if (aisle[2].find(seat) != aisle[2].end()) {
                out << "aisle\n";
            } else {
                out << "neither\n";
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    timus1893 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
