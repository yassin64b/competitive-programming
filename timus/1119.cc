/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class timus1119 {
public:
    void solve(istream& in, ostream& out) {
        int N, M, K;
        in >> N >> M >> K;
        
        set<pair<int,int>> diag;
        for (int i = 0; i < K; ++i) {
            int t1, t2;
            in >> t1 >> t2;
            diag.insert({t1, t2});
        }
        
        vector<vector<double>> dp(N+1, vector<double>(M+1));
        for (int i = 0; i <= N; ++i) {
            dp[i][0] = 100 * i;
        }
        for (int j = 0; j <= M; ++j) {
            dp[0][j] = 100 * j;
        }
        
        for (int i = 1; i <= N; ++i) {
            for (int j = 1; j <= M; ++j) {
                dp[i][j] = dp[i-1][j] + 100;
                dp[i][j] = min(dp[i][j], dp[i][j-1] + 100);
                if (diag.find({i, j}) != diag.end()) {
                    dp[i][j] = min(dp[i][j], dp[i-1][j-1] + sqrt(100*100*2));
                }
            }
        }
        out << round(dp[N][M]) << endl;
        
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    timus1119 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
