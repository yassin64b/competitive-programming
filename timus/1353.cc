/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

constexpr int LIM = 1e6 + 1;
constexpr int MIL = 1e9;

class timus1353 {
public:
    void solve(istream& in, ostream& out) {
        int S;
        in >> S;
        
        int cnt = S < 10;
        vector<int> sumOfDigits(LIM);
        for (int i = 0; i < 10; ++i) {
            sumOfDigits[i] = i;
        }
        
        int div = 10;
        for (int i = 10; i < LIM; ++i) {
            if (i >= div * 10) {
                div *= 10;
            }
            sumOfDigits[i] = sumOfDigits[i % div];
            sumOfDigits[i] += i / div;
            
            //cout << i << " -> " << sumOfDigits[i] << endl;
            //cin.get();
            
            if (sumOfDigits[i] == S) {
                ++cnt;
            }
        }
        
        bool flag = false;
        for (int i = LIM; i <= MIL; i += (flag ? 9 : 1)) {
            int digitSum = sumOfDigits[i % (LIM - 1)];
            digitSum += sumOfDigits[i / (LIM - 1)];
        
            if (digitSum == S) {
                ++cnt;
                flag = true;
            }
        }
        out << cnt << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    timus1353 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
