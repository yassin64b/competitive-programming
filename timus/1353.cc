/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class timus1353 {
public:
    void solve(istream& in, ostream& out) {
        int S;
        in >> S;
    
        int res = (S == 1); // if S == 1: 10^9 is one solution
        
        //10^9 - 1 got 9 digits
        vector<vector<int>> dp(9+1, vector<int>(S+1, 0));
        dp[0][0] = 1;
        
        for (int i = 1; i <= 9; ++i) {
            for (int d = 1; d <= 9; ++d) { //digit to be set at pos i
                for (int j = 0; j <= S; ++j) { //iterate over prev digit sum
                    if (j + d <= S) {
                        for (int k = 0; k < i; ++k) { //iterate here for adding zeroes in between
                            dp[i][j+d] += dp[k][j];
                        }
                    }
                }
            }
        }
        
        for (int i = 1; i <= 9; ++i) {
            res += dp[i][S];
            //out << dp[i][S] << " ";
        }
        //out << endl;
        out << res << endl;
        
        
        //verify solution correctness
        /*int cnt = 0;
        for (int i = 0; i <= 1000000000; ++i) {
            int j = i, sod = 0;
            while (j) {
                sod += j % 10;
                j /= 10;
            }
            if (sod == S) {
                ++cnt;
            }
        }
        assert(cnt == res);*/
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    timus1353 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
