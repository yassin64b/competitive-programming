/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class timus1225 {
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        
        vector<vector<int64_t>> dp(N+1, vector<int64_t>(3, 0)); //0 white, 1 red, 2 blue
        dp[0][0] = dp[0][1] = dp[0][2] = 1;
        for (int i = 1; i < N; ++i) {
            dp[i][0] += dp[i-1][1];
            dp[i][1] += dp[i-1][0];
            
            dp[i+1][1] += dp[i][2] + dp[i-1][0];
            dp[i+1][0] += dp[i][2] + dp[i-1][1];
            dp[i][2] += dp[i-1][0];
            dp[i][2] += dp[i-1][1];
        }
        //out << dp[N-1][0] << " " << dp[N-1][1] << " " << dp[N-1][2] << endl;
        out << dp[N-1][0] + dp[N-1][1] << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    timus1225 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
