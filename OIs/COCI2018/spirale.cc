/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class coci_spirale {
public:
    void solve(istream& in, ostream& out) {
        int n, m, k;
        in >> n >> m >> k;
        vector<vector<int>> res(n, vector<int>(m, 0));
        for (int i = 0; i < k; ++i) {
            int x, y, t;
            in >> x >> y >> t;
            --x;
            --y;
            int time = 0;
            int dirx[4], diry[4];
            if (t) {
                dirx[0] = 0; dirx[1] = 1; dirx[2] = 0; dirx[3] = -1;
                diry[0] = -1; diry[1] = 0; diry[2] = +1; diry[3] = 0;
            } else {
                dirx[0] = 0; dirx[1] = 1; dirx[2] = 0; dirx[3] = -1;
                diry[0] = 1; diry[1] = 0; diry[2] = -1; diry[3] = 0;
            }
            res[x][y] = ++time;
            for (int len = 2; len <= max(n, m) * 2; len += 2) {
                --x;
                int cur = len;
                for (int j = 0; j < 4; ) {
                    ++time;
                    if (x >= 0 && x < n && y >= 0 && y < m) {
                        if (res[x][y] == 0 || res[x][y] > time) {
                            res[x][y] = time;
                        }
                    }
                    --cur;
                    if (cur <= 0) {
                        ++j;
                        cur = len;
                    }
                    if (j < 4) {
                        x += dirx[j];
                        y += diry[j];
                    }
                   
    
                }
                
            }
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                out << res[i][j] << " ";
            }
            out << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    coci_spirale solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
