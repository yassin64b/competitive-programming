/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class coci_birokracija {
private:
    void dfs(int u, const vector<vector<int>> &g, vector<long long> &res,
            vector<int> &sub_sz) {
        res[u] = 1;
        sub_sz[u] = 1;
        for (int v : g[u]) {
            dfs(v, g, res, sub_sz);
            res[u] += res[v] + sub_sz[v];
            sub_sz[u] += sub_sz[v];
        }
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<vector<int>> g(n);
        for (int i = 0; i < n - 1; ++i) {
            int a;
            in >> a;
            g[a - 1].push_back(i + 1);
        }
        vector<long long> res(n, 0);
        vector<int> sub_sz(n, 0);
        dfs(0, g, res, sub_sz);
        for (int i = 0; i < n; ++i) {
            out << res[i] << " ";
        }
        out << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    coci_birokracija solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
