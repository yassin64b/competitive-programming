/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class foi_network {
private:
    int dfs_cnt = 0;
    void dfs_bridge(int u, const vector<vector<int>> &g, int &num_bridge,
                    vector<int> &low, vector<int> &num, vector<int> &par) {
        low[u] = num[u] = ++dfs_cnt;
        for (int v : g[u]) {
            if (!num[v]) {
                par[v] = u;
                dfs_bridge(v, g, num_bridge, low, num, par);
                if (low[v] > num[u]) {
                    ++num_bridge;
                }
                low[u] = min(low[u], low[v]);
            } else if (v != par[u]) {
                low[u] = min(low[u], low[v]);
            }
        }
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<vector<int>> g(n);
        for (int i = 0; i < n; ++i) {
            int a, b;
            in >> a >> b;
            g[a - 1].push_back(b - 1);
            g[b - 1].push_back(a - 1);
        }
        int res = 0;
        vector<int> low(n), num(n, 0), par(n);
        dfs_bridge(0, g, res, low, num, par);
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    foi_network solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
