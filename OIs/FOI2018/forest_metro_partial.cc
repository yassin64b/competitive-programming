/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class foi_forest_metro {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> x(n);
        for (int i = 0; i < n; ++i) {
            in >> x[i];
        }
        constexpr int MXV = 100 * 10;
        vector<vector<int>> dp1(n, vector<int>(MXV + 1, -1));
        vector<vector<int>> dp2(n, vector<int>(MXV + 1, -1));
        dp1[0][x[0]] = dp2[0][x[0]] = x[0];
        for (int i = 1; i + 1 < n; ++i) {
            for (int j = 0; j <= MXV; ++j) {
                if (dp1[i - 1][j] != -1) {
                    for (int k = -x[i], num_leave = x[i]; k <= x[i]; k += 2, --num_leave) {
                        if (j + k >= 0 && num_leave <= j) {
                            if (dp1[i][j + k] == -1) {
                                dp1[i][j + k] = max(dp1[i - 1][j], j + k);
                                dp2[i][j + k] = max(dp2[i - 1][j], j + k);
                            } else {
                                dp1[i][j + k] = min(dp1[i][j + k], max(dp1[i - 1][j], j + k));
                                dp2[i][j + k] = max(dp2[i][j + k], max(dp2[i - 1][j], j + k));
                            }
                        }
                    }
                }
            }
        }
        out << dp1[n - 2][x[n - 1]] << " " << dp2[n - 2][x[n - 1]] << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    foi_forest_metro solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
