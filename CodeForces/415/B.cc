/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

typedef long long ll;
class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n, f;
        in >> n >> f;
        vector<pair<ll, ll>> kl(n);
        for (int i = 0; i < n; ++i) {
            in >> kl[i].first >> kl[i].second;
        }
        
        sort(kl.begin(), kl.end(), [](const pair<ll, ll>& lhs, const pair<ll, ll>& rhs) {
            return min(2*lhs.first, lhs.second) - min(lhs.first, lhs.second) <
                    min(2*rhs.first, rhs.second) - min(rhs.first, rhs.second);
        });
        reverse(kl.begin(), kl.end());
    
        ll sum = 0;
        for (int i = 0; i < n; ++i) {
            //cout << kl[i].first << " " << kl[i].second << endl;
            if (i < f) {
                sum += min(2*kl[i].first, kl[i].second);
            } else {
                sum += min(kl[i].first, kl[i].second);
            }
        }
        out << sum << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
