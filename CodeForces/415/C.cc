/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr int MOD = 1000 * 1000 * 1000 + 7;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<long long> x(n);
        for (int i = 0; i < n; ++i) {
            in >> x[i];
        }
        
        sort(x.begin(), x.end());
        
        vector<long long> p2(n);
        p2[0] = 1;
        for (int i = 1; i < n; ++i) {
            p2[i] = p2[i-1] * 2;
            p2[i] %= MOD;
        }
        
        long long sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += (x[i] * (p2[i] - p2[n-i-1])) % MOD;
            sum %= MOD;
        }
        sum += MOD;
        sum %= MOD;
        
        out << sum << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
