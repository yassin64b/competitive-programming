/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin64b
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n;
        string s;
        in >> n >> s;
        vector<int> ins(s.size());
        for (size_t i = 0; i < s.size(); ++i) {
            if (s[i] == 'R') {
                ins[i] = 0;
            } else if (s[i] == 'L') {
                ins[i] = 1;
            } else if (s[i] == 'U') {
                ins[i] = 2;
            } else if (s[i] == 'D') {
                ins[i] = 3;
            }
        }
        
        int cnt = 0, res = 1;
        int allow[4] = {0};
        for (size_t i = 0; i < ins.size(); ++i) {
            if (allow[ins[i]] == 1) continue;
            
            if (cnt < 2) {
                if (ins[i] % 2 == 0) {
                    if (allow[ins[i]+1] == 1) {
                        cnt = 1;
                        allow[0] = allow[1] = allow[2] = allow[3] = 0;
                        allow[ins[i]] = 1;
                        ++res;
                        continue;
                    }
                } else {
                    if (allow[ins[i]-1] == 1) {
                        cnt = 1;
                        allow[0] = allow[1] = allow[2] = allow[3] = 0;
                        allow[ins[i]] = 1;
                        ++res;
                        continue;
                    }
                }
                allow[ins[i]] = 1;
                ++cnt;
            } else {
                cnt = 1;
                allow[0] = allow[1] = allow[2] = allow[3] = 0;
                allow[ins[i]] = 1;
                ++res;
            }
        }
        
        out << res << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
