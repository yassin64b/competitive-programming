/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n, a, b;
        in >> n >> a >> b;
        vector<pair<int, int>> seals(2*n);
        for (int i = 0; i < n; ++i)
            in >> seals[i].first >> seals[i].second;
        int res = 0;
        for (int i = 0; i < n; ++i) {
            int resta = a - seals[i].first;
            int restb = b - seals[i].second;
            for (int j = i + 1; j < n; ++j) {
                int vol = seals[i].first * seals[i].second + seals[j].first * seals[j].second;
                if (seals[i].second <= b && seals[j].first <= resta && seals[j].second <= b) {
                    res = max(res, vol);
                } else if (seals[i].second <= b && seals[j].second <= resta && seals[j].first <= b) {
                    res = max(res, vol);
                } else if (seals[i].first <= a && seals[j].first <= restb && seals[j].second <= a) {
                    res = max(res, vol);
                } else if (seals[i].first <= a && seals[j].second <= restb && seals[j].first <= a) {
                    res = max(res, vol);
                }
            }
            resta = a - seals[i].second;
            restb = b - seals[i].first;
            for (int j = i + 1; j < n; ++j) {
                int vol = seals[i].first * seals[i].second + seals[j].first * seals[j].second;
                if (seals[i].first <= b && seals[j].first <= resta && seals[j].second <= b) {
                    res = max(res, vol);
                } else if (seals[i].first <= b && seals[j].second <= resta && seals[j].first <= b) {
                    res = max(res, vol);
                } else if (seals[i].second <= a && seals[j].first <= restb && seals[j].second <= a) {
                    res = max(res, vol);
                } else if (seals[i].second <= a && seals[j].second <= restb && seals[j].first <= a) {
                    res = max(res, vol);
                }
            }
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
