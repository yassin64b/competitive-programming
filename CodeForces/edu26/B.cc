/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<string> flag(n);
        for (int i = 0; i < n; ++i)
            in >> flag[i];
        bool ok = false;
        if (n % 3 == 0) {
            ok = true;
            int h = n / 3;
            for (int end = h; end <= 3 * h; end += h)
                for (int i = end - h; i < end; ++i)
                    for (int j = 0; j < m; ++j)
                        if (flag[i][j] != flag[end - h][0]) ok = false;
            if (flag[0][0] == flag[h][0] || flag[0][0] == flag[2*h][0]
                    || flag[h][0] == flag[2*h][0])
                ok = false;
        }
        if (!ok && m % 3 == 0) {
            ok = true;
            int w = m / 3;
            for (int end = w; end <= 3 * w; end += w)
                for (int j = end - w; j < end; ++j)
                    for (int i = 0; i < n; ++i)
                        if (flag[i][j] != flag[0][end - w]) ok = false;
            if (flag[0][0] == flag[0][w] || flag[0][0] == flag[0][2*w]
                    || flag[0][w] == flag[0][2*w])
                ok = false;
        }
        
        out << (ok ? "YES" : "NO") << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
