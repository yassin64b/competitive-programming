/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n;
        long long L;
        in >> n >> L;
        vector<long long> c(n);
        for (int i = 0; i < n; ++i)
            in >> c[i];
        for (int i = 1; i < n; ++i) {
            c[i] = min(c[i], 2 * c[i - 1]);
        }
        long long res = 0, finit = 2e18;
        for (int i = n - 1; i >= 0; --i) {
            long long num = (1 << i);
            if (num <= L) {
                long long a = L / num;
                res += a * c[i];
                L %= num;
            }
            long long b = (L + num - 1) / num;
            finit = min(finit, res + b * c[i]);
        }
        out << finit << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
