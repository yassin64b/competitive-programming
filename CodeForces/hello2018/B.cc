/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskB {
private:
    pair<int, int> dfs(int u, const vector<vector<int>>& g) {
        if (g[u].empty())
            return {1, 1};
        int num = 0;
        for (int v : g[u]) {
            pair<int, int> tmp = dfs(v, g);
            if (!tmp.first)
                return {0, 0};
            num += tmp.second;
        }
        if (num >= 3)
            return {1, 0};
        else
            return {0, 0};
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<vector<int>> g(n);
        for (int i = 0; i < n - 1; ++i) {
            int p;
            in >> p;
            g[p - 1].push_back(i + 1);
        }
        pair<int, int> res = dfs(0, g);
        out << (res.first ? "Yes" : "No") << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
