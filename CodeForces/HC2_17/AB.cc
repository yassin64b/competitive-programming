/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class A802 {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;
        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        
        vector<pair<int, int>> b(n);
        for (int i = 0; i < n; ++i) {
            b[i] = {a[i], i};
        }
        sort(b.begin(), b.end());
        
        vector<int> nxt(n, -1);
        for (int i = 0; i + 1 < n; ++i) {
            if (b[i + 1].first == b[i].first) {
                assert(b[i + 1].second > b[i].second);
                nxt[b[i].second] = b[i + 1].second;
            }
        }
        
        int cost = 0;
        set<pair<int, int>> s;
        for (int i = 0; i < n; ++i) {
            if (s.find(make_pair(i, a[i])) == s.end()) {
                if ((int)s.size() == k) {
                    s.erase(--s.end());
                }
                assert((int)s.size() <= k);
                ++cost;
            } else {
                s.erase(make_pair(i, a[i]));
            }
            if (nxt[i] != -1) {
                s.emplace(nxt[i], a[i]);
            }
        }
        out << cost << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    A802 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
