/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class J802 {
private:
    int dfs(int u, const vector<vector<pair<int, int>>>& g, vector<int>& vis) {
        vis[u] = 1;
        int ret = 0;
        for (auto& p : g[u]) {
            if (!vis[p.first]) {
                ret = max(ret, dfs(p.first, g, vis) + p.second);
            }
        }
        return ret;
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<vector<pair<int, int>>> g(n);
        for (int i = 0; i < n - 1; ++i) {
            int u, v, c;
            in >> u >> v >> c;
            g[u].emplace_back(v, c);
            g[v].emplace_back(u, c);
        }
        
        vector<int> vis(n, 0);
        out << dfs(0, g, vis) << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    J802 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
