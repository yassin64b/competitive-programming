/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int k, n;
        in >> k >> n;
        vector<long long> a(k), b(n);
        for (int i = 0; i < k; ++i) {
            in >> a[i];
        }
        set<long long> bb;
        for (int i = 0; i < n; ++i) {
            in >> b[i];
            bb.insert(b[i]);
        }
    
        long long sum = 0;
        set<long long> res;
        for (int i = 0; i < k; ++i) {
            //b[0] after judge i
            sum += a[i];
            long long start = b[0] - sum;
            set<long long> curb = bb;
            for (int j = 0; j < k; ++j) {
                start += a[j];
                curb.erase(start);
            }
            if (curb.empty()) {
                res.insert(b[0] - sum);
            }
        }
        
        out << res.size() << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
