/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <bits/stdc++.h>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        long long k;
        int a, b;
        in >> k >> a >> b;
        --a;
        --b;
        int A[3][3], B[3][3];
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                in >> A[i][j];
                --A[i][j];
            }
        }
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                in >> B[i][j];
                --B[i][j];
            }
        }
        // wins: 2 > 1, 1 > 0, 0 > 2
        int win[3][3] = {{0, -1, 1}, {1, 0, -1}, {-1, 1, 0}};
        vector<vector<tuple<int, int, int>>> vis(3, vector<tuple<int, int, int>>(3, {-1, -1, 0}));
        long long cur_a = 0, cur_b = 0;
        long long num = 0;
        while (get<0>(vis[a][b]) == -1 && num < k) { // simulate till cycle
            ++num;
            vis[a][b] = {cur_a, cur_b, num};
            if (win[a][b] == 1) {
                ++cur_a;
            } else if (win[a][b] == -1) {
                ++cur_b;
            }
            int tmp_a = A[a][b];
            b = B[a][b];
            a = tmp_a;
        }
        // add cycle difference num_add times
        auto [w_a, w_b, w_n] = vis[a][b];
        int diffa = cur_a - w_a, diffb = cur_b - w_b, len = num - w_n + 1;
        long long num_add = (k - num) / len;
        cur_a += num_add * diffa;
        cur_b += num_add * diffb;
        num = num + (k - num) / len * len;
        
        while (num < k) { // simulate rest (< cycle len)
            ++num;
            if (win[a][b] == 1) {
                ++cur_a;
            } else if (win[a][b] == -1) {
                ++cur_b;
            }
            int tmp_a = A[a][b];
            b = B[a][b];
            a = tmp_a;
        }
        out << cur_a << " " << cur_b << endl;
    }
};

int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
