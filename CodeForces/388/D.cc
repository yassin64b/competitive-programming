/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin64b
 */

#include <fstream>

#include <iostream>
#include <map>
#include <vector>
#include <utility>
#include <set>
#include <algorithm>
#include <string>

using namespace std;

class TaskD {
public:

    void solve(std::istream& in, std::ostream& out) {
        ios::sync_with_stdio(false);

        int n;
        in >> n;

        //out << "HI" << endl;
        set<pair<int,int>> maxbid;
        vector<set<int>> bids(n);
        for (int i = 0; i < n; ++i) {
            int a, b;
            in >> a >> b;
            bids[a-1].insert(b);
        }
        //out << "HI" << endl;
        //fflush(stdout);
        for (int i = 0; i < n; ++i) {
            if (!bids[i].empty()) {
                if (*bids[i].rbegin() > 0) {
                    maxbid.insert({*bids[i].rbegin(), i});
                }
            }
        }
        //out << "HI" << endl;
        int q;
        in >> q;
        int v[200000];
        string res;
        for (int qq = 0; qq < q; ++qq) {
            int k;
            in >> k;
            //cout << "-";

            for (int i = 0; i < k; ++i) {
                int l;
                in >> l;
                --l;
                //out << "-";
                if (!bids[l].empty() && (*(bids[l].rbegin())) > 0) {
                    v[i] = l;
                    maxbid.erase({*bids[l].rbegin(), l});
                } else {
                    v[i] = -1;
                }
            }

            if (maxbid.size() > 0) {
                set<pair<int,int>>::iterator it = maxbid.end(), it2;
                set<int>::iterator it3;
                --it;
                it2 = it;

                if (maxbid.size() > 1) {
                    --it2;
                    it3 = bids[it->second].upper_bound(*bids[it2->second].rbegin());
                    res += to_string(it->second + 1) + " " + to_string(*it3) + "\n";
                } else {
                    res += to_string(it->second + 1) + " " + to_string(*bids[it->second].begin()) + "\n";
                }
            } else {
                res += "0 0\n";
            }

            for (int i = 0; i < k; ++i) {
                if (v[i] != -1) maxbid.insert({*(bids[v[i]].rbegin()), v[i]});
            }

        }
        out << res;
    }
};


int main() {
    //std::ios::sync_with_stdio(false);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}