/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        long long n, k;
        in >> n >> k;
        
        double mn_sum = (double)k * (k+1.) / 2.;
        if (mn_sum > n) {
            out << -1 << "\n";
            return;
        }
        
        if (k == 1) {
            out << n << "\n";
            return;
        }
        
        vector<long long> divs;
        for (long long i = 2; i*i <= n; ++i) {
            if (n % i == 0) {
                divs.push_back(i);
                if (i != n / i) {
                    divs.push_back(n / i);
                }
            }
        }
        divs.push_back(1);
        sort(divs.begin(), divs.end(), greater<long long>());
        
        for (long long gcd : divs) {
            long long nn = n, ii = gcd;
            for (long long j = 0; nn >= 0 && j < k; ++j) {
                nn -= ii;
                ii += gcd;
            }
            
            if (nn >= 0) {
                nn = n;
                ii = gcd;
                for (long long j = 0; j + 1 < k; ++j) {
                    nn -= ii;
                    out << ii << " ";
                    ii += gcd;
                }
                assert(nn >= ii && nn % gcd == 0);
                out << nn << "\n";
                return;
            }
        }
        
        assert(false);
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
