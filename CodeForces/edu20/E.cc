/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskE {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        string s;
        in >> n >> k >> s;
        
        vector<vector<int>> dp(n+1, vector<int>(2*k+1, 0));
        dp[0][k] = 1;
        for (int i = 1; i <= n; ++i) {
            if (s[i-1] == 'W' || s[i-1] == '?') {
                for (int j = 2; j < 2*k; ++j) {
                    if (dp[i-1][j-1]) {
                        dp[i][j] = 1;
                    }
                }
                if (i == n) {
                    if (dp[i-1][2*k-1]) {
                        dp[i][2*k] = 1;
                    }
                }
            }
            if (s[i-1] == 'L' || s[i-1] == '?') {
                for (int j = 1; j+2 <= 2*k; ++j) {
                    if (dp[i-1][j+1]) {
                        dp[i][j] = 1;
                    }
                }
                if (i == n) {
                    if (dp[i-1][1]) {
                        dp[i][0] = 1;
                    }
                }
            }
            if (s[i-1] == 'D' || s[i-1] == '?') {
                for (int j = 1; j+1 <= 2*k; ++j) {
                    if (dp[i-1][j]) {
                        dp[i][j] = 1;
                    }
                }
            }
        }
        if (!dp[n][0] && !dp[n][2*k]) {
            out << "NO\n";
        } else {
            int j = (dp[n][0] ? 0 : 2*k);
            for (int i = n; i >= 1; --i) {
                if (s[i-1] == 'W') {
                    --j;
                } else if (s[i-1] == 'L') {
                    ++j;
                } else if (s[i-1] == '?') {
                    if (j-1 >= 0 && dp[i-1][j-1]) {
                        s[i-1] = 'W';
                        --j;
                    } else if (dp[i-1][j]) {
                        s[i-1] = 'D';
                    } else if (j+1 <= 2*k && dp[i-1][j+1]) {
                        s[i-1] = 'L';
                        ++j;
                    } else {
                        assert(false);
                    }
                }
            }
            out << s << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskE solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
