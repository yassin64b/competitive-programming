/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pair<int,int>> vii;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int a, b, c, m;
        in >> a >> b >> c >> m;
        
        //vector<pair<int,int>> mouses(m);
        vector<int> valusb, valps2;
        for (int i = 0; i < m; ++i) {
            int val;
            string type;
            in >> val >> type;
            if (type == "USB") {
                valusb.push_back(val);
            } else {
                valps2.push_back(val);
            }
        }
        sort(valusb.begin(), valusb.end(), greater<int>());
        sort(valps2.begin(), valps2.end(), greater<int>());
        
        int64_t price = 0;
        int cnt = 0;
        while (a && valusb.size()) {
            ++cnt;
            --a;
            price += *valusb.rbegin();
            valusb.pop_back();
        }
        while (b && valps2.size()) {
            ++cnt;
            --b;
            price += *valps2.rbegin();
            valps2.pop_back();
        }
        
        while (c) {
            if (valusb.size() && valps2.size()) {
                if (*valusb.rbegin() < *valps2.rbegin()) {
                    price += *valusb.rbegin();
                    valusb.pop_back();
                } else {
                    price += *valps2.rbegin();
                    valps2.pop_back();
                }
                --c;
                ++cnt;
            } else if (valusb.size()) {
                price += *valusb.rbegin();
                valusb.pop_back();
                --c;
                ++cnt;
            } else if (valps2.size()) {
                price += *valps2.rbegin();
                valps2.pop_back();
                --c;
                ++cnt;
            } else {
                break;
            }
        }
        
        out << cnt << " " << price << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
