/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pair<int,int>> vii;

class TaskA {
public:
    void solve(istream& in, ostream& out) {
        int64_t n;
        int k;
        in >> n >> k;
        
        vector<int64_t> divisors;
        
        int64_t i = 1;
        while (i * i <= n) {
            if (n % i == 0) {
                divisors.push_back(i);
                //out << divisors[divisors.size()-1] << endl;
            }
            ++i;
        }
        
        while (i * i >= n) {
            --i;
        }
        
        while (i > 0) {
            if (n % i == 0) {
                divisors.push_back(n/i);
                //out << divisors[divisors.size()-1] << endl;
            }
            --i;
        }
        
        if ((int)divisors.size() >= k) {
            out << divisors[k-1] << endl;
        } else {
            out << -1 << endl;
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskA solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
