/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pair<int,int>> vii;

class TaskB {
private:
    int64_t calc(int x, int can) {
        int64_t lowest = x - (int64_t)can;
        int64_t avg = ((x - 1) - lowest) / 2 + lowest;
        return can * avg + (((x - 1) - lowest) % 2) * (can / 2);
    }
    
    bool check(int n, int m, int k, int x) {
        int can = x - 1;
        int canleft = min(can, k - 1);
        int canright = min(can, n - k);
        
        int64_t needed = 0;
        
        needed += calc(x, canleft);
        needed += calc(x, canright);
        
    
        needed += k - 1 - canleft;
        needed += n - k - canright;
        needed += x;
        
        return needed <= m;
    }
public:
    void solve(istream& in, ostream& out) {
        int n, m, k;
        in >> n >> m >> k;
        
        int lo = 1, hi = m, ans = 1;
        while (lo <= hi) {
            int x = (lo + hi) / 2;
            
            if (!check(n, m, k, x)) {
                hi = x-1;
            } else {
                ans = x;
                lo = x+1;
            }
        }
        out << ans << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
