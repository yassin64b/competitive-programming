/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <list>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n, q;
        in >> n >> q;
        vector<vector<pair<int, list<int>::iterator>>> v(n);
        list<int> l;
        int id = 0, del_upto = 0;
        for (int i = 0; i < q; ++i) {
            int type, xt;
            in >> type >> xt;
            if (type == 1) {
                l.push_back(++id);
                v[xt-1].emplace_back(id, --l.end());
            } else if (type == 2) {
                for (auto p : v[xt-1]) {
                    if (p.first > del_upto) {
                        l.erase(p.second);
                    }
                }
                v[xt-1].clear();
            } else {
                while (!l.empty() && l.front() <= xt) {
                    l.erase(l.begin());
                }
                del_upto = max(del_upto, xt);
            }
            out << l.size() << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
