/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class G730 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<pair<int,int>> reqs(n);
        for (int i = 0; i < n; ++i) {
            in >> reqs[i].first >> reqs[i].second;
            reqs[i].second += reqs[i].first-1;
        }
        
        vector<pair<int,int>> occ;
        for (int i = 0; i < n; ++i) {
            int x = reqs[i].first, y = reqs[i].second;
            bool overlaps = false;
            for (int j = 0; !overlaps && j < (int)occ.size(); ++j) {
                if (x <= occ[j].second && occ[j].first <= y) {
                    overlaps = true;
                }
            }
            if (overlaps) {
                y = 1 + (y - x);
                x = 1;
                for (int k = 0; k < n; ++k) {
                    for (int j = 0; j < (int)occ.size(); ++j) {
                        if (x <= occ[j].second && occ[j].first <= y) {
                            y = occ[j].second+1 + (y-x);
                            x = occ[j].second+1;
                        }
                    }
                }
            }
            
            occ.emplace_back(x, y);
        }
        
        for (int i = 0; i < n; ++i) {
            out << occ[i].first << " " << occ[i].second << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    G730 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
