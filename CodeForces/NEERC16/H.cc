/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <unordered_set>

using namespace std;

class H730 {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<string> fnames(n);
        for (int i = 0; i < n; ++i) {
            in >> fnames[i];
        }
        vector<int> a(m);
        unordered_set<int> set_a;
        for (int i = 0; i < m; ++i) {
            in >> a[i];
            --a[i];
            set_a.insert(a[i]);
        }
        
        int len = fnames[a[0]].size();
        for (int i : a) {
            if ((int)fnames[i].size() != len) {
                out << "No\n";
                return;
            }
        }
        
        string pattern = fnames[a[0]];
        for (int i : a) {
            for (int j = 0; j < len; ++j) {
                if (fnames[i][j] != pattern[j]) {
                    pattern[j] = '?';
                }
            }
        }
        
        for (int i = 0; i < n; ++i) {
            if (set_a.count(i)) {
                continue;
            }
            bool matches = (len == (int)fnames[i].size());
            for (int j = 0; matches && j < len; ++j) {
                matches = (fnames[i][j] == pattern[j] || pattern[j] == '?');
            }
            if (matches) {
                out << "No\n";
                return;
            }
        }
        out << "Yes\n" << pattern << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    H730 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
