/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;


class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<vector<int>> v(n);
        for (int i = 0; i < n; ++i) {
            int l;
            in >> l;
            v[i].resize(l);
            for (int j = 0; j < l; ++j) {
                in >> v[i][j];
            }
        }
        bool poss = true;
        vector<pair<int, int>> smaller;
        for (int i = 1; i < n; ++i) {
            int j;
            for (j = 0; j < (int)v[i - 1].size() && j < (int)v[i].size(); ++j) {
                if (v[i - 1][j] != v[i][j]) break;
            }
            if (j < (int)v[i - 1].size() && j == (int)v[i].size()) {
                poss = false;
            } else if (j < (int)v[i - 1].size() && j < (int)v[i].size()) {
                smaller.emplace_back(v[i - 1][j], v[i][j]);
            }
        }
        sort(smaller.begin(), smaller.end());
        reverse(smaller.begin(), smaller.end());
        set<int> cap;
        for (int i = 0; i < (int)smaller.size(); ++i) {
            if (smaller[i].first > smaller[i].second)
                cap.insert(smaller[i].first);
            if (cap.find(smaller[i].second) != cap.end())
                cap.insert(smaller[i].first);
        }
        for (int i = 0; i < (int)smaller.size(); ++i) {
            if (cap.find(smaller[i].first) != cap.end() && cap.find(smaller[i].second) != cap.end()) {
                if (smaller[i].first > smaller[i].second) {
                    poss = false;
                }
            }
        }
        if (poss) {
            out << "Yes\n";
            out << cap.size() << "\n";
            for (int x : cap) {
                out << x << " ";
            }
            out << "\n";
        } else {
            out << "No\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
