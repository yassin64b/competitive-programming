/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskB {
private:
    int sum_of_digits(const string &y) {
        int res = 0;
        for (int i = 0; i < (int)y.size(); ++i) {
            res += y[i] - '0';
        }
        return res;
    }
public:
    void solve(istream& in, ostream& out) {
        long long x;
        in >> x;
        string y(to_string(x));
        
        long long ans = x;
        int sod = sum_of_digits(y);
        for (int i = (int)y.size()-1; i >= 0; --i) {
            if (y[i] >= 1) {
                --y[i];
                for (int j = i+1; j < (int)y.size(); ++j) {
                    y[j] = '9';
                }
            }
            if (sum_of_digits(y) > sod) {
                ans = stoll(y);
                sod = sum_of_digits(y);
            }
        }
        
        out << ans << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
