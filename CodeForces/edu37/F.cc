/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskF {
private:
    vector<long long> a;
    int n;
    
    void build() {  // build the tree
        for (int i = n - 1; i > 0; --i) a[i] = a[i << 1] + a[i << 1 | 1];
    }
    
    void modify(int p, int value) {  // set value at position p
        for (a[p += n] = value; p > 1; p >>= 1) a[p >> 1] = a[p] + a[p ^ 1];
    }
    
    long long query(int l, int r) {  // sum on interval [l, r)
        long long res = 0;
        for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
            if (l & 1) res += a[l++];
            if (r & 1) res += a[--r];
        }
        return res;
    }
    
    const int MXV = 1'000'000;
public:
    void solve(istream &in, ostream &out) {
        int m;
        in >> n >> m;
        a.resize(2 * n);
        for (int i = 0; i < n; ++i) {
            in >> a[i + n];
        }
        build();
        vector<int> d(MXV + 1, 1);
        for (int i = 2; i <= MXV; ++i) {
            for (int j = i; j <= MXV; j += i) {
                ++d[j];
            }
        }
        set<int> act;
        for (int i = 0; i < n; ++i) {
            act.insert(i);
        }
        for (int i = 0; i < m; ++i) {
            int t, l, r;
            in >> t >> l >> r;
            if (t == 1) {
                auto it = act.lower_bound(l - 1);
                auto it_end = act.upper_bound(r - 1);
                for (; it != it_end;) {
                    const int ind = *it;
                    modify(ind, d[query(ind, ind + 1)]);
                    if (query(ind, ind + 1) <= 2) {
                        it = act.erase(it);
                    } else {
                        ++it;
                    }
                }
            } else {
                out << query(l - 1, r) << "\n";
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskF solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
