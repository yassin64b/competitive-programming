/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 0; t < T; ++t) {
            int n;
            in >> n;
            vector<pair<int, int>> lr(n);
            for (int i = 0; i < n; ++i) {
                in >> lr[i].first >> lr[i].second;
            }
            queue<int> q;
            for (int k = 1, i = 0; k <= 5000; ++k) {
                while (i < n && lr[i].first == k) {
                    q.push(i);
                    ++i;
                }
                while (!q.empty()) {
                    int j = q.front();
                    if (lr[j].second < k) {
                        q.pop();
                        out << 0 << " ";
                    } else {
                        break;
                    }
                }
                if (!q.empty()) {
                    int j = q.front();
                    q.pop();
                    out << k << " ";
                }
            }
            while (!q.empty()) {
                int j = q.front();
                q.pop();
                out << 0 << " ";
            }
            out << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
