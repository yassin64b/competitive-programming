/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin64b
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        
        vector<int> c(n), d(n);
        for (int i = 0; i < n; ++i) {
            in >> c[i] >> d[i];
        }
        
        int alpha = -2e9, beta = 2e9;
        for (int i = 0; i < n; ++i) {
            if (d[i] == 1) {
                alpha = max(alpha, 1900);
                if (beta < 1900) {
                    out << "Impossible" << endl;
                    return;
                }
            } else if (d[i] == 2) {
                beta = min(beta, 1899);
                if (alpha > 1899) {
                    out << "Impossible" << endl;
                    return;
                }
            }
    
            alpha += c[i];
            beta += c[i];
        }
        
        //cout << alpha << " " << beta << endl;
        if (beta < alpha) {
            out << "Impossible" << endl;
        } else if (beta > 1e9) {
            out << "Infinity" << endl;
        } else {
            out << beta << endl;
        }
        
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
