/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

constexpr double eps = 1e-7;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int k, q;
        in >> k >> q;
        vector<int> p(q);
        for (int i = 0; i < q; ++i) {
            in >> p[i];
        }
    
        vector<vector<double>> dp;
        dp.push_back(vector<double>(k+1));
        dp[0][0] = 1;
    
        double cur = 0;
        while (cur <= 1./2.) {
            dp.push_back(vector<double>(k+1));
            int i = dp.size()-1;
            dp[i][0] = 0;
            for (int j = 1; j <= k; ++j) {
                dp[i][j] = j / (double)k * dp[i-1][j];
                dp[i][j] += (k - j + 1) / (double)k * dp[i-1][j-1];
            }
            cur = dp[i][k];
        }
        //cout << dp.size() << endl;
    
        for (int i = 0; i < q; ++i) {
            for (int j = 0; j < (int)dp.size(); ++j) {
                if (dp[j][k] >= p[i] / (double)2000) {
                    out << j << endl;
                    break;
                }
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
