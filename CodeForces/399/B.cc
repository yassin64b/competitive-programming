/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream &in, ostream &out) {
        long long n, l, r;
        in >> n >> l >> r;
        
        int sum = 0;
        for (; l <= r; ++l) {
            long long cur = n;
            long long len = pow(2, (int)log2(n) + 1) - 1;
            long long mid = len / 2 + 1;
            //cout << mid << " " << l << " " << len << " " << cur << endl;
            while (mid != l) {
                len /= 2;
                if (l > mid) {
                    cur /= 2;
                    mid += len / 2 + 1;
                } else if (l < mid) {
                    cur /= 2;
                    mid -= len / 2 + 1;
                } else {
                    assert(true);
                }
                //cout << mid << " " << l << " " << len << " " << cur << endl;
                //cin.get();
            }
            //cout << endl;
            sum += cur % 2;
            //cout << cur%2 << " ";
        }
        out << sum << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
