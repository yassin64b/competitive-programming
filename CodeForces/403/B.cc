/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

constexpr double eps = 1e-8;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> x(n), v(n);
        for (int i = 0; i < n; ++i) {
            in >> x[i];
        }
        for (int i = 0; i < n; ++i) {
            in >> v[i];
        }
    
        double ans = 0, low = 1, high = 1000*1000*1000;
        while (low <= high + eps) {
            double mid = (low + high) / 2;
        
            double slow1 = 0, slow2 = 0;
            for (int i = 0; i < n; ++i) {
                double time = abs(x[i] - mid) / v[i];
                if (x[i] < mid) {
                    slow1 = max(slow1, time);
                } else if (x[i] > mid) {
                    slow2 = max(slow2, time);
                }
            }
        
            if (abs(slow1 - slow2) <= eps) {
                ans = slow1;
                break;
            } else if (slow1 < slow2) {
                ans = slow2;
                low = mid + eps;
            } else {
                ans = slow1;
                high = mid - eps;
            }
        }
        out.precision(17);
        out << fixed << ans << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
