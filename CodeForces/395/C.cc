/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>
#include <unordered_set>

using namespace std;

class TaskC {
private:
    int n;
    
    pair<int, int> dfs(int u, const vector<vector<int>> &g, const vector<int> &c, vector<int> &vis) {
        vis[u] = 1;
        for (int i = 0; i < (int) g[u].size(); ++i) {
            int v = g[u][i];
            pair<int, int> ret;
            if (vis[v] == 0) {
                if (c[u] != c[v]) {
                    return {u, v};
                } else if ((ret = dfs(v, g, c, vis)) != make_pair(-1, -1)) {
                    return ret;
                }
            }
            
        }
        return make_pair(-1, -1);
    }
    
    bool check(int u, const vector<vector<int>> &g, const vector<int> &c) {
        vector<int> vis(n, 0);
        vis[u] = 1;
        for (int i = 0; i < (int) g[u].size(); ++i) {
            if (dfs(g[u][i], g, c, vis) != make_pair(-1, -1)) {
                return false;
            }
        }
        return true;
    }

public:
    void solve(istream &in, ostream &out) {
        in >> n;
        
        vector<vector<int>> g(n);
        for (int i = 0; i < n - 1; ++i) {
            int u, v;
            in >> u >> v;
            g[u - 1].push_back(v - 1);
            g[v - 1].push_back(u - 1);
        }
        vector<int> c(n);
        for (int i = 0; i < n; ++i) {
            in >> c[i];
        }
        
        vector<int> vis(n, 0);
        pair<int, int> cand = dfs(0, g, c, vis);
        if (cand == make_pair(-1, -1)) {
            out << "YES\n" << 1 << "\n";
            return;
        }
        
        
        if (check(cand.first, g, c)) {
            out << "YES\n" << cand.first + 1 << "\n";
        } else if (check(cand.second, g, c)) {
            out << "YES\n" << cand.second + 1 << "\n";
        } else {
            out << "NO" << endl;
        }
        
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
