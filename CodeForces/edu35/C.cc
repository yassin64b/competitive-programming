/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int k[3];
        in >> k[0] >> k[1] >> k[2];
        vector<vector<int>> res(3, vector<int>(1501, 0));
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j <= 1500; j += k[i])
                res[i][j] = 1;
        }
        for (int a = 0; a <= 10; ++a) {
            for (int b = 0; b <= 10; ++b) {
                for (int c = 0; c <= 10; ++c) {
                    vector<int> cur(1501, 0);
                    for (int i = 0; i <= 1500; ++i) {
                        if (i - a >= 0 && res[0][i - a]) cur[i] = 1;
                        if (i - b >= 0 && res[1][i - b]) cur[i] = 1;
                        if (i - c >= 0 && res[2][i - c]) cur[i] = 1;
                    }
                    if (accumulate(cur.begin(), cur.end(), 0) == 1501) {
                        out << "YES\n";
                        return;
                    }
                }
            }
        }
        out << "NO\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
