/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> l1(n), r1(n);
        for (int i = 0; i < n; ++i) {
            in >> l1[i] >> r1[i];
        }
        int m;
        in >> m;
        vector<int> l2(m), r2(m);
        for (int i = 0; i < m; ++i) {
            in >> l2[i] >> r2[i];
        }
        
        int mn_r1 = *min_element(r1.begin(), r1.end());
        int mx_l1 = *max_element(l1.begin(), l1.end());
        int mn_r2 = *min_element(r2.begin(), r2.end());
        int mx_l2 = *max_element(l2.begin(), l2.end());
        
        out << max(0, max(mx_l2 - mn_r1, mx_l1 - mn_r2)) << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
