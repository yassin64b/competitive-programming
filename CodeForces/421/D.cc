/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> p(n);
        for (int i = 0; i < n; ++i)
            in >> p[i];
        vector<int> upd(n, 0);
        int gt = 0, lt = 0;
        long long res = 0;
        int ind = 0;
        for (int i = 0; i < n; ++i) {
            if (--p[i] > i) {
                ++gt;
                upd[p[i] - i] += 1;
            } else {
                ++lt;
            }
            res += abs(p[i] - i);
        }
        long long cur = res;
        for (int i = 1; i < n; ++i) {
            --lt; //tail element must be in lt
            const int tail = n - i;
            cur -= abs(p[tail] - (n - 1));
            cur += abs(p[tail] - 0);
            //cout << "update last: " << cur;
            cur -= gt;
            cur += lt;
            //cout << " update all: " << cur << endl;
            gt -= upd[i];
            lt += upd[i];
            if (p[tail] > 0) {
                ++gt;
                if (p[tail] - 0 + i < n)
                    upd[p[tail] - 0 + i] += 1;
            } else {
                ++lt;
            }
            if (cur < res) {
                ind = i;
                res = cur;
            }
            //cout << cur << endl;
        }
        out << res << " " << ind << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
