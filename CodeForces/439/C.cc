/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <bits/stdc++.h>

using namespace std;

class TaskC {
private:
    static constexpr int MOD = 998'244'353, MXV = 5000;
    vector<vector<int>> ncr;
    vector<int> fac;
    int calc(int x, int y) {
        int ans = 0;
        for (int i = 0; i <= min(x, y); ++i) {
            ans += 1LL * ncr[x][i] * ncr[y][i] % MOD * fac[i] % MOD;
            ans %= MOD;
        }
        return ans;
    }
public:
    void solve(istream& in, ostream& out) {
        int a, b, c;
        in >> a >> b >> c;
        ncr.assign(MXV + 1, vector<int>(MXV + 1));
        for(int i = 0; i <= MXV; i++) {
            ncr[i][0] = 1;
        }
        for(int i = 1; i <= MXV; i++) {
            for(int j = 1; j <= MXV; j++) {
                ncr[i][j] = (ncr[i - 1][j - 1] + ncr[i - 1][j]) % MOD;
            }
        }
        fac.resize(MXV + 1);
        fac[0] = 1;
        for (int i = 1; i <= MXV; ++i) {
            fac[i] = 1LL * i * fac[i - 1] % MOD;
        }
        int ans1 = calc(a, b), ans2 = calc(b, c), ans3 = calc(a, c);
        out << 1LL * ans1 * ans2 % MOD * ans3 % MOD << "\n";
    }
};

int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
