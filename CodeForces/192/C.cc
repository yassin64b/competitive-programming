/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin64b
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        
        char grid[100][100];
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                in >> grid[i][j];
            }
        }
        
        vector<pair<int,int>> res;
        bool free_row = true, free_col = true;
        for (int i = 0; free_row && i < n; ++i) {
            bool found = false;
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] != 'E') {
                    found = true;
                    res.push_back({i, j});
                    break;
                }
            }
            free_row = found;
        }
        
        if (free_row) {
            for (pair<int,int> &p : res) {
                out << p.first+1 << " " << p.second+1 << endl;
            }
            return;
        }
        res.clear();
        
        for (int j = 0; free_col && j < n; ++j) {
            bool found = false;
            for (int i = 0; i < n; ++i) {
                if (grid[i][j] != 'E') {
                    found = true;
                    res.push_back({i, j});
                    break;
                }
            }
            free_col = found;
        }
        if (free_col) {
            for (pair<int,int> &p : res) {
                out << p.first+1 << " " << p.second+1 << endl;
            }
            return;
        }
        out << -1 << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
