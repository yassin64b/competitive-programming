/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n;
        string s;
        in >> n >> s;
        string save = s;
        
        int i = s.size()-1;
        int64_t res = 0, base = 1;

        string sn = to_string(n);
        int maxdigits = sn.size();
        
        while (i >= 0) {
            int start = i;
            int64_t cur = s[i] - '0', x = 10, curdigits = maxdigits;
            while (curdigits-- && i >= 0 && cur < n) {
                s.pop_back();
                --i;
                if (i < 0) break;
                cur = cur + (s[i] - '0') * x;
                x *= 10;
            }
            if (i >= 0) cur = (cur % (x / 10));
    
            res += cur * base;
            base *= n;
            
            for (int j = i+1; j < start; ++j) {
                if (save[j] != '0') break;
                s += '0';
                ++i;
            }
        }
        out << res << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
