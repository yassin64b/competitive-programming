/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class E797 {
private:
    int n;
    
    int dfs(int p, int k, const vector<int>& a, vector<vector<int>>& res, vector<int>& vis) {
        if (p > n) {
            return 0;
        }
        if (vis[p]) {
            return res[k][p];
        }
        vis[p] = 1;
        return (res[k][p] = dfs(p + a[p] + k, k, a, res, vis) + 1);
    }
    int dfs(int p, int k, const vector<int>& a) {
        if (p > n) {
            return 0;
        }
        return dfs(p + a[p] + k, k, a) + 1;
    }
public:
    void solve(istream& in, ostream& out) {
        in >> n;
        vector<int> a(n+1);
        for (int i = 1; i <= n; ++i) {
            in >> a[i];
        }
        
        int sqrt_n = sqrt(n)+1;
        vector<vector<int>> res(sqrt_n+1, vector<int>(n+1));
        for (int i = 1; i <= sqrt_n; ++i) {
            vector<int> vis(n+1, 0);
            for (int j = 0; j <= n; ++j) {
                if (!vis[j]) {
                    dfs(j, i, a, res, vis);
                }
            }
        }
        
        int q;
        in >> q;
        for (int t = 1; t <= q; ++t) {
            int p, k;
            in >> p >> k;
            
            if (k <= sqrt_n) {
                out << res[k][p] << "\n";
            } else {
                out << dfs(p, k, a) << "\n";
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    E797 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
