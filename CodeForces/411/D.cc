/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr int MOD = 1000 * 1000 * 1000 + 7;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        string s;
        in >> s;
        int n = s.size();
        
        long long res = 0, numb = 0;
        for (int i = n-2; i >= 0; --i) {
            //cout << numb << " " << res << endl;
    
            if (s[i] == 'a' && s[i + 1] == 'b') {
                res += numb % MOD;
                ++res;
                res %= MOD;
                numb *= 2;
                numb %= MOD;
                s[i] = 'b';
                ++numb;
            } else if (s[i + 1] == 'b') {
                ++numb;
            }
            //cout << "after " << numb << " " << res << endl;
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
