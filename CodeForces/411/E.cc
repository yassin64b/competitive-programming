/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <unordered_set>

using namespace std;

class TaskE {
private:
    void dfs(int u, const vector<vector<int>>& ice, const vector<vector<int>>& g, vector<int>& col, vector<int>& av, vector<int>& vis) {
        vis[u] = 1;
        for (int x : ice[u]) {
            av[col[x]] = 0;
        }
        int ind = 1;
        for (int x : ice[u]) {
            if (!col[x]) {
                while (!av[ind]) {
                    ++ind;
                }
                av[ind] = 0;
                col[x] = ind;
            }
        }
        
        for (int x : ice[u]) {
            av[col[x]] = 1;
        }
        for (int v : g[u]) {
            if (!vis[v]) {
                dfs(v, ice, g, col, av, vis);
            }
        }
    }
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        
        vector<int> s(n);
        vector<vector<int>> ice(n);
        for (int i = 0; i < n; ++i) {
            in >> s[i];
            ice[i].resize(s[i]);
            for (int j = 0; j < s[i]; ++j) {
                in >> ice[i][j];
                --ice[i][j];
            }
        }
        vector<vector<int>> t(n);
        for (int i = 0; i + 1 < n; ++i) {
            int u, v;
            in >> u >> v;
            t[u-1].push_back(v-1);
            t[v-1].push_back(u-1);
        }
        
        vector<int> col(m, 0);
        int c = 1;
        for (int i = 0; i < n; ++i) {
            c = max(c, s[i]);
        }
        vector<int> av(c+1, 1), vis(n, 0);
        dfs(0, ice, t, col, av, vis);
        
        out << c << "\n";
        for (int x : col) {
            out << max(x, 1) << " ";
        }
        out << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskE solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
