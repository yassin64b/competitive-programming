/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin64b
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;

        vector<int> t(n);
        for (int i = 0; i < n; ++i) {
            in >> t[i];
        }

        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (t[i] < 0) {
                ++cnt;
            }
        }

        bool summer = true, first = true;
        int change = 0, tmp = 0, wi = 0;
        vector<pair<int,int>> seg;
        for (int i = 0; i < n; ++i) {
            if (summer && t[i] < 0) {
                summer = false;
                ++change;
                //out << "ti: " << t[i] << " " << tmp << endl;
                if (!first) {
                    seg.push_back({tmp, 2});
                } else {
                    first = false;
                }

                tmp = 0;
                ++wi;
            } else if (t[i] < 0) {
                ++wi;
            } else if (!summer && t[i] >= 0) {
                summer = true;
                ++change;
                tmp = 1;
            } else if (t[i] >= 0) {
                ++tmp;
            }
        }
        //out << wi << " " << change << endl;

        if (tmp > 0) {
            seg.push_back({tmp, 1});
        }

        if (wi > k) {
            out << -1 << endl;
            return;
        }
        sort(seg.begin(), seg.end(), [](const pair<int,int> &lhs, const pair<int,int> &rhs) {
            return lhs.second > rhs.second || (lhs.second == rhs.second && lhs.first < rhs.first);
        });

        /*for (size_t i = 0; i < seg.size(); ++i) {
            out << seg[i].first << "," << seg[i].second << " | ";
        }
        out << endl;*/

        for (size_t i = 0; i < seg.size(); ++i) {
            if (wi + seg[i].first <= k && change - seg[i].second >= 0) {
                //out << "took " << i << endl;
                wi += seg[i].first;
                change -= seg[i].second;
            }
        }

        out << change << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
