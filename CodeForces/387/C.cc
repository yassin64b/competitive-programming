/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin64b
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <queue>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n, q;
        in >> n >> q;

        vector<int> servers(n, 0);
        priority_queue<pair<int,vector<int>>, vector<pair<int,vector<int>>>, greater<pair<int,vector<int>>>> freeserv;

        for (int i = 0; i < q; ++i) {
            int t, k, d;
            in >> t >> k >> d;

            while (!freeserv.empty() && freeserv.top().first <= t) {
                pair<int, vector<int>> v = freeserv.top();
                for (int s : v.second) {
                    servers[s] = 0;
                }
                freeserv.pop();
            }
            int cnt = 0, sum = 0;
            vector<int> v;
            for (int j = 0; j < n; ++j) {
                if (servers[j] == 0) {
                    v.push_back(j);
                    sum += j + 1;
                    if (++cnt >= k) break;
                }
            }

            if (cnt >= k) {
                for (int &x : v) {
                    servers[x] = 1;
                }
                out << sum << endl;
                freeserv.push({t + d, v});
            } else {
                out << -1 << endl;
            }
        }

    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
