/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin64b
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <sstream>
#include <cassert>

using namespace std;

class TaskE {
private:
    void dfs(size_t &i, size_t d, vector<pair<string,int>> &v, vector<vector<string>> &res) {
        if (i >= v.size()) return;

        int cnt = v[i].second;
        string word = v[i].first;
        if (res.size() <= d) {
            res.push_back(vector<string>());
        }
        res[d].push_back(word);

        for (int j = 0; j < cnt; ++j) {
            ++i;
            dfs(i, d+1, v, res);
        }
    }
public:
    void solve(istream& in, ostream& out) {
        string cmts;
        in >> cmts;

        vector<vector<string>> res;
        vector<pair<string,int>> v;
        stringstream ss(cmts);

        while (!ss.eof()) {
            string word, wnum;
            int num;
            getline(ss, word, ',');
            getline(ss, wnum, ',');
            num = stoi(wnum);

            v.push_back({word, num});
            //out << word << " " << num << endl;
        }

        size_t i = 0;
        while (i < v.size()) {
            dfs(i, 0, v, res);
            ++i;
        }

        out << res.size() << endl;
        for (vector<string> &x : res) {
            for (string &s : x) {
                out << s << " ";
            }
            out << endl;
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskE solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
