/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

inline int64_t LSOne(int64_t b) {
    return (b & (-b));
}

class FenwickTree {
private:
    vector<int64_t> ft;
public:
    FenwickTree(int64_t n) {
        ft.assign(n + 1, 0);
    }
    int64_t rsq(int64_t b) {
        int sum = 0;
        for (; b; b -= LSOne(b)) {
            sum += ft[b];
        }
        return sum;
    }
    int64_t rsq(int64_t a, int64_t b) {
        if (a > b) return 0;
        return rsq(b) - rsq(a - 1);
    }
    void update(int64_t a, int64_t v) {
        for ( ; a < (int)ft.size(); a += LSOne(a)) {
            ft[a] += v;
        }
    }
    void update(int64_t a, int64_t b, int64_t v) {
        update(a, v);
        update(b + 1, -v);
    }
};
class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;
        
        k = min(k, n-k);
        
        FenwickTree ft(n+1);
        for (int i = 1; i < n+1; ++i) {
            ft.update(i, 0);
        }
        vector<int64_t> g(n+1, 0);
        int cur = 1;
        int64_t sections = 1;
        for (int i = 0; i < n; ++i) {
            ft.update(cur, 1);
            //++g[cur];
            
            int64_t add = 1;
            int old = cur;
            if (cur + k > n) {
                cur += k - n;
            } else {
                cur += k;
            }
            //cout << cur << " -> ";
            if (old > cur) {
                add += ft.rsq(old+1, n) + ft.rsq(1, cur-1);
            } else {
                add += ft.rsq(old+1, cur-1);
            }
            /*for (++old; old != cur; ++old) {
                if (old > n) {
                    old -= n;
                    if (old == cur) break;
                }
    
                //cout << old << ":" << (g[old] ? g[old] : 0) << " ";
                add += (g[old] ? g[old] : 0);
            }*/
            //cout << add << endl;
            sections += add;
            out << sections << " ";
            
            ft.update(cur, 1);
            //++g[cur];
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
