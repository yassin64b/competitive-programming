/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<pair<int, int>> lr(n);
        for (int i = 0; i < n; ++i) {
            in >> lr[i].first >> lr[i].second;
        }
        sort(lr.begin(), lr.end());
        priority_queue<int> pq;
        for (int i = 0; i < n; ++i) {
            while (!pq.empty() && -pq.top() < lr[i].first) {
                pq.pop();
            }
            pq.push(-lr[i].second);
            if (pq.size() > 2U) {
                out << "NO\n";
                return;
            }
        }
        out << "YES\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
