/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        int res = 0;
        stack<int> s_lim;
        int overtake = 0;
        for (int i = 0, speed = -1; i < n; ++i) {
            int t;
            in >> t;
            if (t == 1) {
                in >> speed;
                while (!s_lim.empty() && s_lim.top() < speed) {
                    s_lim.pop();
                    ++res;
                }
            } else if (t == 2) {
                res += overtake;
                overtake = 0;
            } else if (t == 3) {
                int new_lim;
                in >> new_lim;
                if (new_lim < speed) {
                    ++res;
                } else {
                    s_lim.push(new_lim);
                }
            } else if (t == 4) {
                overtake = 0;
            } else if (t == 5) {
                s_lim = stack<int>();
            } else {
                assert(t == 6);
                ++overtake;
            }
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
