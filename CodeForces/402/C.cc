/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;
        vector<int> a(n), b(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        vector<pair<int,int>> diff(n);
        for (int i = 0; i < n; ++i) {
            in >> b[i];
            diff[i] = make_pair(a[i] - b[i], i);
        }
        int money = 0;
        sort(diff.begin(), diff.end());
        for (int i = 0; i < k; ++i) {
            money += a[diff[i].second];
        }
        for (int i = k; i < n; ++i) {
            if (diff[i].first <= 0) {
                money += a[diff[i].second];
            } else {
                money += b[diff[i].second];
            }
        }
        out << money << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
