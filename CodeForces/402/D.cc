/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskD {
private:
    bool possible(const string &t, const string &p, const vector<int> &a, int mid) {
        string res(t.size(), ' ');
        for (int i = (int)a.size()-1; i >= (int)a.size()-mid && i >= 0; --i) {
            res[a[i]-1] = t[a[i]-1];
        }
        
        int j = 0;
        for (int i = 0; j < (int)p.size() && i < (int)t.size(); ++i) {
            if (res[i] == p[j]) {
                ++j;
            }
        }
        
        //cout << mid << " : " << res << endl;
        if (j == (int)p.size()) {
            return true;
        }
        return false;
    }
public:
    void solve(istream& in, ostream& out) {
        string t, p;
        in >> t >> p;
        int n = t.size();
        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        
        int low = 1, high = t.size(), ans = high;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (possible(t, p, a, mid)) {
                //cout << "possible" << endl;
                ans = mid;
                high = mid-1;
            } else {
                low = mid+1;
            }
        }
        out << n - ans << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
