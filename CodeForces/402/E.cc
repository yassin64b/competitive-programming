/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>
#include <unordered_map>

using namespace std;

struct Op {
    int id;
    string lhs, rhs;
    int lhsid, rhsid;
    int op;
};

class TaskE {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        
        map<string,int> name_id;
        name_id["?"] = n;
        vector<Op> v(n);
        for (int i = 0; i < n; ++i) {
            string trash, name, op;
            in >> name >> trash >> v[i].lhs;
            v[i].id = i;
            name_id[name] = i;
            if (v[i].lhs[0] == '0' || v[i].lhs[0] == '1') {
                v[i].op = 0;
            } else {
                in >> op >> v[i].rhs;
                if (op == "AND") {
                    v[i].op = 1;
                } else if (op == "OR") {
                    v[i].op = 2;
                } else if (op == "XOR"){
                    v[i].op = 3;
                }
                v[i].lhsid = name_id[v[i].lhs];
                v[i].rhsid = name_id[v[i].rhs];
            }
        }
        
        vector<int> mn(m, 0), mx(m, 0);
        for (int i = 0; i < m; ++i) {
            int sum[2] = {0, 0};
            for (int p = 0; p < 2; ++p) {
                vector<int> val(n+1);
                val[n] = p;
                for (int j = 0; j < n; ++j) {
                    int cur;
                    if (v[j].op == 0) {
                        cur = v[j].lhs[i];
                        sum[p] += cur;
                    } else if (v[j].op == 1) {
                        cur = val[v[j].lhsid] & val[v[j].rhsid];
                        sum[p] += cur;
                    } else if (v[j].op == 2) {
                        cur = val[v[j].lhsid] | val[v[j].rhsid];
                        sum[p] += cur;
                    } else if (v[j].op == 3) {
                        cur = val[v[j].lhsid] ^ val[v[j].rhsid];
                        sum[p] += cur;
                    } else {
                        cur = -1;
                        assert(true);
                    }
                    val[v[j].id] = cur;
                }
            }
            if (sum[0] < sum[1]) {
                mn[i] = 0;
                mx[i] = 1;
            } else if (sum[0] == sum[1]) {
                mn[i] = mx[i] = 0;
            } else if (sum[0] > sum[1]) {
                mn[i] = 1;
                mx[i] = 0;
            }
        }
        
        for (int i = 0; i < m; ++i) {
            out << mn[i];
        }
        out << "\n";
        for (int i = 0; i < m; ++i) {
            out << mx[i];
        }
        out << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskE solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
