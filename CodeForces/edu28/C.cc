/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskC {
private:
    pair<long long, int> calc(int start, int end, const vector<int> &v) {
        long long sum = 0;
        for (int i = start; i < end; ++i) {
            sum += v[i];
        }
        long long best = -sum;
        int ind = start;
        long long cur = 0;
        for (int i = start; i < end; ++i) {
            cur += v[i];
            long long rest = sum - cur;
            if (cur - rest > best) {
                best = cur - rest;
                ind = i + 1;
            }
        }
        return {best, ind};
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> v(n);
        for (int i = 0; i < n; ++i) {
            in >> v[i];
        }
        tuple<int, int, int> delim;
        long long res = -5'000'000'000'000LL;
        for (int ind_b = 0; ind_b <= n; ++ind_b) { // ind_b is delim1
            auto [best_a, ind_a] = calc(0, ind_b, v);
            auto [best_c, ind_c] = calc(ind_b, n, v);
            if (best_a + best_c > res) {
                res = best_a + best_c;
                delim = {ind_a, ind_b, ind_c};
            }
        }
        auto [a, b, c] = delim;
        out << a << " " << b << " " << c << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
