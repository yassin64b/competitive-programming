/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskD {
private:
    bool check(int q, const vector<tuple<int, int, int>> &ev, const int n,
               const int m, const int k) {
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < q; ++i) {
            auto [t, x, y] = ev[i];
            grid[x][y] = 1;
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (i > 0) grid[i][j] += grid[i - 1][j];
                if (j > 0) grid[i][j] += grid[i][j - 1];
                if (i > 0 && j > 0) grid[i][j] -= grid[i - 1][j - 1];
            }
        }
        for (int i = k - 1; i < n; ++i) {
            for (int j = k - 1; j < m; ++j) {
                int sum = grid[i][j];
                if (i - k >= 0) sum -= grid[i - k][j];
                if (j - k >= 0) sum -= grid[i][j - k];
                if (i - k >= 0 && j - k >= 0) sum += grid[i - k][j - k];
                if (sum == k * k) {
                    return true;
                }
            }
        }
        return false;
    }
public:
    void solve(istream& in, ostream& out) {
        int n, m, k, q;
        in >> n >> m >> k >> q;
        vector<tuple<int, int, int>> ev(q);
        for (int i = 0; i < q; ++i) {
            int x, y, t;
            in >> x >> y >> t;
            --x;
            --y;
            ev[i] = {t, x, y};
        }
        sort(ev.begin(), ev.end());
        int low = 0, high = q, ans = high;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (check(mid, ev, n, m, k)) {
                high = mid - 1;
                ans = mid;
            } else {
                low = mid + 1;
            }
        }
        if (check(ans, ev, n, m, k)) {
            out << get<0>(ev[ans - 1]) << "\n";
        } else {
            out << -1 << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
