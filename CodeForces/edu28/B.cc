/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n, k, M;
        in >> n >> k >> M;
        vector<int> t(k);
        for (int i = 0; i < k; ++i) {
            in >> t[i];
        }
        sort(t.begin(), t.end());
        int res = 0;
        for (int i = 0; i <= n; ++i) { // solve first i tasks completely
            int points = 0, time = 0;
            for (int j = 0; j < i; ++j) {
                for (int l = 0; l < k; ++l) {
                    time += t[l];
                    ++points;
                }
                ++points;
            }
            if (time <= M) {
                for (int l = 0; l < k; ++l) { // take left over tasks greedily
                    for (int j = i; j < n; ++j) {
                        if (time + t[l] <= M) {
                            time += t[l];
                            ++points;
                        }
                    }
                }
                res = max(res, points);
            }
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
