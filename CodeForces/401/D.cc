/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<string> hashtag(n);
        for (int i = 0; i < n; ++i) {
            in >> hashtag[i];
        }
        
        string mn = hashtag[n-1];
        for (int i = n-2; i >= 0; --i) {
            if (hashtag[i] <= mn) {
                mn = hashtag[i];
            } else {
                for (int j = 0; j < (int)min(mn.size(), hashtag[i].size()); ++j) {
                    if (hashtag[i][j] > mn[j]) {
                        hashtag[i].erase(j);
                        break;
                    }
                }
                if (hashtag[i].size() > mn.size()) {
                    hashtag[i].erase(mn.size());
                }
                mn = hashtag[i];
            }
        }
        for (int i = 0; i < n; ++i) {
            out << hashtag[i] << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
