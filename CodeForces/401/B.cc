/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> sher(n), mori(n);
        for (int i = 0; i < n; ++i) {
            char c;
            in >> c;
            sher[i] = c - '0';
        }
        for (int i = 0; i < n; ++i) {
            char c;
            in >> c;
            mori[i] = c - '0';
        }
    
        vector<int> taken(n, 0), taken2(n, 0);
        int numflicks = 0, numhits = 0;
        for (int i = 0; i < n; ++i) {
            int cur = 1000, ind = -1;
            //take smallest that prevents flick
            for (int j = 0; j < n; ++j) {
                if (!taken[j] && mori[j] >= sher[i] && mori[j] < cur) {
                    cur = mori[j];
                    ind = j;
                }
            }
            if (ind == -1) {
                ++numflicks;
            } else {
                taken[ind] = 1;
            }
            
            cur = 1000, ind = -1;
            for (int j = 0; j < n; ++j) {
                if (!taken2[j] && mori[j] > sher[i] && mori[j] < cur) {
                    cur = mori[j];
                    ind = j;
                }
            }
            if (ind == -1) {
                
            } else {
                ++numhits;
                taken2[ind] = 1;
            }
        }
        
        out << numflicks << endl << numhits << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
