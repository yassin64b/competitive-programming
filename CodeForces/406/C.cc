/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskC {
private:
    vector<int> s[2], m[2], num[2];
    int n, k[2];
    void update(int i, int j, int w) {
        if (m[i][j]) {
            return;
        }
        //cout << "update " << i+1 << " " << j+1 << " to " << (w == 1 ? "Lose" : "Win") << endl;
        m[i][j] = w;
        if (w == 1) {
            int ii = 1-i;
            for (int jj = 0; jj < k[ii]; ++jj) {
                update(ii, (j - s[ii][jj] + n) % n, 2);
            }
        } else {
            int ii = 1-i;
            for (int jj = 0; jj < k[ii]; ++jj) {
                if (--num[ii][(j - s[ii][jj] + n) % n] == 0) {
                    update(ii, (j - s[ii][jj] + n) % n, 1);
                }
            }
        }
    }
public:
    void solve(istream& in, ostream& out) {
        in >> n;
        for (int j = 0; j < 2; ++j) {
            m[j].assign(n, 0);
            in >> k[j];
            s[j].resize(k[j]);
            num[j].assign(n, k[j]);
            for (int i = 0; i < k[j]; ++i) {
                in >> s[j][i];
            }
        }
        m[1][0] = 1;
        update(0, 0, 1);
        m[1][0] = 0;
        update(1, 0, 1);
        for (int i = 0; i < 2; ++i) {
            for (int j = 1; j < n; ++j) {
                if (m[i][j] == 0) {
                    out << "Loop" << (j == n-1 ? "\n" : " ");
                } else if (m[i][j] == 1) {
                    out << "Lose" << (j == n-1 ? "\n" : " ");
                } else {
                    out << "Win" << (j == n-1 ? "\n" : " ");
                }
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
