/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskC {
private:
    int mx, ind, n;
    int dfs(int u, int add, const vector<vector<int>>& g, vector<int>& vis, const vector<int>& a) {
        vis[u] = 1;
        int res = a[u] + add;
        
        vector<int> vec;
        if (u == ind) {
            vec.resize(n);
        }
        
        for (int i = 0; i < (int)g[u].size(); ++i) {
            int v = g[u][i];
            if (!vis[v]) {
                int tmp = dfs(v, min(add+1, 2), g, vis, a);
                res = max(res, tmp);
                if (u == ind) {
                    vec[i] = max(tmp, a[v]+2);
                }
            }
        }
        
        if (u == ind && g[u].size() > 0) {
            vector<int> pre_vec(g[u].size()), suf_vec(g[u].size());
            pre_vec[0] = vec[0];
            suf_vec[g[u].size()-1] = vec[g[u].size()-1];
            for (int i = 1; i < (int)g[u].size(); ++i) {
                pre_vec[i] = max(vec[i], pre_vec[i-1]);
            }
            for (int i = (int)g[u].size()-2; i >= 0; --i) {
                suf_vec[i] = max(vec[i], suf_vec[i+1]);
            }
            
            vector<int> vis2(n, 0);
            vis2[u] = 1;
            for (int i = 0; i < (int)g[u].size(); ++i) {
                int v = g[u][i];
                if (!vis2[v]) {
                    int tmp = dfs(v, 0, g, vis2, a);
                    res = min(res, max(a[u]+1, max(tmp, max((i-1 >= 0 ? pre_vec[i-1] : tmp), (i+1 < (int)suf_vec.size() ? suf_vec[i+1] : tmp)))));
                }
            }
        }
        
        return res;
    }
public:
    void solve(istream& in, ostream& out) {
        in >> n;
        vector<int> a(n);
        mx = -1000*1000*1000-1, ind = -1;
        for (int i = 0; i < n; ++i) {
            in >> a[i];
            if (a[i] > mx) {
                ind = i;
                mx = a[i];
            }
        }
        vector<vector<int>> g(n);
        for (int i = 0; i < n-1; ++i) {
            int u, v;
            in >> u >> v;
            g[u-1].emplace_back(v-1);
            g[v-1].emplace_back(u-1);
        }
    
        vector<int> vis(n, 0);
        out << dfs(ind, 0, g, vis, a) << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
