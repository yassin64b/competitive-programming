/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n, k, d;
        in >> n >> k >> d;
        vector<int> p(k);
        for (int i = 0; i < k; ++i) {
            in >> p[i];
            --p[i];
        }
        vector<vector<pair<int, int>>> g(n);
        for (int i = 0; i < n-1; ++i) {
            int u, v;
            in >> u >> v;
            g[u-1].emplace_back(v-1, i);
            g[v-1].emplace_back(u-1, i);
        }
    
        vector<int> vis(n, 0), res(n-1, 0);
        queue<pair<int ,int>> q;
        for (int i = 0; i < k; ++i) {
            q.emplace(p[i], i+1);
            vis[p[i]] = i+1;
        }
        while (!q.empty()) {
            int u = q.front().first, comp = q.front().second;
            q.pop();
            if (vis[u] != comp) {
                continue;
            }
            for (const pair<int, int>& pp : g[u]) {
                int v = pp.first;
                if (!vis[v]) {
                    q.emplace(v, comp);
                    vis[v] = comp;
                } else {
                    if (vis[v] != comp) {
                        res[pp.second] = 1;
                    }
                }
            }
        }
        out << accumulate(res.begin(), res.end(), 0) << "\n";
        for (int i = 0; i < n-1; ++i) {
            if (res[i]) {
                out << i+1 << " ";
            }
        }
        out << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
