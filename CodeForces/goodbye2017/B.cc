/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

pair<int, int> dc[4] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<string> maze(n);
        int x = -1, y = -1;
        for (int i = 0; i < n; ++i) {
            in >> maze[i];
            for (int j = 0; j < m; ++j)
                if (maze[i][j] == 'S')
                    x = i, y = j;
        }
        assert(x != -1 && y != -1);
        string s;
        in >> s;
        int res = 0;
        sort(dc, dc + 4);
        const int xx = x, yy = y;
        do {
            x = xx; y = yy;
            bool ok = false;
            for (int k = 0; k < (int)s.size(); ++k) {
                int d = s[k] - '0';
                x += dc[d].first; y += dc[d].second;
                if (x >= 0 && x < n && y >= 0 && y < m) {
                    if (maze[x][y] == 'E') {
                        ok = true;
                        break;
                    } else if (maze[x][y] == '#') {
                        ok = false;
                        break;
                    }
                } else {
                    ok = false;
                    break;
                }
            }
            res += ok;
        } while (next_permutation(dc, dc + 4));
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
