/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> y(n);
        for (int i = 0; i < n; ++i) {
            in >> y[i];
        }
        if (n == 1) {
            out << "No\n";
            return;
        } else if (n == 2) {
            out << "Yes\n";
            return;
        }
        int cand_i[] = {0, 0, 1};
        int cand_j[] = {1, 2, 2};
        for (int a = 0; a < 3; ++a) {
            int i = cand_i[a], j = cand_j[a];
            // line of form m * x + b
            // make line1 passing thru y[i] and y[j]
            double m1 = (y[j] - y[i]) / (double)(j - i);
            double b1 = y[i] - m1 * i;
    
            // search for point that is not on this line
            // make line2 parallel to line1, passing thru poin
            bool ok = false;
            double m2 = m1, b2 = b1;
            for (int k = 0; !ok && k < n; ++k) {
                double sy = m1 * k + b1;
                if (abs(sy - y[k]) > 1e-6) {
                    b2 = y[k] - m2 * k;
                    ok = true;
                }
            }
            if (!ok) {
                continue;
            }
            // check if all points passed
            ok = true;
            for (int k = 0; ok && k < n; ++k) {
                double sy = m1 * k + b1;
                if (abs(sy - y[k]) > 1e-6) {
                    sy = m2 * k + b2;
                    if (abs(sy - y[k]) > 1e-6) {
                        ok = false;
                    }
                }
            }
            if (ok) {
                out << "Yes\n";
                return;
            }
        }
        out << "No\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
