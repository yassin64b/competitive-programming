/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <iterator>

using namespace std;

constexpr int MX = 1000 * 1000;

class FenwickTree {
private:
    vector<int> ft;
public:
    FenwickTree(int n) {
        ft.assign(n + 1, 0);
    }
    int rsq(int b) {
        int sum = 0;
        for (; b; b -= (b & (-b))) {
            sum += ft[b];
        }
        return sum;
    }
    int rsq(int a, int b) {
        if (a > b) return 0;
        return rsq(b) - rsq(a - 1);
    }
    void update(int a, int v) {
        for ( ; a < (int)ft.size(); a += (a & (-a))) {
            ft[a] += v;
        }
    }
};

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n, m, k;
        in >> n >> m >> k;
        vector<int> a(n);
        for (int i = 0; i < n; ++i)
            in >> a[i];
        set<int> seta(a.begin(), a.end());
        FenwickTree ft(MX + 1);
        for (int i = 0; i < n; ++i) {
            ft.update(a[i], 1);
        }
        int res = 0;
        for (int j = 1; j + m - 1 <= MX; ++j) {
            int num = ft.rsq(j, j + m - 1) - k + 1;
            if (num > 0) {
                set<int>::iterator itend = seta.upper_bound(j + m - 1);
                set<int>::iterator itbeg = itend;
                advance(itbeg, -num);
                for (auto it = itbeg; it != itend; ++it) {
                    ft.update(*it, -1);
                }
                seta.erase(itbeg, itend);
                res += num;
            }
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
