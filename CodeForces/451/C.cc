/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        map<string, set<string>> m;
        for (int i = 0; i < n; ++i) {
            string name;
            int k;
            in >> name >> k;
            for (int j = 0; j < k; ++j) {
                string tmp;
                in >> tmp;
                m[name].insert(tmp);
            }
            set<string> to_erase;
            for (const string& s : m[name]) {
                for (string suf : m[name]) {
                    if (suf.size() < s.size()) {
                        bool ok = true;
                        for (int j = 0; j < (int)suf.size(); ++j) {
                            if (s[s.size()-j-1] != suf[suf.size()-j-1])
                                ok = false;
                        }
                        if (ok) {
                            to_erase.insert(suf);
                            //cout << suf << " is suffix " << s << endl;
                        }
                    }
                }
            }
            for (string x : to_erase)
                m[name].erase(x);
        }
        out << m.size() << "\n";
        for (const auto& p : m) {
            out << p.first << " ";
            out << p.second.size();
            for (const string& s : p.second)
                out << " " << s;
            out << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
