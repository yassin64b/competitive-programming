/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n, k, q;
        in >> n >> k >> q;
        vector<pair<int, int>> lr(n);
        vector<int> ad(200000 + 2, 0);
        for (int i = 0; i < n; ++i) {
            in >> lr[i].first >> lr[i].second;
            ++ad[lr[i].first];
            --ad[lr[i].second + 1];
        }
        int cnt = 0;
        for (int i = 1; i <= 200000; ++i) {
            cnt += ad[i];
            ad[i] = cnt;
        }
        vector<int> pref(200000 + 2, 0);
        pref[0] = ad[0];
        for (int i = 1; i <= 200000; ++i) {
            pref[i] = pref[i - 1] + (ad[i] >= k);
        }
        for (int i = 0; i < q; ++i) {
            int a, b;
            in >> a >> b;
            out << pref[b] - pref[a - 1] << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
