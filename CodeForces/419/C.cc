/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<vector<int>> g;
        string row = "row ", col = "col ";
        if (n < m) {
            g.assign(n, vector<int>(m));
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < m; ++j) {
                    in >> g[i][j];
                }
            }
        } else {
            swap(row, col);
            swap(n, m);
            g.assign(n, vector<int>(m));
            for (int j = 0; j < m; ++j) {
                for (int i = 0; i < n; ++i) {
                    in >> g[i][j];
                }
            }
        }
        
        vector<string> res;
        bool found = true;
        while (found) {
            found = false;
            for (int i = 0; !found && i < n; ++i) {
                bool is = true;
                for (int j = 0; is && j < m; ++j) {
                    is = g[i][j] > 0;
                }
                if (is) {
                    for (int j = 0; j < m; ++j) {
                        --g[i][j];
                    }
                    res.push_back(row + to_string(i + 1));
                    found = true;
                }
            }
            for (int j = 0; !found && j < m; ++j) {
                bool is = true;
                for (int i = 0; is && i < n; ++i) {
                    is = g[i][j] > 0;
                }
                if (is) {
                    for (int i = 0; i < n; ++i) {
                        --g[i][j];
                    }
                    res.push_back(col + to_string(j + 1));
                    found = true;
                }
            }
            if (!found) {
                int sum = 0;
                for (int i = 0; i < n; ++i) {
                    sum += accumulate(g[i].begin(), g[i].end(), 0);
                }
                if (sum != 0) {
                    out << -1 << "\n";
                    return;
                }
            }
        }
        out << res.size() << "\n";
        for (const auto& s : res) {
            out << s << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
