/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        string s;
        in >> s;
        int n = s.size();
        vector<vector<int>> dp(n + 1, vector<int>(3));
        dp[0][0] = dp[0][1] = dp[0][2] = 0;
        for (int i = 1; i <= n; ++i) {
            dp[i][0] = dp[i - 1][0] + (s[i - 1] == 'b');
            dp[i][1] = min(dp[i - 1][1], dp[i - 1][0]) + (s[i - 1] == 'a');
            dp[i][2] = min(dp[i - 1][2], min(dp[i - 1][1], dp[i - 1][0])) + (s[i - 1] == 'b');
        }
        out << n - min(dp[n][0], min(dp[n][1], dp[n][2])) << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
