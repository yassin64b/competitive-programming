/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr int INF = 1000000000;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n, m, k;
        in >> n >> m >> k;
        vector<vector<bool>> g(n, vector<bool>(m));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                char c;
                in >> c;
                if (c == '#')
                    g[i][j] = false;
                else {
                    g[i][j] = true;
                }
            }
        }
        int x1, y1, x2, y2;
        in >> x1 >> y1 >> x2 >> y2;
        --x1; --y1; --x2; --y2;
        queue<pair<int, int>> q;
        q.emplace(x1, y1);
        vector<vector<int>> vis(n, vector<int>(m, INF));
        vis[x1][y1] = 0;
        while (!q.empty()) {
            int x = q.front().first, y = q.front().second;
            q.pop();
            for (int nx = x + 1; nx <= x + k && nx < n && g[nx][y] && vis[nx][y] >= vis[x][y] + 1; ++nx) {
                if (vis[nx][y] == INF) {
                    q.emplace(nx, y);
                    vis[nx][y] = vis[x][y] + 1;
                }
            }
            for (int nx = x - 1; nx >= x - k && nx >= 0 && g[nx][y] && vis[nx][y] >= vis[x][y] + 1; --nx) {
                if (vis[nx][y] == INF) {
                    q.emplace(nx, y);
                    vis[nx][y] = vis[x][y] + 1;
                }
            }
            for (int ny = y + 1; ny <= y + k && ny < m && g[x][ny] && vis[x][ny] >= vis[x][y] + 1; ++ny) {
                if (vis[x][ny] == INF) {
                    q.emplace(x, ny);
                    vis[x][ny] = vis[x][y] + 1;
                }
            }
            for (int ny = y - 1; ny >= y - k && ny >= 0 && g[x][ny] && vis[x][ny] >= vis[x][y] + 1; --ny) {
                if (vis[x][ny] == INF) {
                    q.emplace(x, ny);
                    vis[x][ny] = vis[x][y] + 1;
                }
            }
        }
        out << (vis[x2][y2] == INF ? -1 : vis[x2][y2]) << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
