/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr double eps = 1e-5;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n, p;
        in >> n >> p;

        vector<int> a(n), b(n);
        long long sum_a = 0;
        for (int i = 0; i < n; ++i) {
            in >> a[i] >> b[i];
            sum_a += a[i];
        }
        if (sum_a <= p) {
            out << -1 << "\n";
            return;
        }
        
        double low = 0, high = 1e15;
        for (int x = 0; x < 200; ++x) {
            double mid = (low + high) / 2.;
            double total = mid * p;
            bool flag = false;
            for (int i = 0; !flag && i < n; ++i) {
                double time = b[i] / double(a[i]);
                total -= max(mid - time, 0.) * a[i];
                if (total < 0) {
                    high = mid;
                    flag = true;
                }
            }
            if (!flag) {
                low = mid;
            }
        }
        out.precision(17);
        out << fixed << (low + high) / 2 << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
