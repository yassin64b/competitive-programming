/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

long long cross(long long A[2], long long B[2], long long C[2]) {
    long long AB[2], AC[2];
    AB[0] = B[0] - A[0];
    AB[1] = B[1] - A[1];
    AC[0] = C[0] - A[0];
    AC[1] = C[1] - A[1];
    return AB[0] * AC[1] - AB[1] * AC[0];
}

double distance(long long A[2], long long B[2]) {
    long long d1 = A[0] - B[0];
    long long d2 = A[1] - B[1];
    return sqrt(d1 * d1 + d2 * d2);
}

double linePointDist(long long A[2], long long B[2], long long C[2]) {
    double dist = cross(A, B, C) / distance(A, B);
    return abs(dist);
}

class TaskD {
public:
    void solve(istream &in, ostream &out) {
        int n;
        in >> n;
        vector<int> x(n), y(n);
        for (int i = 0; i < n; ++i) {
            in >> x[i] >> y[i];
        }
        
        double res = 1e15;
        for (int i = 0; i < n; ++i) {
            long long A[]{x[i], y[i]}, C[]{x[(i+1)%n], y[(i+1)%n]}, B[]{x[(i+2)%n], y[(i+2)%n]};
            double tmp = linePointDist(A, B, C);
            res = min(res, tmp / 2.);
        }
        out.precision(17);
        out << fixed << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
