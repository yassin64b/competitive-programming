/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskD {
public:
    void solve(istream &in, ostream &out) {
        int n;
        in >> n;
        vector<long long> aa(n), bb(n);
        vector<pair<long long, long long>> a(n), b(n);
        long long sum_a = 0, sum_b = 0;
        for (int i = 0; i < n; ++i) {
            in >> aa[i];
            a[i].first = aa[i];
            a[i].second = i;
            sum_a += aa[i];
        }
        for (int i = 0; i < n; ++i) {
            in >> bb[i];
            b[i].first = bb[i];
            b[i].second = i;
            sum_b += bb[i];
        }
    
        sort(a.begin(), a.end());
    
        if (n % 2 == 1) {
            long long cur_sum_b1 = 0;
            for (int i = 0; i < n; i += 2) {
                cur_sum_b1 += bb[a[i].second];
            }
            if (2 * cur_sum_b1 > sum_b) {
                out << n / 2 + 1 << "\n";
                for (int i = 0; i < n; i += 2) {
                    out << a[i].second + 1 << " ";
                }
                out << "\n";
                return;
            }
            out << n / 2 + 1 << "\n";
            for (int i = 1; i < n; i += 2) {
                out << a[i].second + 1 << " ";
            }
            out << a[n-1].second + 1 << "\n";
            return;
        } else {
            long long cur_sum_b1 = 0;
            for (int i = 0; i < n; i += 2) {
                cur_sum_b1 += bb[a[i].second];
            }
            if (2 * cur_sum_b1 > sum_b) {
                out << n / 2 + 1 << "\n";
                for (int i = 0; i < n; i += 2) {
                    out << a[i].second + 1 << " ";
                }
                out << a[n-1].second + 1 << "\n";
                return;
            }
            out << n / 2 + 1 << "\n";
            for (int i = 1; i < n; i += 2) {
                out << a[i].second + 1 << " ";
            }
            out << a[n-2].second + 1 << "\n";
            return;
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
