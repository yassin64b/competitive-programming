/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskB {
private:
    int transform(string s, const string& goal) {
        int i = 0;
        while (s != goal && ++i < 60) {
            s += s[0];
            s.erase(0, 1);
        }
        
        if (s == goal) {
            return i;
        } else {
            return -1;
        }
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<string> v(n);
        for (int i = 0; i < n; ++i) {
            in >> v[i];
        }
        
        int m = v[0].size(), mn = 1000*1000;
        for (int i = 0; i < m; ++i) {
            string goal = v[0].substr(i) + v[0].substr(0, i);
            
            int cur = 0;
            for (int j = 0; j < n; ++j) {
                int tmp = transform(v[j], goal);
                //cout << "transform " << v[j] << " " << goal << " in " << tmp << endl;
                if (tmp == -1) {
                    out << -1 << "\n";
                    return;
                }
                cur += tmp;
            }
            mn = min(mn, cur);
            //cout << cur << " " << goal << endl;
        }
        out << mn << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
