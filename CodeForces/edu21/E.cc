/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskE {

public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<int> w(n), c(n);
        vector<vector<int>> cw(4);
        for (int i = 0; i < n; ++i) {
            in >> w[i] >> c[i];
            cw[w[i]].push_back(c[i]);
        }
        for (int i = 1; i <= 3; ++i) {
            sort(cw[i].begin(), cw[i].end(), greater<int>());
        }
        
        vector<tuple<long long, int, int>> dp(m+1, make_tuple(0, 0, 0));
        for (int i = 0; i <= m; ++i) {
            if (i + 1 <= m && get<1>(dp[i]) < (int)cw[1].size()) {
                if (get<0>(dp[i]) + cw[1][get<1>(dp[i])] > get<0>(dp[i + 1])) {
                    dp[i + 1] = dp[i];
                    get<0>(dp[i + 1]) += cw[1][get<1>(dp[i])];
                    ++get<1>(dp[i + 1]);
                }
            }
            if (i + 2 <= m && get<2>(dp[i]) < (int)cw[2].size()) {
                if (get<0>(dp[i]) + cw[2][get<2>(dp[i])] > get<0>(dp[i + 2])) {
                    dp[i + 2] = dp[i];
                    get<0>(dp[i + 2]) += cw[2][get<2>(dp[i])];
                    ++get<2>(dp[i + 2]);
                }
            }
            
        }
        for (int i = 1; i <= m; ++i) {
            dp[i] = max(dp[i], dp[i - 1]);
        }
        
        long long val = get<0>(dp[m]), cur = 0;
        for (int i = 0; i < (int)cw[3].size(); ++i) {
            cur += cw[3][i];
            if (m - 3 * (i + 1) >= 0) {
                val = max(val, cur + get<0>(dp[m - 3 * (i + 1)]));
            }
        }
        out << val << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskE solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
