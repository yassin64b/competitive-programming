/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        
        int m = 0;
        vector<int> f(n+1), g(n+1, -1), h(1), invh(n+1, -1);
        for (int i = 1; i <= n; ++i) {
            in >> f[i];
            if (i == f[i]) {
                h.push_back(f[i]);
                invh[f[i]] = h.size()-1;
            }
        }
        
        for (int i = 1; i <= n; ++i) {
            if (invh[f[i]] != -1) {
                g[i] = invh[f[i]];
            } else {
                out << -1 << "\n";
                return;
            }
        }
        
        m = h.size()-1;
        out << m << "\n";
        for (int i = 1; i <= n; ++i) {
            out << g[i] << " ";
        }
        out << "\n";
        for (int i = 1; i <= m; ++i) {
            out << h[i] << " ";
        }
        out << "\n";
        
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
