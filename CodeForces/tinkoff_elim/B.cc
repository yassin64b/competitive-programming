/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;


class TaskB {
private:
    int dirx[4]{1, -1, 0, 0};
    int diry[4]{0, 0, 1, -1};
    
    int n, m;
    bool valid(int x, int y, const vector<string>& grid) {
        return (x >= 0 && x < n && y >= 0 && y < m && grid[x][y] != '*');
    }
    bool dfs(int x, int y, int turn, int dir, const vector<string>& grid, vector<vector<vector<int>>>& vis) {
        if (dir != -1) {
            vis[x][y][dir] = turn;
        }
        //cout << x << " " << y << " " << turn << endl;
        if (turn > 2) {
            return false;
        }
        if (grid[x][y] == 'T') {
            return true;
        }
        for (int i = 0; i < 4; ++i) {
            if (valid(x + dirx[i], y + diry[i], grid)) {
                int add = 0;
                if (i != dir) {
                    add = 1;
                }
                if (vis[x + dirx[i]][y + diry[i]][i] > turn + add) {
                    if (dfs(x + dirx[i], y + diry[i], turn + add, i, grid, vis)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
public:
    void solve(istream& in, ostream& out) {
        in >> n >> m;
        vector<string> grid(n);
        for (int i = 0; i < n; ++i) {
            in >> grid[i];
        }
        
        int sx = -1, sy = -1;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (grid[i][j] == 'S') {
                    sx = i;
                    sy = j;
                }
            }
        }
        assert(sx != -1);
        assert(sy != -1);
        
        vector<vector<vector<int>>> vis(n, vector<vector<int>>(m, vector<int>(4, 10)));
        if (dfs(sx, sy, -1, -1, grid, vis)) {
            out << "YES\n";
        } else {
            out << "NO\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
