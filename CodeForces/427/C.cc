/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n, q, c;
        in >> n >> q >> c;
        vector<vector<vector<int>>> grid(101, vector<vector<int>>(101, vector<int>(c + 1, 0)));
        for (int i = 0; i < n; ++i) {
            int x, y, s;
            in >> x >> y >> s;
            grid[x][y][s] += 1;
        }
        int s[101][101][11]{};
        for (int i = 1; i <= 100; ++i) {
            for (int j = 1; j <= 100; ++j) {
                for (int a = 1; a <= i; ++a) {
                    for (int b = 1; b <= j; ++b) {
                        for (int x = 0; x <= c; ++x) {
                            s[i][j][x] = s[i][j][x] + grid[a][b][x];
                        }
                    }
                }
            }
        }
        for (int i = 0; i < q; ++i) {
            long long t;
            int x1, y1, x2, y2;
            in >> t >> x1 >> y1 >> x2 >> y2;
            int res = 0;
            for (int x = 0; x <= c; ++x) {
                int sum = s[x2][y2][x] - s[x1-1][y2][x] - s[x2][y1-1][x] + s[x1-1][y1-1][x];
                if (sum)
                    res += ((x + t) % (c + 1)) * sum;
            }
            out << res << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
