/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        string s;
        in >> s;
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n));
        for (int l = 0; l < n; ++l)
            dp[l][l] = 1;
        for (int l = 0; l + 1 < n; ++l)
            if (s[l] == s[l + 1])
                dp[l][l + 1] = 2;
        for (int len = 3; len <= n; ++len) {
            for (int l = 0; l + len <= n; ++l) {
                int r = l + len - 1;
                if (s[l] != s[r] || dp[l + 1][r - 1] == 0)
                    dp[l][r] = dp[l][r];
                else
                    dp[l][r] = dp[l][(l + r) / 2 + (l + r) % 2 - 1] + 1;
            }
        }
        vector<int> cnt(n + 1, 0);
        for (int l = 0; l < n; ++l)
            for (int r = l; r < n; ++r)
                cnt[dp[l][r]] += 1;
        vector<int> ans(n + 1, 0);
        for (int i = 0; i <= n; ++i)
            for (int j = i; j <= n; ++j)
                ans[i] += cnt[j];
        for (int i = 1; i <= n; ++i)
            out << ans[i] << " ";
        out << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
