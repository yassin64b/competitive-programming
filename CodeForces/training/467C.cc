/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr long long INF{1000LL * 1000 * 1000 * 1000 * 1000 * 100};

class C467 {
public:
    void solve(istream& in, ostream& out) {
        int n, m, k;
        in >> n >> m >> k;
        vector<int> p(n);
        for (int i = 0; i < n; ++i) {
            in >> p[i];
        }
        vector<long long> p_sum(n+1);
        p_sum[0] = 0;
        for (int i = 1; i <= n; ++i) {
            p_sum[i] = p_sum[i-1] + p[i-1];
        }
        
        vector<vector<long long>> dp(n+1, vector<long long>(k+1, -1)); //dp[i][j] = max sum with j intervals with last element <= i
        for (int i = 0; i <= n; ++i) {
            dp[i][0] = 0;
        }
        
        for (int i = 0; i <= n; ++i) {
            for (int j = 0; j <= k; ++j) {
                if (i > 0 && dp[i-1][j] != -1) {
                    dp[i][j] = max(dp[i][j], dp[i-1][j]);
                }
                if (j > 0 && i-m >= 0 && dp[i-m][j-1] != -1) {
                    dp[i][j] = max(dp[i][j], dp[i-m][j-1] + p_sum[i] - p_sum[i-m]);
                }
            }
        }
        
        out << dp[n][k] << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    C467 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
