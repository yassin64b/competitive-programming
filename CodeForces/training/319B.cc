/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>
#include <list>

using namespace std;

class B319 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        
        vector<int> v(n);
        for (int i = 0; i < n; ++i) {
            in >> v[i];
        }
        stack<int> S;
        S.push(0);
        vector<int> tdeath(n, 0);
        tdeath[0] = -1;
        for (int i = 1; i < n; ++i) {
            while (!S.empty() && v[S.top()] < v[i]) {
                tdeath[i] = max(tdeath[i], tdeath[S.top()]+1);
                S.pop();
            }
            if (S.empty()) {
                tdeath[i] = -1;
            }
            S.push(i);
        }
        out << *max_element(tdeath.begin(), tdeath.end())+1 << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    B319 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
