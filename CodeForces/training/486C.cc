/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class C486 {
private:
    int fix(char c, char d) {
        if (c == d) return 0;
        if (c < d) {
            return min(d - c, c - 'a' + 'z' - d + 1);
        }
        return min('z' - c + d - 'a' + 1, c - d);
        
    }
public:
    void solve(istream& in, ostream& out) {
        int n, p;
        string s;
        in >> n >> p >> s;
        --p;
        
        vector<int> left, right;
        for (int i = 0; i < n/2; ++i) {
            if (s[i] != s[n-1-i]) {
                if (p < n/2) {
                    if (i < p) {
                        left.push_back(i);
                    } else if (i > p) {
                        right.push_back(i);
                    }
                } else {
                    if (n-1-i < p) {
                        left.push_back(n-1-i);
                    } else if (n-1-i > p) {
                        right.push_back(n-1-i);
                    }
                }
            }
        }
        sort(left.begin(), left.end(), greater<int>());
        sort(right.begin(), right.end());
        
        int res = fix(s[p], s[n-1-p]);
        int ldist = 1000*1000*1000, rdist = 1000*1000*1000;
        if (!left.empty()) {
            ldist = p - left.back();
        }
        if (!right.empty()) {
            rdist = right.back() - p;
        }
        
        int cur = p;
        if (rdist < ldist) {
            for (int x : right) {
                res += x - cur;
                res += fix(s[x], s[n-1-x]);
                cur = x;
            }
            for (int x : left) {
                res += cur - x;
                res += fix(s[x], s[n-1-x]);
                cur = x;
            }
        } else {
            for (int x : left) {
                res += cur - x;
                res += fix(s[x], s[n-1-x]);
                cur = x;
            }
            for (int x : right) {
                res += x - cur;
                res += fix(s[x], s[n-1-x]);
                cur = x;
            }
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    C486 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
