/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr int MAXV = 100 * 100;

class B294 {
public:
    void solve(istream &in, ostream &out) {
        int n;
        in >> n;
        vector<int> t(n), w(n);
        for (int i = 0; i < n; ++i) {
            in >> t[i] >> w[i];
        }
        
        //dp[index][balance (bot - top + MAXV)] = minimal thickness
        vector<vector<int>> dp(n, vector<int>(MAXV * 2 + 1, 1000 * 1000 * 1000)); //dp[...][MAXV] is zero state
        dp[0][t[0] + MAXV] = t[0]; //put on bottom
        dp[0][-w[0] + MAXV] = 0; //put on top
        for (int i = 1; i < n; ++i) {
            for (int j = -MAXV; j <= MAXV; ++j) {
                int jj = j + MAXV;
                if (jj + t[i] <= MAXV * 2) {
                    dp[i][jj + t[i]] = min(dp[i][jj + t[i]], dp[i - 1][jj] + t[i]);
                }
                if (jj - w[i] >= 0) {
                    dp[i][jj - w[i]] = min(dp[i][jj - w[i]], dp[i - 1][jj]);
                }
            }
        }
        int mn = 1000 * 1000 * 1000;
        for (int j = 0; j <= MAXV; ++j) {
            int jj = j + MAXV;
            mn = min(mn, dp[n - 1][jj]);
        }
        out << mn << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    B294 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
