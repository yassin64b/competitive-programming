/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class C225 {
public:
    void solve(istream& in, ostream& out) {
        int n, m, x, y;
        in >> n >> m >> x >> y;
        vector<vector<char>> grid(n, vector<char>(m));
        vector<pair<int, int>> cost(m+1, {0, 0});
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                in >> grid[i][j];
                cost[j+1].first += (grid[i][j] == '.');
                cost[j+1].second += (grid[i][j] == '#');
            }
        }
        for (int j = 1; j <= m; ++j) {
            cost[j].first += cost[j-1].first;
            cost[j].second += cost[j-1].second;
        }
        
        vector<pair<int, int>> dp(m+1, {1000*1000*1000, 1000*1000*1000});
        dp[0] = {0, 0};
        for (int i = 0; i <= m; ++i) {
            for (int j = i+x; j <= i+y && j <= m; ++j) {
                dp[j].first = min(dp[j].first, dp[i].second + cost[j].first - cost[i].first);
                dp[j].second = min(dp[j].second, dp[i].first + cost[j].second - cost[i].second);
            }
        }
        out << min(dp[m].first, dp[m].second) << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    C225 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
