/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class A429 {
private:
    void dfs(int u, const vector<vector<int>> &g, vector<int> &vis,
                vector<int> &flip, vector<int> &res,
                vector<int> toggle, int turn) {
        vis[u] = 1;
        if (toggle[turn]) {
            flip[u] = 1 - flip[u];
        }
        if (flip[u]) {
            res.push_back(u);
            toggle[turn] = 1 - toggle[turn];
        }
        for (int v : g[u]) {
            if (!vis[v]) {
                dfs(v, g, vis, flip, res, toggle, 1 - turn);
            }
        }
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<vector<int>> g(n);
        for (int i = 0; i < n - 1; ++i) {
            int u, v;
            in >> u >> v;
            g[u - 1].push_back(v - 1);
            g[v - 1].push_back(u - 1);
        }
        vector<int> init(n), goal(n), flip(n, 0);
        for (int i = 0; i < n; ++i) {
            in >> init[i];
        }
        for (int i = 0; i < n; ++i) {
            in >> goal[i];
            flip[i] = (init[i] != goal[i]);
        }
        vector<int> res, vis(n, 0);
        vector<int> toggle(2, 0);
        dfs(0, g, vis, flip, res, toggle, 0);
        out << res.size() << "\n";
        for (int x : res) {
            out << x + 1 << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    A429 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
