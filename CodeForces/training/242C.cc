/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class C242 {
public:
    void solve(istream &in, ostream &out) {
        int x0, y0, x1, y1, n;
        in >> x0 >> y0 >> x1 >> y1 >> n;
        
        map<int, set<int>> cells;
        for (int i = 0; i < n; ++i) {
            int r, a, b;
            in >> r >> a >> b;
            for (int i = a-1; i < b; ++i) {
                cells[r-1].insert(i);
            }
        }
        
        queue<pair<pair<int,int>,int>> q;
        q.push({{x0-1, y0-1}, 0});
        cells[x0-1].erase(y0-1);
        
        while (!q.empty()) {
            pair<int,int> cur = q.front().first;
            int dist = q.front().second;
            q.pop();
            
            if (cur.first == x1-1 && cur.second == y1-1) {
                out << dist << "\n";
                return;
            }
            
            for (int i = -1; i <= 1; ++i) {
                for (int j = -1; j <= 1; ++j) {
                    if (cells[cur.first+i].find(cur.second+j) != cells[cur.first+i].end()) {
                        q.push({{cur.first+i, cur.second+j}, dist+1});
                        cells[cur.first+i].erase(cur.second+j);
                    }
                }
            }
        }
        
        out << "-1\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    C242 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
