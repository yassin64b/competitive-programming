/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

struct Query {
    int L, R, i;
};

constexpr int MAX = 1000 * 1000;

class D86 {
private:
    vector<int> a;
    long long ans = 0;
    vector<int> cnt;
    
    void add(int i) {
        ans += a[i] * (long long)(2 * cnt[a[i]] + 1); //faster
        //ans -= cnt[a[i]] * (long long)cnt[a[i]] * a[i];
        ++cnt[a[i]];
        //ans += cnt[a[i]] * (long long)cnt[a[i]] * a[i];
    }
    
    void remove(int i) {
        ans -= a[i] * (long long)(2 * cnt[a[i]] - 1); //faster
        //ans -= cnt[a[i]] * (long long)cnt[a[i]] * a[i];
        --cnt[a[i]];
        //ans += cnt[a[i]] * (long long)cnt[a[i]] * a[i];
    }

public:
    void solve(istream &in, ostream &out) {
        cnt.assign(MAX+1, 0);
        
        int n, t;
        in >> n >> t;
        a.resize(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        
        int sqrt_n = sqrt(n);
        vector<Query> q(t);
        for (int i = 0; i < t; ++i) {
            in >> q[i].L >> q[i].R;
            --q[i].L;
            --q[i].R;
            q[i].i = i;
        }
        
        sort(q.begin(), q.end(), [&sqrt_n](const Query &lhs, const Query &rhs) {
            if (lhs.L / sqrt_n == rhs.L / sqrt_n) { //same block
                return lhs.R < rhs.R;
            }
            return lhs.L / sqrt_n < rhs.L / sqrt_n; //sort by block
        });
        
        
        vector<long long> res(t);
        int curL = 0, curR = 0;
        for (int i = 0; i < t; ++i) {
            int L = q[i].L, R = q[i].R;
            while (curL < L) {
                remove(curL);
                ++curL;
            }
            while (curL > L) {
                add(curL - 1);
                --curL;
            }
            while (curR <= R) {
                add(curR);
                ++curR;
            }
            while (curR > R + 1) {
                remove(curR - 1);
                --curR;
            }
            res[q[i].i] = ans;
        }
        
        for (int i = 0; i < t; ++i) {
            out << res[i] << "\n";
        }
    }
};
    


int main() {
    std::ios::sync_with_stdio(false);

    D86 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
