/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class B476 {
private:
    int goal, n;
    string s1, s2;
    
    void backtrack(int i, int pos, pair<int,int> &res) {
        if (i == n) {
            if (pos == goal) {
                ++res.first;
            } else {
                ++res.second;
            }
            return;
        }
        
        if (s2[i] == '+' || s2[i] == '?') {
            backtrack(i+1, pos+1, res);
        }
        if (s2[i] == '-' || s2[i] == '?') {
            backtrack(i+1, pos-1, res);
        }
    }
public:
    void solve(istream& in, ostream& out) {
        in >> s1 >> s2;
        n = s1.size();
        
        goal = 0;
        for (int i = 0; i < n; ++i) {
            if (s1[i] == '+') {
                ++goal;
            } else {
                --goal;
            }
        }
        
        pair<int,int> res{0, 0};
        backtrack(0, 0, res);
        
        out.precision(12);
        out << fixed << res.first / (double)(res.first + res.second) << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    B476 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
