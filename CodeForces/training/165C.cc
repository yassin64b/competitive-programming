/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class C165 {
public:
    void solve(istream& in, ostream& out) {
        int k;
        string s;
        in >> k >> s;
        int n = s.size();
        
        vector<int> pre_sum(n);
        pre_sum[0] = s[0] - '0';
        for (int i = 1; i < n; ++i) {
            pre_sum[i] = pre_sum[i-1] + s[i] - '0';
        }
        
        long long res = 0;
        for (int i = 0; i < n; ++i) { //i is starting point
            int subtract = (i-1 >= 0 ? pre_sum[i-1] : 0);
            auto it = lower_bound(pre_sum.begin()+i, pre_sum.end(), k + subtract);
            if (it != pre_sum.end() && *it == k + subtract) {
                auto it2 = upper_bound(pre_sum.begin()+i, pre_sum.end(), k + subtract);
                res += it2 - it;
            }
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    C165 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
