/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;


constexpr int MOD = 1000 * 1000 * 1000 + 7;

int dp[1000 * 1000 * 10 + 1][4];

class E166 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        dp[0][3] = 1;
        
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < 4; ++j) {
                for (int k = 0; k < 4; ++k) {
                    if (k != j) {
                        dp[i + 1][j] += dp[i][k];
                        dp[i + 1][j] %= MOD;
                    }
                }
            }
        }
        out << dp[n][3] << "\n";
    }
};



int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    E166 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
