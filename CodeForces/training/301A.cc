/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class A301 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> v(2 * n - 1);
        for (int i = 0; i < 2 * n - 1; ++i) {
            in >> v[i];
        }
        if (n % 2 == 0) {
            sort(v.begin(), v.end());
            vector<int> v2 = v;
            for (int i = 0; i + 1 < 2 * n - 1; i += 2) { //take any even number
                if (v[i] + v[i + 1] < 0) {
                    v[i] = -v[i];
                    v[i + 1] = -v[i + 1];
                }
            }
            out << accumulate(v.begin(), v.end(), 0) << "\n";
        } else {
            for (int i = 0; i < 2 * n - 1; ++i) {
                v[i] = max(v[i], -v[i]);
            }
            out << accumulate(v.begin(), v.end(), 0) << "\n";
        }
        
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    A301 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
