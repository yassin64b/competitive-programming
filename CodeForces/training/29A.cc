/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class A29 {
private:
    static constexpr int MXV = 1000;
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<pair<int, int>> xd(n);
        for (int i = 0; i < n; ++i)
            in >> xd[i].first >> xd[i].second;
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < n; ++j)
                if (i != j) {
                    if (xd[i].first + xd[i].second == xd[j].first
                            && xd[j].first + xd[j].second == xd[i].first) {
                        out << "YES\n";
                        return;
                    }
                }
        out << "NO\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    A29 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
