/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class C279 {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        
        vector<int> len_end(n, 1000*1000); //len_end[i] = where longest ladder ending at i begins
        for (int i = 0; i < n-1; ) {
            int j = i;
            while (j < n-1 && a[j] <= a[j+1]) {
                len_end[j] = min(len_end[j], i);
                ++j;
            }
            while (j < n-1 && a[j] >= a[j+1]) {
                len_end[j] = min(len_end[j], i);
                ++j;
            }
            len_end[j] = min(len_end[j], i);
            if (j == n-1) {
                break;
            }
            while (j > i && a[j-1] <= a[j]) {
                --j;
            }
            i = j;
        }
        
        for (int i = 0; i < m; ++i) {
            int l, r;
            in >> l >> r;
            --l; --r;
            if (r-l <= 1 || len_end[r] <= l) {
                out << "Yes\n";
            } else {
                out << "No\n";
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    C279 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
