/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class C416 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> c(n), p(n);
        vector<tuple<int, int, int>> pc(n);
        for (int i = 0; i < n; ++i) {
            in >> c[i] >> p[i];
            pc[i] = make_tuple(p[i], c[i], i);
        }
        int k;
        in >> k;
        vector<int> r(k);
        for (int i = 0; i < k; ++i) {
            in >> r[i];
        }
        
        sort(pc.begin(), pc.end(), greater<tuple<int, int, int>>());
        
        int num = 0, sum = 0;
        vector<int> res(k, -1);
        for (int i = 0; i < n; ++i) {
            int mn = -1, ind = -1;
            for (int j = 0; j < k; ++j) {
                if (res[j] == -1 && r[j] >= get<1>(pc[i])) {
                    if (r[j] < mn || mn == -1) {
                        mn = r[j];
                        ind = j;
                    }
                }
            }
            if (mn != -1) {
                res[ind] = get<2>(pc[i]);
                ++num;
                sum += get<0>(pc[i]);
            }
        }
        
        out << num << " " << sum << "\n";
        for (int i = 0; i < k; ++i) {
            if (res[i] != -1) {
                out << res[i]+1 << " " << i+1 << "\n";
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    C416 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
