/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class D439 {
private:
    long long cost(int val, const vector<int>& a, const vector<int>& b) {
        long long res = 0;
        for (int i = 0; i < (int)a.size(); ++i) {
            res += max(0, val - a[i]);
        }
        for (int i = 0; i < (int)b.size(); ++i) {
            res += max(0, b[i] - val);
        }
        return res;
    }
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<int> a(n), b(m);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        for (int i = 0; i < m; ++i) {
            in >> b[i];
        }
        
        int low = 0, high = 1000 * 1000 * 1000, ans = high;
        long long best = 1LL * ans * ans;
        while (low <= high) {
            //cout << low << " " << high << endl;
            int mid1 = low + (high - low) / 3;
            int mid2 = high + (low - high) / 3;
            long long c1 = cost(mid1, a, b), c2 = cost(mid2, a, b);
            if (c1 < best) {
                best = c1;
                ans = mid1;
            }
            if (c2 < best) {
                best = c2;
                ans = mid2;
            }
            if (c1 < c2) {
                high = mid2 - 1;
            } else {
                low = mid1 + 1;
            }
        }
        out << best << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    D439 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
