/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class A189 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        int a[3];
        in >> n >> a[0] >> a[1] >> a[2];
        
        vector<int> dp(n+1, 0);
        dp[0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (i - a[j] >= 0 && dp[i - a[j]] > 0) {
                    dp[i] = max(dp[i], dp[i - a[j]] + 1);
                }
            }
        }
        /*for (int i = 0; i <= n; ++i) {
            cout << dp[i] << " ";
        }
        cout << endl;*/
        out << dp[n]-1 << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    A189 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
