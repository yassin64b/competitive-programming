/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

bool cmp(int n, const pair<int, int> &p) {
    return n < p.first;
}
bool cmp2(const pair<int, int> &p, int n) {
    return p.first < n;
}

class C622 {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
    
        int sqrtn = (int)sqrt(n);
        int len = n / sqrtn + 1;
        
        vector<int> a(n);
        vector<vector<pair<int,int>>> b(len);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
            b[i / sqrtn].emplace_back(a[i], i);
        }
        
        for (int i = 0; i < len; ++i) {
            sort(b[i].begin(), b[i].end());
        }
        
        vector<int> res(m);
        for (int j = 0; j < m; ++j) {
            int l, r, x;
            in >> l >> r >> x;
            --l; --r;
    
            bool found = false;
            if (l / sqrtn == r / sqrtn) {
                for (int i = l; !found && i <= r; ++i) {
                    if (a[i] != x) {
                        res[j] = i+1;
                        found = true;
                    }
                }
            } else {
                int tmp = l / sqrtn;
                if (l % sqrtn != 0) {
                    ++tmp;
                }
                int i;
                for (i = l; !found && i < tmp * sqrtn; ++i) {
                    if (a[i] != x) {
                        res[j] = i+1;
                        found = true;
                    }
                }
                for ( ; !found && i + sqrtn - 1 <= r; i += sqrtn) {
                    int ind = i / sqrtn;
                    if (b[ind][0].first != x) {
                        res[j] = b[ind][0].second+1;
                        found = true;
                    } else if (b[ind][b[ind].size()-1].first != x) {
                        res[j] = b[ind][b[ind].size()-1].second+1;
                        found = true;
                    }
                }
                for ( ; !found && i <= r; ++i) {
                    if (a[i] != x) {
                        res[j] = i+1;
                        found = true;
                    }
                }
            }
            if (!found) {
                res[j] = -1;
            }
        }
        
        for (int x : res) {
            out << x << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    C622 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
