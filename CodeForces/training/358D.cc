/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class D358 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> a(n), b(n), c(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        for (int i = 0; i < n; ++i) {
            in >> b[i];
        }
        for (int i = 0; i < n; ++i) {
            in >> c[i];
        }
        
        vector<vector<int>> dp(n, vector<int>(4, 0));
        //dp[i][0] = max joy up to i when i before both, dp[i][1] = i before left,
        //dp[i][2] = i before right, dp[i][3] = i after both
        dp[0][0] = a[0];
        dp[0][1] = b[0];
        dp[0][2] = a[0];
        dp[0][3] = 0;
        for (int i = 1; i < n; ++i) {
            dp[i][0] = max(dp[i-1][1], dp[i-1][3]) + a[i];
            dp[i][1] = max(dp[i-1][1], dp[i-1][3]) + b[i];
            dp[i][2] = max(dp[i-1][0], dp[i-1][2]) + b[i];
            dp[i][3] = max(dp[i-1][0], dp[i-1][2]) + c[i];
        }
        /*for (int i = 0; i < 4; ++i) {
            cout << dp[n-1][i] << " ";
        }
        cout << endl;*/
        out << max(dp[n-1][0], dp[n-1][2]) << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    D358 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
