/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr long long LOOP = -1;

class B283 {
private:
    int n;
    void dfs(int x, const vector<int>& a, vector<pair<long long, long long>>& res, vector<pair<int, int>>& vis) {
        vis[x].first = 1;
    
        int tmp = x + a[x];
        if (tmp <= 0 || tmp > n) { //terminate
            res[x].first = a[x];
            return;
        } else if (tmp == 1 || res[tmp].second == LOOP) {
            res[x].first = LOOP;
            return;
        } else if (res[tmp].second) {
            res[x].first = a[x] + res[tmp].second;
            return;
        } else if (vis[tmp].second) { //visited, but not finished --> loop
            res[x].first = res[tmp].second = LOOP;
            return;
        }
        vis[tmp].second = 1;
    
        int tmp2 = tmp - a[tmp];
        if (tmp2 <= 0 || tmp2 > n) { //terminate
            res[x].first = a[x] + a[tmp];
            res[tmp].second = a[tmp];
        } else if (tmp2 == 1 || res[tmp2].first == LOOP) {
            res[x].first = res[tmp].second = LOOP;
        } else if (res[tmp2].first) {
            res[x].first = a[x] + a[tmp] + res[tmp2].first;
            res[tmp].second = a[tmp] + res[tmp2].first;
        } else if (vis[tmp2].first) { //visited, but not finished --> loop
            res[x].first = res[tmp].second = LOOP;
        } else {
            dfs(tmp2, a, res, vis);
            if (res[tmp2].first == LOOP) {
                res[x].first = res[tmp].second = LOOP;
            } else {
                res[x].first = a[x] + a[tmp] + res[tmp2].first;
                res[tmp].second = a[tmp] + res[tmp2].first;
            }
        }
    }
public:
    void solve(istream& in, ostream& out) {
        in >> n;
        vector<int> a(n+1);
        a[0] = -1000;
        for (int i = 2; i <= n; ++i) {
            in >> a[i];
        }
        
        vector<pair<long long, long long>> res(n+1, {0, 0});
        vector<pair<int, int>> vis(n+1, {0, 0});
        for (int i = 1; i <= n-1; ++i) {
            a[1] = i;
            dfs(1, a, res, vis);
        }
        for (int i = 1; i <= n-1; ++i) {
            out << (res[i+1].second == -1 ? -1 : res[i+1].second + i) << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    B283 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
