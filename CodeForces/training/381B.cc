/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class B381 {
public:
    void solve(istream& in, ostream& out) {
        int m;
        in >> m;
        vector<int> b(m);
        for (int i = 0; i < m; ++i)
            in >> b[i];
        int mx = *max_element(b.begin(), b.end());
        vector<int> cnt(5001, 0);
        for (int x : b)
            if (x != mx)
                ++cnt[x];
        vector<int> res_a, res_b;
        res_a.push_back(mx);
        for (int i = 0; i <= 5000; ++i) {
            if (cnt[i] == 1) {
                res_a.push_back(i);
            } else if (cnt[i] >= 2) {
                res_a.push_back(i);
                res_b.push_back(i);
            }
        }
        sort(res_a.begin(), res_a.end());
        sort(res_b.begin(), res_b.end(), greater<int>());
        res_a.insert(res_a.end(), res_b.begin(), res_b.end());
        out << res_a.size() << "\n";
        for (int x : res_a)
            out << x << " ";
        out << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    B381 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
