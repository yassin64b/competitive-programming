/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class B466 {
public:
    void solve(istream& in, ostream& out) {
        long long n, a, b;
        in >> n >> a >> b;
        
        if (a * b >= 6 * n) {
            out << a * b << "\n" << a << " " << b << "\n";
            return;
        }
        
        long long res = 1000LL * 1000 * 1000 * 1000 * 1000 * 1000;
        long long a2 = -1, b2 = -1;
        if (a <= b) {
            for (long long a1 = a; a1 * a1 <= 6 * n; ++a1) {
                long long b1 = 6 * n / a1 + (6 * n % a1 ? 1 : 0);
                if (b1 >= b && a1 * b1 < res) {
                    res = a1 * b1;
                    a2 = a1;
                    b2 = b1;
                }
            }
        } else {
            for (long long b1 = b; b1 * b1 <= 6 * n; ++b1) {
                long long a1 = 6 * n / b1 + (6 * n % b1 ? 1 : 0);
                if (a1 >= a && a1 * b1 < res) {
                    res = a1 * b1;
                    a2 = a1;
                    b2 = b1;
                }
            }
        }
        out << res << "\n" << a2 << " " << b2 << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    B466 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
