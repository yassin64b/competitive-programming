/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class A446 {
public:
    void solve(istream &in, ostream &out) {
        int n;
        in >> n;
        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        
        vector<int> seglen(n);
        for (int i = 0; i < n; ++i) {
            int j = i + 1;
            while (j < n && a[j] > a[j - 1]) {
                ++j;
            }
            for (int k = i; k < j; ++k) {
                seglen[k] = j - i;
            }
            i = j - 1;
        }
        int mx = 0;
        for (int i = 0; i < n; ++i) {
            mx = max(mx, seglen[i] + 1);
        }
        mx = min(mx, n);
        for (int i = 1; i < n - 1; ++i) {
            if (a[i - 1] < a[i + 1] - 1 && !(a[i] > a[i - 1] && a[i] < a[i + 1])) {
                mx = max(mx, seglen[i - 1] + seglen[i + 1]);
            }
        }
        out << mx << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    A446 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
