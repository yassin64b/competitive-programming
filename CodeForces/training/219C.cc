/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class C219 {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        string s;
        in >> n >> k >> s;
        
        if (k == 2) {
            int cost1 = 0, cost2 = 0;
            for (int i = 0; i < n; ++i) {
                if (i % 2 == 0) {
                    if (s[i] != 'A') {
                        ++cost1;
                    } else {
                        ++cost2;
                    }
                } else {
                    if (s[i] != 'B') {
                        ++cost1;
                    } else {
                        ++cost2;
                    }
                }
            }
            if (cost1 < cost2) {
                out << cost1 << "\n";
                for (int i = 0; i < n; ++i) {
                    out << (i % 2 == 0 ? 'A' : 'B');
                }
                out << "\n";
            } else {
                out << cost2 << "\n";
                for (int i = 0; i < n; ++i) {
                    out << (i % 2 == 1 ? 'A' : 'B');
                }
                out << "\n";
            }
            return;
        }
        
        int cost = 0;
        for (int i = 0; i < n-1; ++i) {
            if (s[i] == s[i+1]) {
                ++cost;
                for (char c = 'A'; c < 'A'+k; ++c) {
                    if (c != s[i] && (i+2 >= n || c != s[i+2])) {
                        s[i+1] = c;
                        break;
                    }
                }
            }
        }
        out << cost << "\n" << s << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    C219 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
