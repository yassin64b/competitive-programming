/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr int INF = 1000 * 1000 * 1000;

class D400 {
private:
    void dfs(int u, const vector<vector<pair<int, int>>>& g, vector<int>& vis) {
        vis[u] = 1;
        for (const auto& p : g[u]) {
            if (!vis[p.first] && p.second == 0) {
                dfs(p.first, g, vis);
            }
        }
    }
public:
    void solve(istream& in, ostream& out) {
        int n, m, k;
        in >> n >> m >> k;
        vector<int> c(k);
        int sum = 0;
        for (int i = 0; i < k; ++i) {
            in >> c[i];
            sum += c[i];
        }
        vector<int> comp(sum);
        int cur_sum = 0;
        for (int i = 0; i < k; ++i) {
            for (int j = cur_sum; j < cur_sum + c[i]; ++j) {
                comp[j] = i;
            }
            cur_sum += c[i];
        }
        
        vector<vector<pair<int, int>>> g(sum);
        for (int i = 0; i < m; ++i) {
            int u, v, x;
            in >> u >> v >> x;
            --u; --v;
            assert(u < sum && v < sum);
            g[u].emplace_back(v, x);
            g[v].emplace_back(u, x);
        }
        
        cur_sum = 0;
        for (int i = 0; i < k; ++i) {
            vector<int> vis(sum, 0);
            dfs(cur_sum, g, vis);
            auto it1 = lower_bound(comp.begin(), comp.end(), i);
            auto it2 = upper_bound(comp.begin(), comp.end(), i);
            for ( ; it1 != it2; ++it1) {
                if (!vis[it1 - comp.begin()]) {
                    out << "No\n";
                    return;
                }
            }
            cur_sum += c[i];
        }
        
        vector<vector<int>> dist(k, vector<int>(k, INF));
        for (int i = 0; i < k; ++i) {
            dist[i][i] = 0;
        }
        for (int i = 0; i < sum; ++i) {
            for (auto& p : g[i]) {
                int u = comp[i], v = comp[p.first], cost = p.second;
                dist[u][v] = min(dist[u][v], cost);
            }
        }
        
        for (int z = 0; z < k; ++z) {
            for (int u = 0; u < k; ++u) {
                for (int v = 0; v < k; ++v) {
                    dist[u][v] = min(dist[u][v], dist[u][z] + dist[z][v]);
                }
            }
        }
        
        out << "Yes\n";
        for (int i = 0; i < k; ++i) {
            for (int j = 0; j < k; ++j) {
                out << (dist[i][j] == INF ? -1 : dist[i][j]) << " ";
            }
            out << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    D400 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
