/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

using vpii = vector<pair<int,int>>;
using vvpii = vector<vpii>;

constexpr int MOD{1000*1000*100};

class D118 {
public:
    void solve(istream& in, ostream& out) {
        int n1, n2, k1, k2;
        in >> n1 >> n2 >> k1 >> k2;
        
        //dp[i][j] = num ways assemble j in i groups of same
        vector<vvpii> dp(n1+n2+1, vvpii(n1+1, vpii(n2+1, make_pair(0, 0))));
        dp[0][0][0] = make_pair(1, 1);
        for (int i = 1; i <= n1+n2; ++i) {
            for (int i1 = 0; i1 <= n1; ++i1) {
                for (int i2 = 0; i2 <= n2; ++i2) {
                    for (int l = 1; i1+l <= n1 && l <= k1; ++l) {
                        if (dp[i-1][i1][i2].second) {
                            dp[i][i1+l][i2].first += dp[i-1][i1][i2].second;
                            dp[i][i1+l][i2].first %= MOD;
                        }
                    }
                    for (int l = 1; i2+l <= n2 && l <= k2; ++l) {
                        if (dp[i-1][i1][i2].first) {
                            dp[i][i1][i2+l].second += dp[i-1][i1][i2].first;
                            dp[i][i1][i2+l].second %= MOD;
                        }
                    }
                }
            }
            
        }
        
        /*for (int i = 0; i <= n1+n2; ++i) {
            for (int i1 = 0; i1 <= n1; ++i1) {
                for (int i2 = 0; i2 <= n2; ++i2) {
                    out << dp[i][i1][i2].first << "," << dp[i][i1][i2].second << " ";
                }
                out << endl;
            }
            out << endl;
        }*/
        
        int res = 0;
        for (int i = 0; i <= n1+n2; ++i) {
            res += dp[i][n1][n2].first;
            res %= MOD;
            res += dp[i][n1][n2].second;
            res %= MOD;
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    D118 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
