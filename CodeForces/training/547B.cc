/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class B547 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> a(n), l(n), r(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        stack<int> S;
        for (int i = 0; i < n; ++i) {
            while (!S.empty() && a[S.top()] >= a[i]) {
                S.pop();
            }
            if (S.empty()) {
                l[i] = -1;
            } else {
                l[i] = S.top();
            }
            S.push(i);
        }
        S = stack<int>();
        for (int i = n-1; i >= 0; --i) {
            while (!S.empty() && a[S.top()] >= a[i]) {
                S.pop();
            }
            if (S.empty()) {
                r[i] = n;
            } else {
                r[i] = S.top();
            }
            S.push(i);
        }
        
        vector<int> res(n+1, 0);
        for (int i = 0; i < n; ++i) {
            res[r[i] - l[i] - 1] = max(res[r[i] - l[i] - 1], a[i]);
        }
        for (int i = n-1; i >= 0; --i) {
            res[i] = max(res[i], res[i+1]);
        }
        for (int i = 1; i <= n; ++i) {
            out << res[i] << " ";
        }
        out << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    B547 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
