/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class B269 {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<pair<int,double>> sx(n);
        for (int i = 0; i < n; ++i) {
            in >> sx[i].first >> sx[i].second;
        }
        
        vector<vector<int>> dp(n+1, vector<int>(n, 0));
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (j == sx[i-1].first-1) {
                    for (int k = 0; k <= j; ++k) {
                        dp[i][j] = max(dp[i][j], 1 + dp[i-1][k]);
                    }
                } else {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        int ans = 0;
        for (int j = 0; j < n; ++j) {
            ans = max(ans, dp[n][j]);
        }
        out << n-ans << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    B269 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
