/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class B429 {
public:
    void solve(istream &in, ostream &out) {
        int n, m;
        in >> n >> m;
        vector<vector<int>> a(n, vector<int>(m));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                in >> a[i][j];
            }
        }
        
        vector<vector<long long>> dp1(n, vector<long long>(m, 0)), dp2(dp1), dp3(dp1), dp4(dp1);
        dp1[0][0] = a[0][0];
        for (int i = 0; i < n; ++i) { //dp1[i][j] = max path from 0,0 to i,j
            for (int j = 0; j < m; ++j) {
                if (j - 1 >= 0) {
                    dp1[i][j] = max(dp1[i][j], dp1[i][j - 1] + a[i][j]);
                }
                if (i - 1 >= 0) {
                    dp1[i][j] = max(dp1[i][j], dp1[i - 1][j] + a[i][j]);
                }
            }
        }
        dp2[0][m-1] = a[0][m-1];
        for (int i = 0; i < n; ++i) { //dp2[i][j] = max path from i,j to 0,m-1
            for (int j = m-1; j >= 0; --j) {
                if (j + 1 < m) {
                    dp2[i][j] = max(dp2[i][j], dp2[i][j + 1] + a[i][j]);
                }
                if (i - 1 >= 0) {
                    dp2[i][j] = max(dp2[i][j], dp2[i - 1][j] + a[i][j]);
                }
            }
        }
        dp3[n-1][0] = a[n-1][0];
        for (int i = n-1; i >= 0; --i) { //dp3[i][j] = max path from n-1,0 to i,j
            for (int j = 0; j < m; ++j) {
                if (j - 1 >= 0) {
                    dp3[i][j] = max(dp3[i][j], dp3[i][j - 1] + a[i][j]);
                }
                if (i + 1 < n) {
                    dp3[i][j] = max(dp3[i][j], dp3[i + 1][j] + a[i][j]);
                }
            }
        }
        dp4[n-1][m-1] = a[n-1][m-1];
        for (int i = n-1; i >= 0; --i) { //dp4[i][j] = max path from i,j to n-1,m-1
            for (int j = m-1; j >= 0; --j) {
                if (j + 1 < m) {
                    dp4[i][j] = max(dp4[i][j], dp4[i][j + 1] + a[i][j]);
                }
                if (i + 1 < n) {
                    dp4[i][j] = max(dp4[i][j], dp4[i + 1][j] + a[i][j]);
                }
            }
        }
        
        long long mx = 0;
        for (int i = 1; i < n-1; ++i) {
            for (int j = 1; j < m-1; ++j) {
                mx = max(mx, dp1[i][j-1] + dp3[i+1][j] + dp4[i][j+1] + dp2[i-1][j]);
                mx = max(mx, dp1[i-1][j] + dp3[i][j-1] + dp4[i+1][j] + dp2[i][j+1]);
            }
        }
        out << mx << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    B429 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
