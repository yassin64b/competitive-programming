/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pair<int,int>> vii;

constexpr int MAXV = 1e5;
constexpr int MOD = 1e9 + 7;

class D474 {
public:
    void solve(istream& in, ostream& out) {
        int T, k;
        in >> T >> k;
        
        vector<int> dp(MAXV+1);
        dp[0] = 1;
        for (int i = 1; i <= MAXV; ++i) {
            dp[i] = dp[i-1];
            if (i - k >= 0) dp[i] = (dp[i] + dp[i-k]) % MOD;
        }
        
        for (int i = 1; i <= MAXV; ++i) {
            dp[i] = (dp[i] + dp[i-1]) % MOD;
        }
        
        for (int t = 1; t <= T; ++t) {
            int a, b;
            in >> a >> b;
            
            int res = (dp[b] - dp[a-1] + MOD) % MOD;
            out << res << endl;
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    D474 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
