/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class C404 {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;
        vector<pair<int, int>> d(n);
        for (int i = 0; i < n; ++i) {
            in >> d[i].first;
            d[i].second = i;
        }
        sort(d.begin(), d.end());
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            cnt += (d[i].first == 0);
        }
        if (cnt != 1) {
            out << -1 << "\n";
            return;
        }
        
        vector<pair<int, int>> edges;
        queue<int> q;
        q.push(0);
        vector<int> cnts(n, 0);
        for (int i = 1; i < n; ++i) {
            if (q.empty()) {
                out << -1 << "\n";
                return;
            }
            int ind = q.front();
            while (!q.empty() && (d[ind].first + 1 < d[i].first || cnts[ind] >= k)) {
                q.pop();
                if (!q.empty()) {
                    ind = q.front();
                }
            }
            if (d[ind].first + 1 != d[i].first || cnts[ind] >= k) {
                out << -1 << "\n";
                return;
            }
            ++cnts[ind];
            ++cnts[i];
            edges.emplace_back(d[ind].second + 1, d[i].second + 1);
            q.push(i);
        }
        out << edges.size() << "\n";
        for (const auto& p : edges) {
            out << p.first << " " << p.second << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    C404 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
