/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class B214 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> digs(n);
        bool zero = false;
        for (int i = 0; i < n; ++i) {
            in >> digs[i];
            zero = (zero || digs[i] == 0);
        }
        if (!zero) {
            out << "-1\n";
            return;
        }
        sort(digs.begin(), digs.end(), greater<int>());
        
        vector<vector<int>> dp(n+1, vector<int>(3, -1));
        dp[0][0] = 0;
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (dp[i-1][j] != -1) {
                    dp[i][(j + digs[i-1]) % 3] = max(dp[i][(j + digs[i-1]) % 3], dp[i-1][j] + 1);
                    dp[i][j] = max(dp[i][j], dp[i-1][j]);
                }
            }
        }
        
        string res = "";
        for (int i = n, j = 0; i >= 1; --i) {
            if (dp[i][j] == dp[i-1][j]) {
                
            } else {
                j = ((j - digs[i-1]) % 3 + 3) % 3;
                res += digs[i-1] + '0';
            }
        }
        reverse(res.begin(), res.end());
        bool other = false;
        for (int i = 0; !other && i < (int)res.size(); ++i) {
            other = (res[i] != '0');
        }
        if (!other) {
            out << "0\n";
        } else {
            out << res << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    B214 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
