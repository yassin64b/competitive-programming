/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class C369 {
private:
    bool dfs(int u, const vector<vector<pair<int,bool>>> &g, vector<int> &vis) {
        vis[u] = 1;
        bool ret = false;
        for (int i = 0; i < (int)g[u].size(); ++i) {
            int v = g[u][i].first;
            if (!vis[v]) {
                bool getsRepaired = dfs(v, g, vis);
                ret = ret || getsRepaired;
                if (!getsRepaired && g[u][i].second) {
                    vis[v] = 2;
                    ret = true;
                }
            }
        }
        return ret;
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<vector<pair<int,bool>>> g(n);
        for (int i = 0; i < n-1; ++i) {
            int x, y, t;
            in >> x >> y >> t;
            g[x-1].push_back({y-1, t == 2});
            g[y-1].push_back({x-1, t == 2});
        }
        
        vector<int> vis(n, 0);
        (void)dfs(0, g, vis);
        vector<int> res;
        for (int i = 0; i < n; ++i) {
            if (vis[i] == 2) {
                res.push_back(i+1);
            }
        }
        out << res.size() << "\n";
        for (int i = 0; i < (int)res.size(); ++i) {
            out << res[i] << " ";
        }
        out << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    C369 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
