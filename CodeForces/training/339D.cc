/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class D339 {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        int len = pow(2, n);
    
        vector<vector<int>> tree(n+1);
        tree[0].resize(len);
        for (int i = 0; i < len; ++i) {
            in >> tree[0][i];
        }
        
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < (int)tree[i-1].size(); j += 2) {
                if (i % 2 == 1) {
                    tree[i].push_back(tree[i-1][j] | tree[i-1][j+1]);
                } else {
                    tree[i].push_back(tree[i-1][j] ^ tree[i-1][j+1]);
                }
            }
        }
        
        for (int q = 0; q < m; ++q) {
            int p, b;
            in >> p >> b;
            --p;
            
            //update tree
            tree[0][p] = b;
            p -= (p % 2);
    
            for (int i = 1; i <= n; ++i) {
                //cout << "update with " << p << " " << tree[i-1].size() << endl;
                if (i % 2 == 1) {
                    if (tree[i][p/2] == (tree[i-1][p] | tree[i-1][p+1])) {
                        break;
                    }
                    tree[i][p/2] = (tree[i-1][p] | tree[i-1][p+1]);
                } else {
                    if (tree[i][p/2] == (tree[i-1][p] ^ tree[i-1][p+1])) {
                        break;
                    }
                    tree[i][p/2] = (tree[i-1][p] ^ tree[i-1][p+1]);
                }
                p /= 2;
                p -= (p % 2);
            }
    
            /*for (int i = 0; i <= n; ++i) {
                for (int j = 0; j < (int)tree[i].size(); ++j) {
                    cout << tree[i][j] << " ";
                }
                cout << endl;
            }*/
            
            out << tree[n][0] << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    D339 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
