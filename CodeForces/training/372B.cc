/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

using vb = vector<bool>;
using vvb = vector<vb>;
using vvvb = vector<vvb>;
using vi = vector<int>;
using vvi = vector<vi>;
using vvvi = vector<vvi>;

class B372 {
public:
    void solve(istream &in, ostream &out) {
        int n, m, q;
        in >> n >> m >> q;
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                char c;
                in >> c;
                grid[i][j] = c - '0';
            }
        }
        
        vector<vvvb> poss(n, vvvb(m, vvb(n, vb(m, false))));
        for (int a = 0; a < n; ++a) {
            for (int b = 0; b < m; ++b) {
                for (int c = a; c < n; ++c) {
                    for (int d = b; d < m; ++d) {
                        poss[a][b][c][d] = grid[c][d] == 0 && (c == a || poss[a][b][c-1][d]) && (d == b || poss[a][b][c][d-1]);
                    }
                }
            }
        }
        
        vector<vvvi> num(n, vvvi(m, vvi(n, vi(m, 0))));
        for (int a = 0; a < n; ++a) {
            for (int b = 0; b < m; ++b) {
                for (int c = a; c < n; ++c) {
                    for (int d = b; d < m; ++d) {
                        num[a][b][c][d] = poss[a][b][c][d];
                        
                        num[a][b][c][d] += (c > a ? num[a][b][c-1][d] : 0);
                        num[a][b][c][d] += (d > b ? num[a][b][c][d-1] : 0);
                        num[a][b][c][d] -= (c > a && d > b ? num[a][b][c-1][d-1] : 0);
                    }
                }
            }
        }
        for (int a = n-1; a >= 0; --a) {
            for (int b = m-1; b >= 0; --b) {
                for (int c = a; c < n; ++c) {
                    for (int d = b; d < m; ++d) {
                        num[a][b][c][d] += (a+1 < n ? num[a+1][b][c][d] : 0);
                        num[a][b][c][d] += (b+1 < m ? num[a][b+1][c][d] : 0);
                        num[a][b][c][d] -= (a+1 < n && b+1 < m ? num[a+1][b+1][c][d] : 0);
                    }
                }
            }
        }
        
        
        for (int t = 0; t < q; ++t) {
            int a, b, c, d;
            in >> a >> b >> c >> d;
            out << num[a-1][b-1][c-1][d-1] << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    B372 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
