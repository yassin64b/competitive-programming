/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class A217 {
private:
    void dfs(int u, const vector<vector<int>> &g, vector<int> &vis) {
        vis[u] = 1;
        for (int i = 0; i < (int)g[u].size(); ++i) {
            int v = g[u][i];
            if (!vis[v]) {
                dfs(v, g, vis);
            }
        }
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<pair<int,int>> xy(n);
        vector<vector<int>> g(n);
        vector<vector<int>> grid(1000, vector<int>(1000, -1));
        for (int i = 0; i < n; ++i) {
            in >> xy[i].first >> xy[i].second;
            --xy[i].first; --xy[i].second;
            grid[xy[i].first][xy[i].second] = i;
        }
        
        for (int ind = 0; ind < n; ++ind) {
            int x = xy[ind].first, y = xy[ind].second;
            for (int i = x-1; i >= 0; --i) { //north
                if (grid[i][y] != -1) {
                    g[ind].push_back(grid[i][y]);
                    break;
                }
            }
            for (int i = x+1; i < 1000; ++i) { //south
                if (grid[i][y] != -1) {
                    g[ind].push_back(grid[i][y]);
                    break;
                }
            }
            for (int j = y-1; j >= 0; --j) { //west
                if (grid[x][j] != -1) {
                    g[ind].push_back(grid[x][j]);
                    break;
                }
            }
            for (int j = y+1; j < 1000; ++j) { //east
                if (grid[x][j] != -1) {
                    g[ind].push_back(grid[x][j]);
                    break;
                }
            }
        }
        /*for (int i = 0; i < n; ++i) {
            for (int j = 0; j < (int)g[i].size(); ++j) {
                cout << "edge: " << i+1 << " to " << g[i][j]+1 << endl;
            }
        }*/
        
        int cnt = 0;
        vector<int> vis(n, 0);
        for (int i = 0; i < n; ++i) {
            if (!vis[i]) {
                dfs(i, g, vis);
                ++cnt;
            }
        }
        out << cnt-1 << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    A217 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
