/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class D496 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        
        vector<int> pref_a1(n), pref_a2(n);
        pref_a1[0] = (a[0] == 1);
        pref_a2[0] = (a[0] == 2);
        for (int i = 1; i < n; ++i) {
            pref_a1[i] = pref_a1[i - 1] + (a[i] == 1);
            pref_a2[i] = pref_a2[i - 1] + (a[i] == 2);
        }
        
        vector<pair<int, int>> res;
        for (int t = 1; t <= n; ++t) {
            int s = 0;
            int s1 = 0, s2 = 0;
            bool valid = true;
            for (int i = 0; i < n; ) {
                auto it1 = lower_bound(pref_a1.begin(), pref_a1.end(), (i - 1 >= 0 ? pref_a1[i - 1] : 0) + t);
                auto it2 = lower_bound(pref_a2.begin(), pref_a2.end(), (i - 1 >= 0 ? pref_a2[i - 1] : 0) + t);
                int ind1 = it1 - pref_a1.begin();
                int ind2 = it2 - pref_a2.begin();
                if (ind1 < ind2) {
                    assert(ind1 >= i);
                    i = ind1 + 1;
                    ++s1;
                    s = s1;
                } else if (ind1 > ind2) {
                    assert(ind2 >= i);
                    i = ind2 + 1;
                    ++s2;
                    s = s2;
                } else {
                    assert(ind1 == ind2);
                    valid = false;
                    i = n;
                }
            }
            if (valid && ((s == s1 && s > s2) || (s == s2 && s > s1))) {
                res.emplace_back(s, t);
            }
        }
        sort(res.begin(), res.end());
        out << res.size() << "\n";
        for (auto& p : res) {
            out << p.first << " " << p.second << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    D496 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
