/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class FenwickTree {
private:
    vector<long long> ft;
public:
    FenwickTree(int n) {
        ft.assign(n + 1, 0);
    }
    long long rsq(int b) {
        long long sum = 0;
        for (; b; b -= (b & (-b))) {
            sum += ft[b];
        }
        return sum;
    }
    long long rsq(int a, int b) {
        if (a > b) return 0;
        return rsq(b) - rsq(a - 1);
    }
    void update(int a, long long v) {
        for ( ; a < (int)ft.size(); a += (a & (-a))) {
            ft[a] += v;
        }
    }
    //NOTE: when using range update, rsq(b) is point query + don't use update(a, v)!!
    void update(int a, int b, long long v) {
        update(a, v);
        update(b + 1, -v);
    }
};

struct Op {
    int l, r, d;
};

class A295 {
public:
    void solve(istream& in, ostream& out) {
        int n, m, k;
        in >> n >> m >> k;
        vector<int> a(n);
        FenwickTree ft(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
            ft.update(i+1, i+1, a[i]);
        }
        
        vector<Op> v(m);
        for (int i = 0; i < m; ++i) {
            in >> v[i].l >> v[i].r >> v[i].d;
        }
        
        vector<int> apply(m+1, 0);
        for (int i = 0; i < k; ++i) {
            int x, y;
            in >> x >> y;
            ++apply[x-1];
            --apply[y];
        }
        
        long long cur = 0;
        for (int i = 0; i < m; ++i) {
            cur += apply[i];
            assert(cur >= 0);
            if (cur != 0) {
                //cout << "apply " << v[i].l << " " << v[i].r << " " << v[i].d << " " << cur << " times!\n";
                ft.update(v[i].l, v[i].r, v[i].d*cur);
            }
        }
        
        for (int i = 0; i < n; ++i) {
            out << ft.rsq(i+1) << " ";
        }
        out << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    A295 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
