/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class B442 {
private:
    double calc(const vector<double>& v, double res) {
        res *= (1. - v.back());
        double tmp = v.back();
        for (int i = 0; i + 1 < (int)v.size(); ++i) {
            tmp *= (1 - v[i]);
        }
        return res + tmp;
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<double> p(n);
        for (int i = 0; i < n; ++i) {
            in >> p[i];
        }
        
        double res_val = *max_element(p.begin(), p.end());
        *max_element(p.begin(), p.end()) = -1;
        
        vector<double> res{res_val};
        while (true) {
            double mx = res_val, ind = -1;
            for (int i = 0; i < n; ++i) {
                if (p[i] >= -0.1) {
                    res.push_back(p[i]);
                    double tmp = calc(res, res_val);
                    if (tmp > mx) {
                        mx = tmp;
                        ind = i;
                    }
                    res.pop_back();
                }
            }
            if (ind == -1) {
                break;
            }
            res.push_back(p[ind]);
            p[ind] = -1;
            res_val = mx;
        }
        out.precision(17);
        out << fixed << res_val << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    B442 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
