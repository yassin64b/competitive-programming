/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class C343 {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<long long> h(n), p(m);
        for (int i = 0; i < n; ++i) {
            in >> h[i];
        }
        for (int j = 0; j < m; ++j) {
            in >> p[j];
        }
        
        long long low = 0, high = 1000LL*1000*1000*100, ans = 0;
        while (low <= high) {
            long long mid = (low + high) / 2;
            int i, j;
            for (i = 0, j = 0; i < n && j < m; ++i) {
                if (abs(p[j] - h[i]) <= mid) { //reachable
                    long long x = mid;
                    if (p[j] <= h[i]) { //have to go to left
                        x = max(mid - 2 * (h[i] - p[j]), (mid - (h[i] - p[j])) / 2); //go to left first vs go to right first
                        while (j < m && p[j] <= h[i]) { //do all tasks to the left
                            ++j;
                        }
                    }
                    while (j < m && p[j] - h[i] <= x) { //do as many tasks to right as possible
                        ++j;
                    }
                }
            }
            if (j == m) {
                ans = mid;
                high = mid-1;
            } else {
                low = mid+1;
            }
        }
        out << ans << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    C343 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
