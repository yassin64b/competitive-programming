/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class C371 {
public:
    void solve(istream& in, ostream& out) {
        string recipe;
        in >> recipe;
        int n[3], p[3];
        long long r;
        in >> n[0] >> n[1] >> n[2] >> p[0] >> p[1] >> p[2] >> r;
        
        int need[3];
        need[0] = count(recipe.begin(), recipe.end(), 'B');
        need[1] = count(recipe.begin(), recipe.end(), 'S');
        need[2] = count(recipe.begin(), recipe.end(), 'C');
        
        long long low = 0, high = 1000LL*1000*1000*1000+100, ans = 0;
        while (low <= high) {
            long long rr[3]{}, mid = (low + high) / 2;
            for (int i = 0; i < 3; ++i) {
                rr[i] += (mid * need[i] - n[i]) * p[i];
                rr[i] = max(rr[i], 0LL);
            }
            if (rr[0] + rr[1] + rr[2] <= r) {
                low = mid+1;
                ans = mid;
            } else {
                high = mid-1;
            }
        }
        
        out << ans << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    C371 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
