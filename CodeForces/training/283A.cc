/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class A283 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        out.precision(17);
        
        vector<int> d{0};
        int len = 1;
        long long sum = 0;
        for (int i = 0; i < n; ++i) {
            int t;
            in >> t;
            if (t == 1) {
                int a, x;
                in >> a >> x;
                sum += a * x;
                if (a == len) {
                    d[a-1] += x;
                } else {
                    d[a-1] -= x;
                }
            } else if (t == 2) {
                int k;
                in >> k;
                d.push_back(k);
                if (len > 0) {
                    d[len-1] = k - d[len-1];
                }
                ++len;
                sum += k;
            } else {
                --len;
                if (len > 0) {
                    d[len-1] = d[len] - d[len-1];
                }
                sum -= d[len];
                d.pop_back();
            }
            //cout << sum << " " << len << endl;
            out << fixed << (len == 0 ? 0. : sum / (double)len) << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    A283 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
