/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class C255 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> b(n);
        map<int,vector<int>> m;
        for (int i = 0; i < n; ++i) {
            in >> b[i];
            m[b[i]].push_back(i);
        }
        int res = 0;
        for (pair<const int,vector<int>> &x : m) {
            res = max(res, (int)x.second.size()); //q = 0
            for (pair<const int,vector<int>> &y : m) {
                if (x.first == y.first) {
                    continue;
                }
                int tmp = 1, turn = 0;
                int i = 0, j = 0;
                while (i < (int)x.second.size() && j < (int)y.second.size()) {
                    if (turn) {
                        if (x.second[i] > y.second[j]) {
                            turn = 0;
                            ++tmp;
                            ++j;
                        } else {
                            ++i;
                        }
                    } else {
                        if (y.second[j] > x.second[i]) {
                            turn = 1;
                            ++tmp;
                            ++i;
                        } else {
                            ++j;
                        }
                    }
                }
                res = max(res, tmp);
            }
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    C255 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
