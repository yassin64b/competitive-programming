/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class B687 {
private:
    long long gcd(long long a, long long b) {
        return b == 0 ? a : gcd(b, a % b);
    }
    
    long long lcm(long long a, long long b) {
        return 1LL * a / gcd(a, b) * b;
    }
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;
        vector<int> c(n);
        long long gcd_ = 1;
        for (int i = 0; i < n; ++i) {
            in >> c[i];
            gcd_ = gcd(k, lcm(gcd_, c[i]));
        }
        out << (gcd_ % k == 0 ? "Yes\n" : "No\n");
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    B687 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
