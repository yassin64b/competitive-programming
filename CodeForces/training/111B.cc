/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr int MAXV = 1000*100;

class B111 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> x(n), y(n);
        for (int i = 0; i < n; ++i) {
            in >> x[i] >> y[i];
        }
        
        vector<vector<int>> div_inv(MAXV+1), div(n);
        for (int i = 0; i < n; ++i) {
            for (int j = 1; j*j <= x[i]; ++j) {
                if (x[i] % j == 0) {
                    div[i].push_back(j);
                    div_inv[j].push_back(i);
                    if (j != x[i]/j) {
                        div[i].push_back(x[i]/j);
                        div_inv[x[i]/j].push_back(i);
                    }
                }
            }
        }
        
        for (int i = 0; i < n; ++i) {
            int lo = i - y[i];
            long long res = 0;
            for (int d : div[i]) {
                auto it1 = lower_bound(div_inv[d].begin(), div_inv[d].end(), lo);
                if (it1 == div_inv[d].end() || *it1 >= i) {
                    ++res;
                }
            }
            out << res << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    B111 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
