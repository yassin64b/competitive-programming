/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class D363 {
public:
    void solve(istream& in, ostream& out) {
        int n, m, a;
        in >> n >> m >> a;
        vector<int> b(n), p(m);
        for (int i = 0; i < n; ++i) {
            in >> b[i];
        }
        for (int j = 0; j < m; ++j) {
            in >> p[j];
        }
        sort(b.begin(), b.end());
        sort(p.begin(), p.end());
        
        int low = 0, high = n, ans = 0;
        while (low <= high) {
            int mid = (low + high) / 2, aa = a;
            bool poss = true;
            for (int i = 0; aa >= 0 && poss && i < mid; ++i) {
                //boy n-mid+i buys bike i
                if (b[n-mid+i] + aa < p[i]) {
                    poss = false;
                } else {
                    aa -= max(0, p[i] - b[n-mid+i]);
                }
            }
            if (!poss || aa < 0) {
                high = mid - 1;
            } else {
                low = mid + 1;
                ans = mid;
            }
        }
        
        int s = 0, aa = a;
        for (int i = 0; i < ans; ++i) {
            aa -= max(0, p[i] - b[n-ans+i]);
            s += min(p[i], b[n-ans+i]);
        }
        out << ans << " " << max(0, s - aa) << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    D363 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
