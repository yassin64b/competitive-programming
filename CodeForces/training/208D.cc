/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class D208 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> p(n);
        for (int i = 0; i < n; ++i) {
            in >> p[i];
        }
        vector<int> prices(5);
        for (int i = 0; i < 5; ++i) {
            in >> prices[i];
        }
        
        long long cur = 0;
        vector<long long> nums(5, 0);
        for (int i = 0; i < n; ++i) {
            cur += p[i];
            while (true) {
                int ind = -1, mx = -1;
                for (int j = 0; j < 5; ++j) {
                    if (cur / prices[j] > 0 && prices[j] > mx) {
                        ind = j;
                        mx = prices[j];
                    }
                }
                if (ind == -1) {
                    break;
                }
                nums[ind] += cur / prices[ind];
                cur %= prices[ind];
            }
        }
        for (int i = 0; i < 5; ++i) {
            out << nums[i] << " ";
        }
        out << endl << cur << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    D208 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
