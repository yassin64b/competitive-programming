/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

constexpr int MOD{1000*1000*1000 + 7};
class B414 {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;
        
        //dp[i][j] = num ways seq length i, last val j
        vector<vector<int>> dp(k+1, vector<int>(n+1));
        for (int j = 1; j <= n; ++j) {
            dp[1][j] = 1;
        }
        for (int i = 2; i <= k; ++i) {
            for (int j = 1; j <= n; ++j) {
                for (int mult = j; mult <= n; mult += j) {
                    dp[i][j] += dp[i-1][mult];
                    dp[i][j] %= MOD;
                }
            }
        }
        int res = 0;
        for (int j = 1; j <= n; ++j) {
            res += dp[k][j];
            res %= MOD;
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    B414 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
