/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class B295 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<vector<int>> a(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                in >> a[i][j];
            }
        }
        vector<int> x(n);
        for (int t = 0; t < n; ++t) {
            in >> x[t];
            --x[t];
        }
    
        vector<long long> res(n, 0);
        set<int> vert;
        vector<vector<int>> dist(a);
        for (int t = n-1; t >= 0; --t) {
            vert.insert(x[t]);
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < n; ++j) {
                    dist[i][j] = min(dist[i][j], dist[i][x[t]] + dist[x[t]][j]);
                }
            }
            for (int i : vert) {
                for (int j : vert) {
                    res[t] += dist[i][j];
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            out << res[i] << " ";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    B295 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
