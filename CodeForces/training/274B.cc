/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

using lli = long long;

class B274 {
private:
    pair<lli,lli> dfs(int u, const vector<vector<int>> &g, vector<int> &vis, const vector<int> &val) {
        pair<lli,lli> ret{0, 0};
        vis[u] = 1;
        for (int i = 0; i < (int)g[u].size(); ++i) {
            int v = g[u][i];
            if (!vis[v]) {
                pair<lli,lli> tmp = dfs(v, g, vis, val);
                ret.first = max(ret.first, tmp.first);
                ret.second = max(ret.second, tmp.second);
            }
        }
        
        lli curval = val[u];
        curval += ret.first - ret.second;
        if (curval < 0) {
            ret.first += -curval;
        } else if (curval > 0) {
            ret.second += curval;
        }
        return ret;
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<vector<int>> g(n);
        for (int i = 0; i < n-1; ++i) {
            int a, b;
            in >> a >> b;
            g[a-1].push_back(b-1);
            g[b-1].push_back(a-1);
        }
        vector<int> v(n), vis(n, 0);
        for (int i = 0; i < n; ++i) {
            in >> v[i];
        }
        
        pair<lli,lli> res = dfs(0, g, vis, v);
        out << res.first + res.second << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    B274 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
