/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

constexpr int NUMCOL = 1000*100;

class D246 {
public:
    void solve(istream &in, ostream &out) {
        int n, m;
        in >> n >> m;
        vector<int> c(n);
        vector<int> ok(NUMCOL+1);
        for (int i = 0; i < n; ++i) {
            in >> c[i];
            ok[c[i]] = 1;
        }
        
        vector<set<int>> Q(NUMCOL+1);
        for (int i = 0; i < m; ++i) {
            int a, b;
            in >> a >> b;
            if (c[a-1] != c[b-1]) {
                Q[c[a-1]].insert(c[b-1]);
                Q[c[b-1]].insert(c[a-1]);
            }
        }
        
        int mx = -1, col = NUMCOL+1;
        for (int i = 1; i <= NUMCOL; ++i) {
            if (ok[i] && (int)Q[i].size() > mx) {
                mx = Q[i].size();
                col = i;
            }
        }
        out << col << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    D246 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
