/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class A364 {
public:
    void solve(istream& in, ostream& out) {
        int a;
        string s;
        in >> a >> s;
        int n = s.size();
        const int MAXV = n*9;
        
        vector<int> v(n);
        for (int i = 0; i < n; ++i) {
            v[i] = s[i] - '0';
        }
        
        vector<int> num_sum(MAXV+1, 0);
        for (int i = 0; i < n; ++i) {
            int sum = 0;
            for (int j = i; j < n; ++j) {
                sum += v[j];
                ++num_sum[sum];
            }
        }
        
        long long res = 0;
        for (int i = 0; i < n; ++i) {
            int sum = 0;
            for (int j = i; j < n; ++j) {
                sum += v[j];
                if (a == 0 || sum == 0) {
                    if (a == 0 && sum == 0) {
                        res += n * (n+1) / 2;
                    } else if (a == 0) {
                        res += num_sum[0];
                    }
                } else if (a % sum == 0) {
                    if (a / sum <= MAXV) {
                        res += num_sum[a/sum];
                    }
                }
            }
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    A364 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
