/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

constexpr int MAX = 1000*100;

class B264 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        if (n == 1) {
            out << 1 << "\n";
            return;
        }
        
        vector<int> dp(MAX+1, 0), d(MAX+1, 0);
        for (int i = 0; i < (int)a.size(); ++i) {
            vector<int> div;
            int tmp = a[i];
            for (int j = 2; j*j <= tmp; ++j) {
                if (tmp % j == 0) {
                    div.push_back(j);
                    while (tmp % j == 0) {
                        tmp /= j;
                    }
                }
            }
            if (tmp > 1) {
                div.push_back(tmp);
            }
    
            int r = 0;
            for (int j = 0; j < (int)div.size(); ++j) {
                r = max(r, d[div[j]] + 1);
            }
            dp[a[i]] = r;
            
            for (int j = 0; j < (int)div.size(); ++j) {
                d[div[j]] = r;
            }
        }
        
        int res = 0;
        for (int i = 1; i <= MAX; ++i) {
            //if (dp[i]) cout << i << ": " << dp[i] << endl;
            res = max(res, dp[i]);
        }
        out << res << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    B264 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
