/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

void countingSort(vector<int> &v, int range) {
    vector<int> cnt(range + 1, 0);
    
    for (int i = 0; i < (int) v.size(); ++i) {
        ++cnt[v[i]];
    }
    
    for (int i = 0, j = -1; i <= range; ++i) {
        for (int k = 0; k < cnt[i]; ++k) {
            v[++j] = i;
        }
    }
}

class B375 {
public:
    void solve(istream &in, ostream &out) {
        int n, m;
        in >> n >> m;
        vector<vector<int>> a(n, vector<int>(m));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                char c;
                in >> c;
                a[i][j] = c - '0';
            }
        }
        
        //dp[i][j] = longest consec. seq. of 1 in row i ending at j
        vector<vector<int>> dp(n, vector<int>(m));
        for (int i = 0; i < n; ++i) {
            dp[i][0] = a[i][0];
            for (int j = 1; j < m; ++j) {
                if (a[i][j] == 1) {
                    dp[i][j] = dp[i][j - 1] + 1;
                } else {
                    dp[i][j] = 0;
                }
            }
        }
        vector<vector<int>> trans_dp(m, vector<int>(n)); //transposed dp
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                trans_dp[j][i] = dp[i][j];
            }
        }
        for (int j = 0; j < m; ++j) {
            //sort(trans_dp[j].begin(), trans_dp[j].end(), greater<int>()); //slower 1.5s vs 1s
            countingSort(trans_dp[j], m);
            reverse(trans_dp[j].begin(), trans_dp[j].end());
        }
        int res = 0;
        for (int j = 0; j < m; ++j) {
            for (int i = 0; i < n; ++i) {
                res = max(res, (i + 1) * trans_dp[j][i]);
            }
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    B375 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
