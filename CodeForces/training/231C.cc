/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class C231 {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;
        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        sort(a.begin(), a.end());
        
        int mx = 0, num = -1;
        int last = 0, num_carried = 0;
        long long cost_carry = 0;
        for (int i = 0; i < n; ) {
            int j = i+1;
            while (j < n && a[j] == a[i]) {
                ++j;
            }
            cost_carry += 1LL * num_carried * (a[i] - last);
            while (cost_carry > k) {
                cost_carry -= (a[i] - a[i - num_carried]);
                --num_carried;
            }
            int cur_num = j - i;
            if (num_carried + cur_num > mx) {
                mx = num_carried + cur_num;
                num = a[i];
            }
            
            for (int jj = i; jj < j; ++jj) {
                ++num_carried;
            }
            last = a[i];
            i = j;
        }
        
        out << mx << " " << num << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    C231 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
