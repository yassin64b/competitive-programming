/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class D489 {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<vector<int>> g(n);
        //vector<vector<int>> gm(n, vector<int>(n, 0));
        for (int i = 0; i < m; ++i) {
            int a, b;
            in >> a >> b;
            g[a-1].push_back(b-1);
            //gm[a-1][b-1] = 1;
        }
        
        vector<vector<int>> cousin(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < (int)g[i].size(); ++j) {
                int b = g[i][j];
                for (int k = 0; k < (int)g[b].size(); ++k) {
                    if (g[i][j] == g[b][k] || i == g[b][k]) continue;
                    ++cousin[i][g[b][k]];
                }
            }
        }
        /*for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                cout << cousin[i][j] << " ";
            }
            cout << endl;
        }*/
        
        int res = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                res += cousin[i][j] * (cousin[i][j]-1) / 2;
            }
        }
        out << res << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    D489 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
