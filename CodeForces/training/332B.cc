/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class B332 {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;
        vector<int> x(n);
        for (int i = 0; i < n; ++i) {
            in >> x[i];
        }
        vector<long long> dp(n, 0);
        vector<int> ind(n, -1);
        long long cur = 0;
        for (int i = 0; i < k; ++i) {
            cur += x[i];
        }
        dp[k-1] = cur;
        ind[k-1] = 0;
        for (int i = k; i < n; ++i) {
            dp[i] = dp[i-1];
            ind[i] = ind[i-1];
            cur -= x[i-k];
            cur += x[i];
            if (cur > dp[i]) {
                dp[i] = cur;
                ind[i] = i-k+1;
            }
        }
        
        cur = 0;
        for (int i = n-1; i > n-1-k; --i) {
            cur += x[i];
        }
        long long ans = dp[n-1-k] + cur, mx = cur;
        int ind1 = ind[n-1-k], ind2 = n-1-k+1, mx_ind = n-1-k+1;
        for (int i = n-1-k; i > 0; --i) {
            cur -= x[i+k];
            cur += x[i];
            if (cur >= mx) {
                mx = cur;
                mx_ind = i;
            }
            if (dp[i-1] + mx >= ans) {
                ans = dp[i-1] + mx;
                ind1 = ind[i-1];
                ind2 = mx_ind;
            }
        }
        
        out << ind1+1 << " " << ind2+1 << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    B332 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
