/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class C160 {
public:
    void solve(istream& in, ostream& out) {
        long long n, k;
        in >> n >> k;
        vector<int> a(n);
        map<int, int> m;
        for (int i = 0; i < n; ++i) {
            in >> a[i];
            ++m[a[i]];
        }
        sort(a.begin(), a.end());
        /*int first = a[0]; //works only for distinct elements
        for (int i = 1; i < n && k - n >= 0; ++i) {
            k -= n;
            first = a[i];
        }
        int second = a[0];
        for (int i = 1; i < n && k - 1 >= 0; ++i) {
            k -= 1;
            second = a[i];
        }*/
        int first = -1;
        long long last = 0;
        for (const auto &p : m) {
            int x = p.first, num = p.second;
            if (k - last * n > 0) {
                first = x;
                k -= last * n;
                last = num;
            } else {
                break;
            }
        }
        int mult = m[first];
        int second = -1;
        last = 0;
        for (const auto &p : m) {
            int x = p.first, num = p.second;
            if (k - mult * last * 1 > 0) {
                second = x;
                k -= mult * last * 1;
                last = num;
            } else {
                break;
            }
        }
        out << first << " " << second << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    C160 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
