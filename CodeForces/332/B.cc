/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<int> f(n), b(m);
        vector<vector<int>> inv_f(n);
        for (int i = 0; i < n; ++i) {
            in >> f[i];
            --f[i];
            inv_f[f[i]].push_back(i);
        }
        bool poss = true, ambig = false;
        for (int i = 0; i < m; ++i) {
            in >> b[i];
            --b[i];
            if (inv_f[b[i]].size() == 0) {
                poss = false;
            }
            if (inv_f[b[i]].size() > 1) {
                ambig = true;
            }
        }
        
        if (!poss) {
            out << "Impossible\n";
        } else if (ambig) {
            out << "Ambiguity\n";
        } else {
            out << "Possible\n";
            for (int i = 0; i < m; ++i) {
                out << inv_f[b[i]][0] + 1 << " ";
            }
            out << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
