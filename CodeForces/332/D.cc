/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        long long x;
        in >> x;
        vector<pair<long long, long long>> ans;
        for (long long n = 1; n * n * n <= 3 * x; ++n) {
            if ((6 * x + n * n * n - n) % (3 * n * n + 3 * n) == 0) {
                long long m = (6 * x + n * n * n - n) / (3 * n * n + 3 * n);
                if (n > m) {
                    break;
                }
                ans.emplace_back(n, m);
            }
        }
        
        int k = ans.size();
        for (auto& p : ans) {
            k += (p.first != p.second);
        }
        out << k << "\n";
        for (auto& p : ans) {
            out << p.first << " " << p.second << "\n";
        }
        reverse(ans.begin(), ans.end());
        for (auto& p : ans) {
            if (p.second != p.first) {
                out << p.second << " " << p.first << "\n";
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
