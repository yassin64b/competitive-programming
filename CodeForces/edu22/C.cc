/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskC {
private:
    void dfs1(int u, const vector<vector<int>>& g, vector<int>& dist) {
        for (int v : g[u]) {
            if (dist[v] == -1) {
                dist[v] = dist[u] + 1;
                dfs1(v, g, dist);
            }
        }
    }
    int dfs2(int u, const vector<vector<int>>& g, const vector<int>& dist, int num, vector<int>& vis) {
        vis[u] = 1;
        if (num >= dist[u]) {
            return 0;
        }
        int res = dist[u] - num;
        for (int v : g[u]) {
            if (!vis[v]) {
                res = max(res, dfs2(v, g, dist, num + 1, vis) + 1);
            }
        }
        return res;
    }
public:
    void solve(istream& in, ostream& out) {
        int n, x;
        in >> n >> x;
        --x;
        vector<vector<int>> g(n);
        for (int i = 0; i < n - 1; ++i) {
            int a, b;
            in >> a >> b;
            g[a - 1].push_back(b - 1);
            g[b - 1].push_back(a - 1);
        }
        vector<int> dista(n, -1);
        dista[0] = 0;
        dfs1(0, g, dista);
        vector<int> vis(n, 0);
        out << dfs2(x, g, dista, 0, vis) * 2 << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
