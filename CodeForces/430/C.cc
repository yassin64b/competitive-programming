/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskC {
private:
    int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
    void dfs(int u, const vector<vector<int>> &g, const vector<int> &a,
             vector<int> &res, vector<int> &vis)
    {
        vis[u] = 1;
        for (int v : g[u]) {
            if (vis[v]) {
                continue;
            }
            if (u != 0) {
                res[v] = gcd(res[u], a[v]);
            } else {
                res[v] = a[v];
            }
            dfs(v, g, a, res, vis);
        }
    }
    void dfs2(int u, int d, const vector<vector<int>> &g, const vector<int> &a,
            vector<int> &res, const vector<int> &divs, vector<int> &cnts, vector<int> &vis)
    {
        vis[u] = 1;
        for (int i = 0; i < (int)divs.size(); ++i) {
            if (a[u] % divs[i] == 0) {
                ++cnts[i];
            }
            if (cnts[i] >= d - 1) {
                res[u] = max(res[u], divs[i]);
            }
        }
        for (int v : g[u]) {
            if (!vis[v]) {
                dfs2(v, d + 1, g, a, res, divs, cnts, vis);
            }
        }
        for (int i = 0; i < (int)divs.size(); ++i) {
            if (a[u] % divs[i] == 0) {
                --cnts[i];
            }
        }
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        vector<vector<int>> g(n);
        for (int i = 0; i < n - 1; ++i) {
            int x, y;
            in >> x >> y;
            g[x - 1].push_back(y - 1);
            g[y - 1].push_back(x - 1);
        }
        vector<int> res(n, 1), vis(n, 0);
        res[0] = a[0];
        dfs(0, g, a, res, vis);
        
        vector<int> divs;
        for (int i = 2; i <= a[0]; ++i) {
            if (a[0] % i == 0) {
                divs.push_back(i);
            }
        }
        vector<int> cnts(divs.size(), 0);
        vis.assign(n, 0);
        dfs2(0, 1, g, a, res, divs, cnts, vis);
        
        for (int x : res) {
            out << x << " ";
        }
        out << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
