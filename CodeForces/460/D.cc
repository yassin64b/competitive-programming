/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskD {
private:
    bool dfs(int u, const vector<vector<int>> &g, vector<int> &rec, vector<int> &vis)
    {
        vis[u] = rec[u] = 1;
        for (int v : g[u]) {
            if (!vis[v]) {
                if (dfs(v, g, rec, vis)) {
                    return true;
                }
            } else if (rec[v]) {
                return true;
            }
        }
        rec[u] = 0;
        return false;
    }
    void dfs2(int u, const vector<vector<int>> &g, vector<int> &vis,
                const string &s, vector<vector<int>> &ans)
    {
        vis[u] = 1;
        for (int v : g[u]) {
            if (!vis[v]) {
                dfs2(v, g, vis, s, ans);
            }
            for (int j = 0; j < 26; ++j) {
                ans[u][j] = max(ans[u][j], ans[v][j]);
            }
        }
        ++ans[u][s[u] - 'a'];
    }
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        string s;
        in >> s;
        vector<vector<int>> g(n);
        for (int i = 0; i < m; ++i) {
            int x, y;
            in >> x >> y;
            g[x - 1].push_back(y - 1);
        }
        vector<int> vis(n, 0), rec(n, 0);
        for (int u = 0; u < n; ++u) {
            if (!vis[u]) {
                if (dfs(u, g, rec, vis)) {
                    out << -1 << "\n";
                    return;
                }
            }
        }
        vector<vector<int>> ans(n, vector<int>(26, 0));
        vis.assign(n, 0);
        for (int u = 0; u < n; ++u) {
            if (!vis[u]) {
                vector<int> cnt(26, 0);
                dfs2(u, g, vis, s, ans);
            }
        }
        int res = 0;
        for (int u = 0; u < n; ++u) {
            for (int j = 0; j < 26; ++j) {
                res = max(res, ans[u][j]);
            }
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
