/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

struct noise {
    string s;
    int num_s, num_h;
};

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<noise> t(n);
        for (int i = 0; i < n; ++i) {
            in >> t[i].s;
        }
        for (int i = 0; i < n; ++i) {
            for (char c : t[i].s) {
                t[i].num_s += (c == 's');
                t[i].num_h += (c == 'h');
            }
        }
        sort(t.begin(), t.end(), [](const noise &lhs, const noise &rhs) {
            return 1. * lhs.num_h / lhs.num_s < 1. * rhs.num_h / rhs.num_s;
        });
        string res;
        for (int i = 0; i < n; ++i) {
            res += t[i].s;
        }
        int m = res.size();
        long long noise_res = 0;
        int pre_s = 0;
        for (int i = 0; i < m; ++i) {
            if (res[i] == 's') {
                ++pre_s;
            } else if (res[i] == 'h') {
                noise_res += pre_s;
            }
        }
        out << noise_res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
