/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskD {
private:
    void dfs(int u, const vector<vector<int>> &g, vector<int> &vis) {
        vis[u] = 1;
        for (int v : g[u]) {
            if (!vis[v]) {
                dfs(v, g, vis);
            }
        }
    }
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<vector<int>> g(n);
        for (int i = 0; i < m; ++i) {
            int u, v;
            in >> u >> v;
            g[u-1].push_back(v-1);
            if (v != u) {
                g[v-1].push_back(u-1);
            }
        }
        if (m == 1) {
            out << 0 << "\n";
            return;
        }
        vector<int> vis(n, 0);
        for (int i = 0; i < n; ++i) {
            if (g[i].size() > 0) {
                dfs(i, g, vis);
                break;
            }
        }
        
        long long res = 0;
        vector<long long> cnt_normal(n, 0);
        long long sum_loop = 0;
        for (int u = 0; u < n; ++u) {
            if (g[u].size() > 0 && !vis[u]) {
                out << 0 << "\n";
                return;
            }
            for (int v : g[u]) {
                if (v != u) {
                    ++cnt_normal[u];
                } else {
                    ++sum_loop;
                }
            }
            res += cnt_normal[u] * (cnt_normal[u]-1) / 2; //two adjacent edges
        }
        res += sum_loop * (m-sum_loop); //a loop edge with a non-loop edge
        res += sum_loop * (sum_loop-1) / 2; //two loop edges
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
