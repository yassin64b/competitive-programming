/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr int MAXV = 1000;

class TaskE {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;
        vector<int> v(MAXV+1, 0);
        for (int i = 0; i < k; ++i) {
            int a;
            in >> a;
            v[a] = 1;
        }
        
        vector<int> cur(2*MAXV+1, 0);
        cur[MAXV] = 1;
        int res = 0;
        bool flag = true;
        while ((cur[MAXV] == 0 || res == 0)  && flag) {
            ++res;
            //cout << res << " iteration: " << endl;
            flag = false;
            vector<int> nxt(2*MAXV+1, 0);
            for (int i = 0; i <= MAXV; ++i) {
                if (v[i]) {
                    for (int j = 0; j <= 2*MAXV; ++j) {
                        if (cur[j] && j+i-n <= 2*MAXV && j+i-n >= 0) {
                            nxt[j+i-n] = 1;
                            //cout << "goto " << j+i-n-MAXV << " with " << i << " from " << j-MAXV << endl;
                            if (!cur[j+i-n]) {
                                flag = true;
                            }
                        }
                    }
                }
            }
            cur = nxt;
        }
        if (!flag && cur[MAXV] == 0) {
            out << -1 << "\n";
        } else {
            out << res << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskE solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
