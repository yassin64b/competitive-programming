/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        long long b1, q, l, m;
        in >> b1 >> q >> l >> m;
        vector<long long> a(m);
        for (int i = 0; i < m; ++i) {
            in >> a[i];
        }
        sort(a.begin(), a.end());
        
        if (abs(b1) > l) {
            out << 0 << "\n";
            return;
        }
        if (b1 == 0 || q == 1) {
            auto it = lower_bound(a.begin(), a.end(), b1);
            if (it != a.end() && *it == b1) {
                out << 0 << "\n";
            } else {
                out << "inf\n";
            }
            return;
        }
        if (q == 0) {
            auto it = lower_bound(a.begin(), a.end(), 0), it2 = lower_bound(a.begin(), a.end(), b1);
            if (it != a.end() && *it == 0) {
                out << 0 + (it2 == a.end() || *it2 != b1) << "\n";
            } else {
                out << "inf\n";
            }
            return;
        }
        if (q == -1) {
            auto it = lower_bound(a.begin(), a.end(), b1), it2 = lower_bound(a.begin(), a.end(), -b1);
            if (it != a.end() && *it == b1 && it2 != a.end() && *it2 == -b1) {
                out << 0 << "\n";
            } else {
                out << "inf\n";
            }
            return;
        }
        int res = 0;
        while (abs(b1) <= l) {
            auto it = lower_bound(a.begin(), a.end(), b1);
            if (it == a.end() || *it != b1) {
                ++res;
            }
            b1 *= q;
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
