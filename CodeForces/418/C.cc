/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

int dp[26][1500][1500 + 1] = {0};

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n;
        string s;
        in >> n >> s;
        //vector<vector<int>> dp[26];
        //for (int i = 0; i < 26; ++i) {
        //    dp[i] = vector<vector<int>>(n, vector<int>(n + 1, 0));
        //}
        //vector<vector<vector<int>>> dp(26, vector<vector<int>>(n, vector<int>(n + 1, 0)));
        for (char c = 'a'; c <= 'z'; ++c) {
            int k = c - 'a';
            int (& dpc)[1500][1500 + 1] = dp[k];
            //vector<vector<int>>& dpc = dp[k];
            dpc[0][0] = (s[0] == c);
            for (int j = 1; j <= n; ++j) {
                dpc[0][j] = 1;
            }
            for (int i = 1; i < n; ++i) {
                for (int j = 0; j <= n; ++j) {
                    dpc[i][j] = max(dpc[i][j], (j - 1 >= 0 ? dpc[i][j - 1] : 0));
                    if (s[i] == c) {
                        if (s[i - 1] == c) {
                            dpc[i][j] = max(dpc[i][j], dpc[i - 1][j] + 1);
                        } else {
                            dpc[i][j] = max(dpc[i][j], (j > 0 ? dpc[i - 1][j] : 0) + 1);
                        }
                    } else {
                        if (s[i - 1] == c) {
                            dpc[i][j] = max(dpc[i][j], (j - 1 >= 0 ? dpc[i - 1][j - 1] : 0) + 1);
                        } else {
                            dpc[i][j] = max(dpc[i][j], (j > 1 ? dpc[i - 1][j - 1] : 0) + 1);
                        }
                    }
                }
            }
            for (int i = 1; i < n; ++i) {
                for (int j = 0; j <= n; ++j) {
                    dpc[i][j] = max(dpc[i][j], dpc[i - 1][j]);
                }
            }
            
        }
        int q;
        in >> q;
        for (int t = 0; t < q; ++t) {
            int m;
            char c;
            in >> m >> c;
            
            int k = c - 'a';
            //for (int i = 0; i < n; ++i) {
            //    for (int j = 0; j <= n; ++j) {
            //        cout << dp[k][i][j] << " ";
            //    }
            //    cout << endl;
            //}
            //cout << endl;
            int res = dp[k][n - 1][m];
            //for (int i = 0; i < n; ++i) {
            //   res = max(res, dp[k][i][m]);
            //}
            out << res << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
