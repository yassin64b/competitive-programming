/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;
        vector<int> c(n);
        int sumc = 0;
        for (int i = 0; i < n; ++i) {
            in >> c[i];
            sumc += c[i];
        }
        vector<int> is_cap(n, 0);
        vector<int> caps(k);
        int sumcap = 0;
        for (int i = 0; i < k; ++i) {
            in >> caps[i];
            is_cap[caps[i]-1] = 1;
            sumcap += c[caps[i]-1];
        }
        
        long long res = 0;
        for (int i = 0; i < n; ++i) {
            if (is_cap[i]) {
                res += 1LL * (sumc - c[i]) * c[i];
            } else {
                res += (is_cap[(i-1 == -1 ? n-1 : i-1)] ? 0 : c[(i-1 == -1 ? n-1 : i-1)]) * c[i];
                res += (is_cap[(i+1)%n] ? 0 : c[(i+1)%n]) * c[i];
                res += 1LL * sumcap * c[i];
            }
            //cout << i+1 << " " << res << endl;
        }
        out << res/2 << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
