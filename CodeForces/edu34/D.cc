/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> a(n);
        for (int i = 0; i < n; ++i)
            in >> a[i];
        /*int n = 2 * 1000 * 100; //max test
        vector<int> a(n);
        for (int i = 0; i < 2 * 1000 * 100; ++i)
            a[i] = (i * 9 + 1) % (1000 * 1000 * 1000 + 1) ;
        out << n << "\n";
        for (int i = 0; i < n; ++i)
            out << a[i] << (i == n - 1 ? "\n" : " ");*/
        map<int, int> cnt;
        unsigned long long respos = 0, resneg = 0;
        long long sum = 0;
        for (int i = n - 1; i >= 0; --i) {
            long long diff = 0;
            diff += sum - 1LL * (n - i - 1) * a[i];
            diff -= cnt[a[i] - 1] * (-1) + cnt[a[i] + 1] * 1;
            sum += a[i];
            ++cnt[a[i]];
            if (diff < 0)
                resneg += -diff;
            else
                respos += diff;
        }
        if (resneg > respos)
            out << "-" << resneg - respos << "\n";
        else
            out << respos - resneg << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
