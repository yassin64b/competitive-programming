/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<int> p(n), a(n), b(n);
        for (int i = 0; i < n; ++i) {
            in >> p[i];
        }
        for (int i = 0; i < n; ++i) {
            in >> a[i];
        }
        for (int i = 0; i < n; ++i) {
            in >> b[i];
        }
        
        vector<priority_queue<pair<int, int>>> vpq(4);
        for (int i = 0; i < n; ++i) {
            pair<int, int> pp{-p[i], i};
            vpq[a[i]].push(pp);
            vpq[b[i]].push(pp);
        }
        
        int m;
        in >> m;
        vector<int> taken(n, 0);
        for (int i = 0; i < m; ++i) {
            int c;
            in >> c;
            pair<int, int> res{-1, -1};
            while (!vpq[c].empty() && (res.second == -1 || taken[res.second])) {
                res = vpq[c].top();
                vpq[c].pop();
            }
            if (res.second == -1 || taken[res.second]) {
                out << -1 << " ";
            } else {
                taken[res.second] = 1;
                out << -res.first << " ";
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
