/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <deque>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        string sx, ty;
        in >> sx >> ty;
        int n = sx.size();
        
        //sort(s.begin(), s.end());
        //sort(t.begin(), t.end());
        
        multiset<char> ss(sx.begin(), sx.end()), st(ty.begin(), ty.end());
        //int send = 0, sbegin = 1, tend = 2, tbegin = 3;
        
        vector<int> turn(n, -1);
        vector<char> v1, v2;
        int i = 0, j = n-1;
        for (int k = 0; k < n; ++k) {
            if (k % 2 == 0) {
                char mn = *ss.begin();
                if (mn >= *st.rbegin()) {
                    turn[j--] = 0;
                } else {
                    turn[i++] = 0;
                }
                v1.push_back(mn);
                ss.erase(ss.begin());
            } else {
                char mx = *st.rbegin();
                if (mx <= *ss.begin()) {
                    turn[j--] = 1;
                } else {
                    turn[i++] = 1;
                }
                v2.push_back(mx);
                st.erase(--st.end());
            }
        }
        sort(v1.begin(), v1.end());
        sort(v2.begin(), v2.end(), greater<char>());
        int a = 0, b = 0;
        string res(n, '?');
        for (int k = 0; k < n; ++k) {
            if (!turn[k]) {
                res[k] = v1[a++];
            } else {
                res[k] = v2[b++];
            }
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
