/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <cmath>

using namespace std;

const double PI = 3.141592653589793238462643383279502884;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n, h;
        in >> n >> h;
        
        double alpha = atan(h / 0.5);
        double C = PI - 2 * alpha;
        double low = 0., high = 1e18, ans = 0.;
        for (int i = 0; i <= 1000; ++i) {
            double a = (low + high) / 2;
            double prev = 0., curh = 0., curb;
            for (int j = 0; j < n; ++j) {
                curb = sqrt(2. * (a + prev) / sin(C));
                curh = (a + prev) * 2. / curb;
                prev += a;
            }
            if (curh <= h) {
                //cout << a << " possible " << endl;
                ans = a;
                low = a;
            } else {
                //cout << a << " impossible " << endl;
                high = a;
            }
        }
        
        out.precision(17);
        double curb, curh, a = ans, prev = 0.;
        for (int j = 0; j < n-1; ++j) {
            curb = sqrt(2. * (a + prev) / sin(C));
            curh = (a + prev) * 2. / curb;
            prev += a;
            out << fixed << curh << " ";
        }
        
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
