/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        string a, b;
        in >> a >> b;
        multiset<char> s(a.begin(), a.end());
        long long ans = 0;
        if (s == multiset<char>(b.begin(), b.end())) {
            ans = stoll(b);
        }
        int n = a.size(), m = b.size();
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (a[j] < b[i] || m > n) {
                    string res(n, '0');
                    //cout << "fix " << i << " " << a[j] << ": ";
                    multiset<char> sa = s;
                    res[i] = a[j];
                    sa.erase(sa.find(a[j]));
                    bool ok1 = true;
                    for (int k = 0; ok1 && k < i; ++k) {
                        ok1 = false;
                        for (auto it = sa.rbegin(); it != sa.rend(); ++it) {
                            char c = *it;
                            if (c <= b[k] || m > n) {
                                res[k] = c;
                                sa.erase(sa.find(c));
                                ok1 = true;
                                break;
                            }
                        }
                    }
                    bool ok2 = true;
                    for (int k = i + 1; ok2 && k < n; ++k) {
                        ok2 = false;
                        for (auto it = sa.rbegin(); it != sa.rend(); ++it) {
                            char c = *it;
                            res[k] = c;
                            sa.erase(sa.find(c));
                            ok2 = true;
                            break;
                        }
                    }
                    //cout << res << endl;
                    if (ok1 && ok2 && res[0] != '0') {
                        ans = max(ans, stoll(res));
                    }
                }
            }
        }
        out << ans << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
