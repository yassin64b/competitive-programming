/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>

using namespace std;

constexpr char U = 'U', D = 'D', L = 'L', R = 'R';

int dirx[] = {1, -1, 0, 0};
int diry[] = {0, 0, 1, -1};

class TaskD {
private:
    int n, m;
    map<pair<int, int>, char> dir;
    vector<char> query;
    
    bool valid(int x, int y) {
        return (x >= 0 && x < n && y >= 0 && y < m);
    }
    
    bool dfs(int x, int y, const vector<string>& grid, vector<vector<int>>& vis) {
        vis[x][y] = 1;
        if (grid[x][y] == 'F') {
            return true;
        }
        for (int i = 0; i < 4; ++i) {
            int nx = x + dirx[i], ny = y + diry[i];
            if (valid(nx, ny) && grid[nx][ny] != '*' && !vis[nx][ny]) {
                bool found = dfs(nx, ny, grid, vis);
                if (found) {
                    query.push_back(dir[{dirx[i], diry[i]}]);
                    return true;
                }
            }
        }
        return false;
    }
public:
    void solve(istream& in, ostream& out) {
        cin >> n >> m;
        vector<string> grid(n);
        for (int i = 0; i < n; ++i) {
            cin >> grid[i];
        }
    
        int x, y;
        if (m > 1 && grid[0][1] != '*') {
            cout << L << endl;
            cin >> x >> y;
            --x; --y;
            if (grid[x][y] == 'F') {
                return;
            }
            //assert(x == 0);
            if (y == 1) {
                dir[{0, 1}] = L;
                dir[{0, -1}] = R;
            } else {
                //assert(y == 0);
                dir[{0, 1}] = R;
                dir[{0, -1}] = L;
            }
            bool found = false, finish = false;
            for (int j = y; j < m && grid[0][j] != '*'; ++j) {
                if (n > 1) {
                    if (grid[1][j] != '*') {
                        found = true;
                    }
                }
                if (grid[0][j] == 'F') {
                    finish = true;
                }
            }
            if (!found && !finish) {
                //assert(y == 1);
                //assert(n > 1);
                //assert(grid[1][0] != '*');
                cout << dir[{0, -1}] << endl;
                cin >> x >> y;
                --x; --y;
                
                cout << U << endl;
                cin >> x >> y;
                --x; --y;
                if (grid[x][y] == 'F') {
                    return;
                }
                if (x == 1) {
                    dir[{1, 0}] = U;
                    dir[{-1, 0}] = D;
                } else {
                    //assert(x == 0);
                    dir[{1, 0}] = D;
                    dir[{-1, 0}] = U;
                }
            } else {
                for (int j = y; j < m; ++j) {
                    if (n > 1 && grid[1][j] != '*') {
                        cout << U << endl;
                        cin >> x >> y;
                        --x; --y;
                        if (grid[x][y] == 'F') {
                            return;
                        }
                        //assert(y == j);
                        if (x == 1) {
                            dir[{1, 0}] = U;
                            dir[{-1, 0}] = D;
                        } else {
                            //assert(x == 0);
                            dir[{1, 0}] = D;
                            dir[{-1, 0}] = U;
                        }
                        break;
                    } else {
                        cout << dir[{0, 1}] << endl;
                        cin >> x >> y;
                        --x; --y;
                        if (grid[x][y] == 'F') {
                            return;
                        }
                        //assert(x == 0);
                    }
                }
            }
            
        } else {
            //assert(n > 1);
            //assert(grid[1][0] != '*');
            cout << U << endl;
            cin >> x >> y;
            --x; --y;
            if (grid[x][y] == 'F') {
                return;
            }
            //assert(y == 0);
            if (x == 1) {
                dir[{1, 0}] = U;
                dir[{-1, 0}] = D;
            } else {
                //assert(x == 0);
                dir[{1, 0}] = D;
                dir[{-1, 0}] = U;
            }
            
            for (int i = x; i < n; ++i) {
                if (m > 1 && grid[i][1] != '*') {
                    cout << L << endl;
                    cin >> x >> y;
                    --x; --y;
                    if (grid[x][y] == 'F') {
                        return;
                    }
                    //assert(x == 0);
                    if (y == 1) {
                        dir[{0, 1}] = L;
                        dir[{0, -1}] = R;
                    } else {
                        //assert(y == 0);
                        dir[{0, 1}] = R;
                        dir[{0, -1}] = L;
                    }
                    break;
                } else {
                    cout << dir[{1, 0}] << endl;
                    cin >> x >> y;
                    --x; --y;
                    if (grid[x][y] == 'F') {
                        return;
                    }
                    //assert(y == 0);
                }
            }
            
        }
        
        vector<vector<int>> vis(n, vector<int>(m, 0));
        (void)dfs(x, y, grid, vis);
        reverse(query.begin(), query.end());
        for (char c : query) {
            cout << c << endl;
            cin >> x >> y;
        }
        --x; --y;
        //assert(grid[x][y] == 'F');
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
