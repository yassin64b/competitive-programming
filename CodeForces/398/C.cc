/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;


class TaskC {
private:
    void dfs(int u, const vector<vector<int>> &g, vector<int> &sum, vector<int> &L) {
        for (int i = 0; i < (int)g[u].size(); ++i) {
            int v = g[u][i];
            L[v] = L[u]+1;
            dfs(v, g, sum, L);
            sum[u] += sum[v];
        }
    }
    
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        
        int root = -1;
        vector<int> t(n);
        vector<int> T(n);
        vector<vector<int>> g(n);
        for (int i = 0; i < n; ++i) {
            int a;
            in >> a >> t[i];
            if (a == 0) {
                root = i;
                T[i] = -1;
            } else {
                T[i] = a-1;
                g[a-1].push_back(i);
            }
        }
        
        int log;
        for (log = 1; 1 << log <= n; log++);
        vector<int> L(n);
        vector<vector<int>> P(n, vector<int>(log));
        vector<int> sum(t);
        L[root] = 0;
        dfs(root, g, sum, L);
        
        /*for (int i = 0; i < n; ++i) {
            cout << sum[i] << " ";
        }
        cout << endl;*/
    
        int fullsum = sum[root];
        if (fullsum % 3) {
            out << "-1\n";
            return;
        }
        int sum1 = fullsum / 3, sum2 = 2 * fullsum / 3;
        
        int i1 = -1, d1 = 0;
        for (int i = 0; i < n; ++i) {
            if (i == root) continue;
            if (sum[i] == sum1) {
                if (i1 == -1 || L[i] >= d1) {
                    i1 = i;
                    d1 = L[i];
                }
            }
        }
        
        if (i1 == -1) {
            out << "-1\n";
            return;
        }
        
        vector<int> ancestor(n, false);
        for (int i = i1; i != root; i = T[i]) {
            ancestor[T[i]] = true;
        }
        
        for (int i = 0; i < n; ++i) {
            if (i == i1 || i == root) continue;
            
            
            if (sum[i] == sum1 && !ancestor[i]) {
                out << i+1 << " " << i1+1 << "\n";
                return;
            } else if (sum[i] == sum2 && ancestor[i]) {
                out << i+1 << " " <<  i1+1 << "\n";
                return;
            }
        }
        
        out << "-1\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
