/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        long long ts, tf, t;
        int n;
        in >> ts >> tf >> t >> n;
        vector<long long> v(n);
        for (int i = 0; i < n; ++i) {
            in >> v[i];
        }
        
        long long curt = ts;
        long long mn = 1000*1000*1000LL*1000+1;
        long long time = -1;
        if (n == 0) {
            time = ts;
        }
        for (int i = 0; curt <= tf && i < n; ++i) {
            if (v[i] < curt) {
                if (v[i]-1 >= 0 && curt + t <= tf && curt - (v[i] - 1) < mn) {
                    mn = curt - (v[i] - 1);
                    time = v[i] - 1;
                }
                curt += t;
            } else if (v[i] == curt) {
                if (v[i]-1 >= 0 && curt + t <= tf && curt - (v[i] - 1) < mn) {
                    mn = curt - (v[i] - 1);
                    time = v[i] - 1;
                }
                curt = v[i] + t;
            } else if (v[i] > curt){
                if (curt + t <= tf &&  0 < mn) {
                    mn = 0;
                    time = curt;
                }
                curt = v[i] + t;
            }
            //cout << "serve " << v[i] << " until " << curt << endl;
            //cout << mn << " by coming at " << time << endl;
        }
        if (curt + t <= tf) {
            if (0 < mn) {
                mn = 0;
                time = curt;
            }
        }
        
        out << time << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
