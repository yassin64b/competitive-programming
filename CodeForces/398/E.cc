/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskE {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<int> c(n), w(n);
        for (int i = 0; i < n; ++i) {
            in >> c[i];
        }
        for (int i = 0; i < n; ++i) {
            in >> w[i];
        }
        
        long long dissatisfaction = 0;
        priority_queue<pair<int,int>> pq;
        vector<int> pay(n, 0);
        for (int i = 0; i < n; ++i) {
            //pay with exact amount
            int coins = c[i] % 100;
            int change = 100 - (c[i] % 100);
            if (m < coins) {
                if (pq.size() == 0) {
                    dissatisfaction += change * w[i];
                    pay[i] = 1;
                    m += change;
                } else {
                    pair<int, int> p = pq.top();
                    p.first *= -1;
    
                    if (p.first < change * w[i]) {
                        pq.pop();
                        dissatisfaction += p.first;
                        pay[p.second] = 1;
                        //m += c[p.second];
                        //m += 100 - (c[p.second] % 100);
                        m += 100;
                        m -= coins;
                        
                        pq.push(make_pair(-change * w[i], i));
                    } else {
                        dissatisfaction += change * w[i];
                        pay[i] = 1;
                        m += change;
                    }
                }
            } else {
                m -= coins;
                if (coins != 0) {
                    pq.push(make_pair(-change * w[i], i));
                }
            }

        }
        
        out << dissatisfaction << "\n";
        for (int i = 0; i < n; ++i) {
            int notes = c[i] / 100;
            if (pay[i]) {
                out << notes+1 << " 0\n";
            } else {
                out << notes << " " << c[i] % 100 << "\n";
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskE solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
