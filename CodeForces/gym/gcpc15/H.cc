/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class gcpc15_H {
private:
    void dfs(int u, const vector<vector<int>> &g, vector<int> &vis) {
        vis[u] = 1;
        for (int i = 0; i < (int)g[u].size(); ++i) {
            int v = g[u][i];
            if (!vis[v]) {
                dfs(v, g, vis);
            }
        }
    }
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        map<string,int> id;
        vector<int> entrypoint;
        vector<vector<string>> save(N);
        for (int i = 0; i < N; ++i) {
            string name;
            int k;
            in >> name >> k;
            id[name] = i;
            if (name.size() >= 9 && name.substr((int)name.size()-9) == "::PROGRAM") {
                entrypoint.push_back(i);
            }
            save[i].resize(k);
            for (int j = 0; j < k; ++j) {
                in >> save[i][j];
            }
        }
        vector<vector<int>> g(N);
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < (int)save[i].size(); ++j) {
                g[id[save[i][j]]].push_back(i);
                //cout << save[i][j] << " -> " << i << endl;
            }
        }
        
        vector<int> vis(N, 0);
        for (int x : entrypoint) {
            if (!vis[x]) {
                dfs(x, g, vis);
            }
        }
        int cnt = 0;
        for (int i = 0; i < N; ++i) {
            cnt += vis[i] == 0;
        }
        out << cnt << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    gcpc15_H solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
