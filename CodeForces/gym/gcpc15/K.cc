/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class gcpc15_K {
private:
    bool isPrime(long long x) {
        if (x < 2) return false;
        if (x == 2) return true;
        if (x % 2 == 0) return false;
        for (long long i = 3; i*i <= x; i += 2) {
            if (x % i == 0) return false;
        }
        return true;
    }
public:
    void solve(istream& in, ostream& out) {
        long long N;
        in >> N;
        
        if (isPrime(N)) {
            string tmp(to_string(N)), revtmp;
            for (int i = (int)tmp.size()-1; i >= 0; --i) {
                bool flag = true;
                switch (tmp[i]) {
                    case '0': case '1': case '2': case '5': case '8':
                        revtmp += tmp[i];
                        break;
                    case '6':
                        revtmp += '9';
                        break;
                    case '9':
                        revtmp += '6';
                        break;
                    default:
                        flag = false;
                        break;
                }
                if (!flag) {
                    out << "no\n";
                    return;
                }
            }
            long long revN = stoll(revtmp);
            //cout << revN << endl;
    
            if (isPrime(revN)) {
                out << "yes\n";
                return;
            }
        }
        out << "no\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    gcpc15_K solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
