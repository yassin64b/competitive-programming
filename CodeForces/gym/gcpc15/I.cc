/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class gcpc15_I {
public:
    void solve(istream& in, ostream& out) {
        int W, S, X, Y;
        in >> W >> S >> X >> Y;
        vector<vector<int>> v(W, vector<int>(X));
        for (int i = 0; i < W; ++i) {
            for (int j = 0; j < X; ++j) {
                in >> v[i][j];
            }
        }
        vector<int> cutoff(X, 0);
        for (int i = 0; i < S; ++i) {
            for (int j = 0; j < X; ++j) {
                int tmp;
                in >> tmp;
                cutoff[j] = max(cutoff[j], tmp);
            }
        }
        
        for (int i = 0; i < W; ++i) {
            for (int j = 0; j < X; ++j) {
                out << min(v[i][j], Y - cutoff[j]) << (j == X-1 ? "\n" : " ");
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    gcpc15_I solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
