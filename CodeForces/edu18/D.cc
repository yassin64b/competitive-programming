/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        long long n;
        int q;
        in >> n >> q;
        for (int t = 0; t < q; ++t) {
            long long u;
            string s, mv;
            in >> u >> s;
            
            long long cur = (n+1) / 2, diff = cur / 2;
            while (cur != u) {
                if (cur > u) {
                    mv += 'L';
                    cur -= diff;
                } else {
                    mv += 'R';
                    cur += diff;
                }
                diff /= 2;
            }
            
            for (int i = 0; i < (int)s.size(); ++i) {
                if (s[i] == 'L') {
                    if (cur % 2 == 0) {
                        mv += 'L';
                        cur -= diff;
                        diff /= 2;
                    }
                } else if (s[i] == 'R') {
                    if (cur % 2 == 0) {
                        mv += 'R';
                        cur += diff;
                        diff /= 2;
                    }
                } else {
                    if (mv.size() && mv.back() == 'L') {
                        if (diff) {
                            diff *= 2;
                        } else {
                            diff = 1;
                        }
                        cur += diff;
                        mv.pop_back();
                    } else if (mv.size() && mv.back() == 'R') {
                        if (diff) {
                            diff *= 2;
                        } else {
                            diff = 1;
                        }
                        cur -= diff;
                        mv.pop_back();
                    }
                }
                //cout << cur << " ";
            }
            //cout << endl;
            out << cur << endl;
            
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
