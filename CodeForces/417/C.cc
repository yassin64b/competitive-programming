/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        long long n, S;
        in >> n >> S;
        vector<pair<int, int>> a(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i].first;
            a[i].second = i + 1;
        }
        
        long long low = 0, high = n, ans = 0;
        while (low <= high) {
            long long k = (low + high) / 2;
            sort(a.begin(), a.end(), [k](const pair<int, int>& lhs, const pair<int, int>& rhs) {
                return lhs.first + lhs.second * k < rhs.first + rhs.second * k;
            });
            /*cout << "for " << k << " the cost is: " << endl;
            for (int i = 0; i < n; ++i) {
                cout << a[i].first + a[i].second * k << " ";
            }
            cout << endl;*/
            long long sum = 0;
            int i;
            for (i = 0; i < n; ++i) {
                sum += a[i].first + a[i].second * k;
                if (sum > S) {
                    break;
                }
            }
            if (sum > S) {
                --i;
            }
            //cout << i << endl;
            if (i + 1 >= k) {
                //cout << "poss" << endl;
                ans = k;
                low = k + 1;
            } else {
                //cout << "imposs" << endl;
                high = k - 1;
            }
        }
        sort(a.begin(), a.end(), [ans](const pair<int, int>& lhs, const pair<int, int>& rhs) {
            return lhs.first + lhs.second * ans < rhs.first + rhs.second * ans;
        });
        long long sum = 0;
        for (int i = 0; i < ans; ++i) {
            if (sum + a[i].first + a[i].second * ans <= S) {
                sum += a[i].first + a[i].second * ans;
            }
        }
        out << ans << " " << sum << "\n";
        
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
