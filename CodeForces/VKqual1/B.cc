/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        --n;
        vector<pair<int,int>> a(n);
        int first;
        in >> first;
        for (int i = 0; i < n; ++i) {
            in >> a[i].first;
            a[i].second = i+1;
        }
        vector<pair<int,int>> res;
        sort(a.begin(), a.end(), greater<pair<int,int>>());

        queue<pair<int,int>> nxt;
        int i;
        for (i = 0; i < n && i < first; ++i) {
            nxt.push(a[i]);
            res.push_back({1, a[i].second+1});
        }
        while (i < n && !nxt.empty()) {
            pair<int,int> cur = nxt.front();
            nxt.pop();
            int lim = i + cur.first;
            for (; i < n && i < lim; ++i) {
                nxt.push(a[i]);
                res.push_back({cur.second+1, a[i].second+1});
            }
        }
        if (i == n) {
            out << res.size() << "\n";
            for (int i = 0; i < (int)res.size(); ++i) {
                out << res[i].first << " " << res[i].second << "\n";
            }
        } else {
            out << "-1\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
