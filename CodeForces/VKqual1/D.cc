/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskD {
private:
    int n, k;
    vector<int> cnt;
    int backtrack(int val, int i, int free) const {
        if (i == 14) {
            return cnt[val] - (k == 0);
        }
        int res = 0;
        if (14-i > free) {
            res += backtrack(val, i+1, free);
        }
        if (free > 0) {
            res += backtrack(val ^ (1 << i), i+1, free-1);
        }
        return res;
    }
public:
    void solve(istream& in, ostream& out) {
        in >> n >> k;
        vector<int> a(n);
        cnt.assign((1 << 14) + 1, 0);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
            ++cnt[a[i]];
        }
        
        long long res = 0;
        for (int i = 0; i <= 10000; ++i) {
            res += cnt[i] * (long long)backtrack(i, 0, k);
        }
        out << res/2 << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
