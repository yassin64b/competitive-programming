/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        vector<vector<int>> table(n, vector<int>(m));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                in >> table[i][j];
            }
        }
        long long res = 0;
        for (int i = 0; i < n; ++i) {
            int num_one = 0;
            for (int j = 0; j < m; ++j) {
                num_one += table[i][j];
            }
            res += (1LL << num_one) - 1;
            res += (1LL << (m - num_one)) - 1;
        }
        for (int j = 0; j < m; ++j) {
            int num_one = 0;
            for (int i = 0; i < n; ++i) {
                num_one += table[i][j];
            }
            res += (1LL << num_one) - 1;
            res += (1LL << (n - num_one)) - 1;
        }
        res -= n * m;
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
