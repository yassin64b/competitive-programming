/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>
#include <random>
#include <chrono>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n, start, x;
        in >> n >> start >> x;
    
        auto now = chrono::system_clock::now();
        auto now_ms = chrono::time_point_cast<chrono::milliseconds>(now);
        auto epoch = now_ms.time_since_epoch();
        auto value = chrono::duration_cast<chrono::milliseconds>(epoch);
        mt19937 gen(value.count());
        uniform_int_distribution<int> dis(1, n);
        
        cout << "? " << start << "\n";
        cout.flush();
        int best_val, best_nxt;
        cin >> best_val >> best_nxt;
        
        for (int j = 0; j < 999; ++j) {
            int i = dis(gen);
            cout << "? " << i << "\n";
            cout.flush();
            int val, nxt;
            cin >> val >> nxt;
            if (val <= x && val > best_val) {
                best_val = val;
                best_nxt = nxt;
            }
        }
        
        for (int j = 0; j < 999 && best_nxt != -1 && best_val < x; ++j) {
            cout << "? " << best_nxt << "\n";
            cout.flush();
            cin >> best_val >> best_nxt;
        }
    
        if (best_val >= x) {
            cout << "! " << best_val << "\n";
            cout.flush();
        } else {
            cout << "! " << -1 << "\n";
            cout.flush();
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
