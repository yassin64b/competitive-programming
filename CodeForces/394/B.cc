/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n, L;
        in >> n >> L;
        
        vector<int> kefa(n), sasha(n);
        for (int i = 0; i < n; ++i) {
            in >> kefa[i];
        }
        for (int i = 0; i < n; ++i) {
            in >> sasha[i];
        }
        
        for (int offset = 0; offset < n; ++offset) {
            bool flag = true;
            int diff = (sasha[0+offset] - kefa[0] + L) % L;
            //cout << offset << ": " << diff << endl;
            for (int i = 0; i < n; ++i) {
                //cout << sasha[(i+offset)%n] - kefa[i] << endl;
                if ((sasha[(i+offset)%n] - kefa[i] + L) % L != diff) {
                    flag = false;
                }
            }
            if (flag) {
                out << "YES" << endl;
                return;
            }
        }
        out << "NO" << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
