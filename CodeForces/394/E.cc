/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

constexpr long long MX = 2e18;
constexpr int dx[4]{0, 1, 0, -1};
constexpr int dy[4]{-1, 0, 1, 0};

class E394 {
private:
    bool dfs(int u, long long x, long long y, long long len, int skip,
             const vector<vector<int>> &g, vector<pair<long long,long long>> &coord) {
        if (g[u].size() > 4) {
            return false;
        }
        coord[u] = make_pair(x, y);
        int j = 0;
        for (int i = 0; i < (int)g[u].size(); ++i) {
            if (j == skip) ++j;
            int v = g[u][i];
            if (coord[v] == make_pair(MX, MX)) {
                if (!dfs(v, x+len*dx[j], y+len*dy[j], len/2, (j+2)%4, g, coord)) {
                    return false;
                }
                ++j;
            }
        }
        return true;
    }
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        
        vector<vector<int>> g(n);
        for (int i = 0; i < n-1; ++i) {
            int u, v;
            in >> u >> v;
            g[u-1].push_back(v-1);
            g[v-1].push_back(u-1);
        }
        
        vector<pair<long long,long long>> coord(n, make_pair(MX, MX));
        if (!dfs(0, 0, 0, MX/4, -1, g, coord)) {
            out << "NO\n";
        } else {
            out << "YES\n";
            for (int i = 0; i < n; ++i) {
                out << coord[i].first << " " << coord[i].second << "\n";
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    E394 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
