/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n, m;
        in >> n >> m;
        
        vector<string> strings(n);
        for (int i = 0; i < n; ++i) {
            in >> strings[i];
        }
        
        int res = 150;
        for (int digit = 0; digit < n; ++digit) {
            for (int latin = 0; latin < n; ++latin) {
                if (latin == digit) continue;
                for (int symbol = 0; symbol < n; ++symbol) {
                    if (symbol == latin || symbol == digit) continue;
                    
                    int cur = 0, dist = 50;
                    for (int i = 0; i < m; ++i) {
                        if (isdigit(strings[digit][i])) {
                            dist = min(dist, min(i, m-i));
                        }
                    }
                    cur += dist;
                    dist = 50;
                    for (int i = 0; i < m; ++i) {
                        if (isalpha(strings[latin][i])) {
                            dist = min(dist, min(i, m-i));
                        }
                    }
                    cur += dist;
                    dist = 50;
                    for (int i = 0; i < m; ++i) {
                        if (string("#*&").find(strings[symbol][i]) != string::npos) {
                            dist = min(dist, min(i, m-i));
                        }
                    }
                    cur += dist;
                    
                    //cout << digit << " " << latin << " " << symbol << " -> " << cur << endl;
                    res = min(res, cur);
                }
            }
        }
        out << res << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
