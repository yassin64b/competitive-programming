/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n, l, r;
        in >> n >> l >> r;
        
        vector<tuple<int, int, int>> v(n);
        vector<int> a(n), p(n);
        for (int i = 0; i < n; ++i) {
            in >> a[i];
            get<1>(v[i]) = a[i];
        }
        for (int i = 0; i < n; ++i) {
            in >> p[i];
            get<0>(v[i]) = p[i];
            get<2>(v[i]) = i;
        }
        sort(v.begin(), v.end());
        
        int mn = -2e9;
        vector<int> b(n);
        for (int i = 0; i < n; ++i) {
            int ind = get<2>(v[i]), aa = get<1>(v[i]);
            //cout << get<0>(v[i]) << " " << aa << " " << ind << endl;
            
            int need = max(mn + aa, l);
            if (need > r) {
                out << -1 << endl;
                return;
            }
            b[ind] = need;
            mn = need - aa + 1;
        }
        for (int i = 0; i < n; ++i) {
            out << b[i] << " ";
        }
        out << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
