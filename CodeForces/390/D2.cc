/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskD {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;
        
        vector<tuple<int,int,int>> v(n);
        for (int i = 0; i < n; ++i) {
            in >> get<0>(v[i]) >> get<1>(v[i]);
            get<2>(v[i]) = i;
        }
        sort(v.begin(), v.end());
        
        set<pair<int,int>> kbiggest;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            while(!kbiggest.empty() && kbiggest.begin()->first < get<0>(v[i])) {
                kbiggest.erase(kbiggest.begin());
            }
            
            kbiggest.insert({get<1>(v[i]), get<2>(v[i])});
            
            if (kbiggest.size() >= (size_t)k) {
                if (kbiggest.begin()->first - get<0>(v[i]) + 1 > ans) {
                    ans = kbiggest.begin()->first - get<0>(v[i]) + 1;
                }
                
                kbiggest.erase(kbiggest.begin());
            }
        }
        
        out << ans << endl;
        if (ans == 0) {
            for (int i = 0; i < k; ++i) {
                out << i+1 << " ";
            }
        } else {
            kbiggest.clear();
            for (int i = 0; i < n; ++i) {
                while(!kbiggest.empty() && kbiggest.begin()->first < get<0>(v[i])) {
                    kbiggest.erase(kbiggest.begin());
                }
        
                kbiggest.insert({get<1>(v[i]), get<2>(v[i])});
        
                if (kbiggest.size() >= (size_t)k) {
                    if (kbiggest.begin()->first - get<0>(v[i]) + 1 == ans) {
                        for (const pair<int,int> &p : kbiggest) {
                            out << p.second+1 << " ";
                        }
                        return;
                    }
            
                    kbiggest.erase(kbiggest.begin());
                }
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
