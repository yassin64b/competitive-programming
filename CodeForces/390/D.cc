/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class TaskD {
private:
    pair<int64_t,int64_t> check(int64_t len, vector<pair<int,int>> &v) {
        vector<pair<int64_t,int64_t>> evqueue;
        for (size_t i = 0; i < v.size(); ++i) {
            if (v[i].second - len > v[i].first) {
                evqueue.push_back({v[i].second - len, -1});
                evqueue.push_back({v[i].first, 1});
            }
        }
        sort(evqueue.begin(), evqueue.end());
    
        int64_t cnt = 0, mxcnt = 0, pos = 0;
        for (size_t i = 0; i < evqueue.size(); ) {
            cnt += evqueue[i].second;
            size_t j = i+1;
            while (j < evqueue.size() && evqueue[i].first == evqueue[j].first) {
                cnt += evqueue[j].second;
                ++j;
            }
            if (cnt > mxcnt) {
                mxcnt = cnt;
                pos = evqueue[i].first;
            }
            i = j;
        }
        
        return {mxcnt, pos};
    }
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;
        
        vector<pair<int,int>> v(n);
        for (int i = 0; i < n; ++i) {
            in >> v[i].first >> v[i].second;
            v[i].second += 2;
        }
        
        int64_t lo = 0, hi = 2e9+5;
        while (lo + 1 < hi) {
            int64_t mid = (hi + lo) / 2;
            //int mid = lo + (hi - lo) / 2;
            
            int isok = check(mid, v).first;
            if (isok >= k) {
                lo = mid;
            } else {
                hi = mid;
            }
            //cout << lo << " " << hi << endl;
        }
        
        pair<int64_t,int64_t> res = check(lo, v);
        vector<int> ans;
        
        if (lo == 0) {
            for (int i = 0; i < n; ++i) {
                ans.push_back(i+1);
            }
        } else {
            //int mn = 2e9 + 3, mx = -2e9;
            for (int i = 0; i < n; ++i) {
                if (v[i].first <= res.second && v[i].second - lo > res.second) {
                    ans.push_back(i+1);
                    //mn = min(mn, v[i].first);
                    //mx = max(mx, v[i].second);
                }
            }
        }
        if (ans.size() < (size_t)k) {
            out << "WTF" << endl;
            out << ans.size() << endl;
            out << res.first << " " << res.second << endl;
            out << lo << endl;
            return;
        }
        //assert(ans.size() >= (size_t)k);
        
        out << lo << endl;
        for (int i = 0; i < k; ++i) {
            out << ans[i] << " ";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    TaskD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
