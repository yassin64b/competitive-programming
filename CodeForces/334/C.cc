/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n;
        string s;
        in >> n >> s;
        vector<vector<int>> dp(n, vector<int>(6, 0));
        //dp[i][0] ending with 0
        //dp[1] ending with 1
        //[2] ending with flipped 0
        //[3] ending with flipped 1
        //[4] ending with 0 and flipped before
        //[5] ending with 1 and flipped before
        if (s[0] == '0') {
            dp[0][0] = dp[0][3] = 1;
        } else {
            dp[0][1] = dp[0][2] = 1;
        }
        for (int i = 1; i < n; ++i) {
            dp[i][0] = dp[i - 1][0];
            dp[i][1] = dp[i - 1][1];
            dp[i][4] = max(dp[i - 1][4], dp[i - 1][2]);
            dp[i][5] = max(dp[i - 1][5], dp[i - 1][3]);
            if (s[i] == '0') {
                dp[i][0] = max(dp[i][0], dp[i - 1][1] + 1);
                dp[i][3] = max(dp[i - 1][2] + 1, dp[i - 1][3]);
                dp[i][3] = max(dp[i][3], dp[i - 1][0] + 1);
                dp[i][4] = max(dp[i][4], max(dp[i - 1][5] + 1, dp[i - 1][3] + 1));
            } else {
                dp[i][1] = max(dp[i][1], dp[i - 1][0] + 1);
                dp[i][2] = max(dp[i - 1][3] + 1, dp[i - 1][2]);
                dp[i][2] = max(dp[i][2], dp[i - 1][1] + 1);
                dp[i][5] = max(dp[i][5], max(dp[i - 1][4] + 1, dp[i - 1][2] + 1));
            }
        }
        
        out << max(dp[n - 1][2], max(dp[n - 1][3], max(dp[n - 1][4], dp[n - 1][5]))) << "\n";
        
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
