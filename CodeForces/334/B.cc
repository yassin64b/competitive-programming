/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n, k;
        in >> n >> k;
        vector<int> s(n);
        for (int i = 0; i < n; ++i) {
            in >> s[i];
        }
        
        int low = s[n - 1], high = 2 * s[n - 1], ans = high;
        while (low <= high) {
            int mid = (low + high) / 2;
            multiset<int> boxes;
            for (int i = 0; i < k; ++i) {
                boxes.insert(mid);
            }
            bool poss = true;
            for (int i = n - 1; poss && i >= 0; --i) {
                auto it = boxes.lower_bound(s[i]);
                if (it == boxes.end()) {
                    poss = false;
                } else {
                    assert(*it >= s[i]);
                    int val = *it;
                    boxes.erase(it);
                    if (val == mid) {
                        boxes.insert(val - s[i]);
                    }
                }
            }
            if (poss) {
                high = mid - 1;
                ans = mid;
            } else {
                low = mid + 1;
            }
        }
        out << ans << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
