/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskB {
public:
    void solve(istream& in, ostream& out) {
        int n, a, b;
        in >> n >> a >> b;
        int numa = 4, numb = 2;
        int res = 0;
        while (numa || numb) {
            int best_n = 0, best_a = 0, best_b = 0;
            for (int cura = 0; cura <= numa; ++cura) {
                for (int curb = 0; curb <= numb; ++curb) {
                    if (cura * a + curb * b <= n && cura * a + curb * b > best_n) {
                        best_n = cura * a + curb * b;
                        best_a = cura;
                        best_b = curb;
                    }
                }
            }
            ++res;
            numa -= best_a;
            numb -= best_b;
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskB solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
