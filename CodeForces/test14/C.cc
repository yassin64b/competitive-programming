/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskC {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        vector<string> v(n);
        for (int i = 0; i < n; ++i)
            in >> v[i];
        for (int j = 0; j < 10; ++j) {
            int best_val = 0;
            char best_c = 0;
            for (char c = 'a'; c <= 'j'; ++c) {
                int cur_val = 0, ok = 1;
                for (int i = 0; i < n; ++i) {
                    for (int k = v[i].size() - 1, mult = 1; k >= 0; --k, mult *= 10) {
                        if (v[i][k] == c)
                            cur_val += 10 * mult;
                        if (j == 0 && k == 0 && v[i][k] == c)
                            ok = 0;
                    }
                }
                if (ok && cur_val >= best_val) {
                    best_val = cur_val;
                    best_c = c;
                }
            }
            //cout << best_c << " " << best_val << endl;
            for (int i = 0; i < n; ++i) {
                for (int k = 0; k < (int)v[i].size(); ++k) {
                    if (v[i][k] == best_c)
                        v[i][k] = j + '0';
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            res += stoi(v[i]);
            //cout << v[i] << endl;
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskC solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
