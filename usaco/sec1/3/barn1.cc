/*
ID: yassin.2
PROG: barn1
LANG: C++11
*/

/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin64b
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>

using namespace std;

class barn1 {
public:
    void solve(istream& in, ostream& out) {
        int M, S, C;
        in >> M >> S >> C;
        
        vector<int> occ(C);
        for (int i = 0; i < C; ++i) {
            in >> occ[i];
        }
        sort(occ.begin(), occ.end());

        
        int numboards = 0;
        //vector<pair<int,int>> board;
        vector<int> cov(S, 0);
        for (int i = 0; i < C; ) {
            int j = i, offset = 0;
            while (occ[j] == occ[i] + offset) {
                cov[occ[j]-1] = 1;
                ++offset;
                ++j;
            }
            i = j;
            ++numboards;
            //board.push_back({occ[i], offset});
            //out << occ[i] << " " << offset << endl;
        }
        
        while (numboards > M) {
            int ind = 0, mn = 1e9;
            for (int i = 0; i < S; ++i) {
                if (cov[i] == 0) {
                    continue;
                }
                int cnt = 0, j = i+1;
                while (j < S && cov[j] == 0) {
                    ++j;
                    ++cnt;
                }
                if (j == S) {
                    break;
                }
                if (cnt > 0 && cnt < mn) {
                    mn = cnt;
                    ind = i+1;
                }
            }
            //out << "fill: " << ind << " ";
            for (; ind < S && cov[ind] == 0; ++ind) {
                cov[ind] = 1;
            }
            //out << "to " << ind << endl;
            --numboards;
        }
        
        int res = 0;
        for (int i = 0; i < S; ++i) {
            res += cov[i] == 1;
            //out << cov[i];
        }
        //out << endl;
        out << res << endl;
        
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    barn1 solver;
    std::ifstream in("barn1.in");
    std::ofstream out("barn1.out");
    solver.solve(in, out);
    return 0;
}
