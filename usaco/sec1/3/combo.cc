/*
ID: yassin.2
PROG: combo
LANG: C++11
*/
/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pair<int,int>> vii;

class combo {
private:
    int possComb(const int comb[3], const int N, vector<vvi> &vis) {
        int cnt = 0;
        for (int i = comb[0]-2; i <= comb[0]+2; ++i) {
            int first = i;
            if (first <= 0 || first >= N) {
                first = (first % N + N) % N;
            }
            for (int j = comb[1]-2; j <= comb[1]+2; ++j) {
                int second = j;
                if (second <= 0 || second >= N) {
                    second = (second % N + N) % N;
                }
                for (int k = comb[2]-2; k <= comb[2]+2; ++k) {
                    int third = k;
                    if (third <= 0 || third >= N) {
                        third = (third % N + N) % N;
                    }
                    if (!vis[first][second][third]) {
                        ++cnt;
                        vis[first][second][third] = 1;
                        //cout << first << "," << second << "," << third << '\t';
                    }
                }
                //cout << endl;
            }
        }
        return cnt;
    }
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        
        int comb1[3], comb2[3];
        for (int i = 0; i < 3; ++i) {
            in >> comb1[i];
            --comb1[i];
        }
        for (int i = 0; i < 3; ++i) {
            in >> comb2[i];
            --comb2[i];
        }
        
        vector<vvi> vis(N, vvi(N, vi(N, 0)));
        int res = possComb(comb1, N, vis);
        res += possComb(comb2, N, vis);
        
        out << res << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    combo solver;
    std::ifstream in("combo.in");
    std::ofstream out("combo.out");
    solver.solve(in, out);
    return 0;
}