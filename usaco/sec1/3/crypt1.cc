/*
ID: yassin.2
PROG: crypt1
LANG: C++11
*/

/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class crypt1 {
private:
    bool check(int p, int numDigits, const set<int> &digits) {
        while (p) {
            if (digits.find(p % 10) == digits.end()) {
                return false;
            }
            --numDigits;
            p /= 10;
        }
        return numDigits == 0;
    }
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        
        vector<int> digits(N);
        for (int i = 0; i < N; ++i) {
            in >> digits[i];
        }
        set<int> digSet(digits.begin(), digits.end());
        
        int cnt = 0;
        for (int a = 0; a < N; ++a) {
            for (int b = 0; b < N; ++b) {
                for (int c = 0; c < N; ++c) {
                    for (int d = 0; d < N; ++d) {
                        for (int e = 0; e < N; ++e) {
                            int abc = digits[a] * 100 + digits[b] * 10 + digits[c];
                            int de = digits[d] * 10 + digits[e];
                            int p1 = abc * digits[e], p2 = abc * digits[d];
                            if (check(p1, 3, digSet) && check(p2, 3, digSet)
                                && check(p1 + p2 * 10, 4, digSet)) {
                                //out << abc << " " << de << endl;
                                //out << p1 << " " << p2 << endl;
                                //out << p1 + p2 * 10 << endl << endl;
                                ++cnt;
                            }
                        }
                    }
                }
            }
        }
        out << cnt << endl;
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    crypt1 solver;
    std::ifstream in("crypt1.in");
    std::ofstream out("crypt1.out");
    solver.solve(in, out);
    return 0;
}
