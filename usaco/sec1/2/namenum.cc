/*
ID: yassin.2
PROG: namenum
LANG: C++11
*/

/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin64b
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <fstream>

using namespace std;

class namenum {
private:
    const char keymap[8][3] = {{'A','B','C'}, {'D','E','F'}, {'G','H','I'},
        {'J','K','L'}, {'M','N','O'}, {'P','R','S'}, {'T','U','V'}, {'W','X','Y'}};
    
    set<string> names;
    
    set<string> backtrack(int i, string res, string brand) {
        set<string> ret;
        if (i == (int)brand.size()) {
            if (names.find(res) != names.end()) {
                ret.insert(res);
            }
        } else {
            for (int j = 0; j < 3; ++j) {
                set<string> tmp = backtrack(i + 1, res + keymap[brand[i]-'2'][j], brand);
                ret.insert(tmp.begin(), tmp.end());
            }
        }
        
        return ret;
    }
public:
    void solve(istream& in, ostream& out) {
        ifstream dict("dict.txt");
        if (!dict) {
            out << "failed!" << endl;
        }
        
        string tmp;
        while (dict >> tmp) {
            names.insert(tmp);
        }
        dict.close();
        
        string brand;
        in >> brand;
        
        set<string> res = backtrack(0, "", brand);
        for (const string &s : res) {
            out << s << endl;
        }
        if (res.size() == 0) {
            out << "NONE" << endl;
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    namenum solver;
    std::ifstream in("namenum.in");
    std::ofstream out("namenum.out");
    solver.solve(in, out);
    return 0;
}
