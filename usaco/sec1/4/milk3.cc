/*
ID: yassin.2
PROG: milk3
LANG: C++11
*/
/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class milk3 {
private:
    int A, B, C;
    bool vis[21][21][21]{};
    set<int> res;
    
    void dfs(int a, int b, int c) {
        if (vis[a][b][c]) {
            return;
        }
        vis[a][b][c] = 1;
        
        if (a == 0) {
            res.insert(c);
        }
        
        int diff;
        if (a > 0) {
            diff = min(C-c, a);
            dfs(a-diff, b, c+diff);
            diff = min(B-b, a);
            dfs(a-diff, b+diff, c);
        }
        if (b > 0) {
            diff = min(A-a, b);
            dfs(a+diff, b-diff, c);
            diff = min(C-c, b);
            dfs(a, b-diff, c+diff);
        }
        if (c > 0) {
            diff = min(A-a, c);
            dfs(a+diff, b, c-diff);
            diff = min(B-b, c);
            dfs(a, b+diff, c-diff);
        }
    }
    
public:
    void solve(istream& in, ostream& out) {
        in >> A >> B >> C;
            
        dfs(0, 0, C);
        int i = 0;
        for (const int &x : res) {
            out << x << (++i == (int)res.size() ? "" : " ");;
        }
        out << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    milk3 solver;
    std::ifstream in("milk3.in");
    std::ofstream out("milk3.out");
    solver.solve(in, out);
    return 0;
}
