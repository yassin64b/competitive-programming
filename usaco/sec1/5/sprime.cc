/*
ID: yassin.2
PROG: sprime
LANG: C++11
*/
/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class sprime {
private:
    int N;
    vector<int> res;
    vector<bool> prime;
    
    bool isPrime(int x) {
        if (x <= 1 || (x != 2 && x % 2 == 0)) {
            return false;
        }
        for (int i = 3; i*i <= x; i += 2) {
            if (x % i == 0) {
                return false;
            }
        }
        return true;
    }
    
    void dfs(int i, int n) {
        //cout << i << " ";
        if (n == N) {
            res.push_back(i);
            //cout << endl;
            return;
        }
        
        for (int j = 1; j < 10; ++j) {
            if (isPrime(i*10 + j)) {
                dfs(i*10 + j, n+1);
            }
        }
    }
    
public:
    void solve(istream& in, ostream& out) {
        in >> N;
        dfs(0, 0);
        
        sort(res.begin(), res.end());
        for (int i = 0; i < (int)res.size(); ++i) {
            out << res[i] << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    sprime solver;
    std::ifstream in("sprime.in");
    std::ofstream out("sprime.out");
    solver.solve(in, out);
    return 0;
}
