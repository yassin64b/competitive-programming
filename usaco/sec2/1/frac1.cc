/*
ID: yassin.2
PROG: frac1
LANG: C++11
*/
/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

struct fraction {
    int num;
    int den;
    
    fraction(int num, int den) : num(num), den(den) {}
};

bool operator<(const fraction& lhs, const fraction& rhs) {
    return lhs.num * rhs.den < rhs.num * lhs.den;
}

class frac1 {
public:
    void solve(istream& in, ostream& out) {
        int n;
        in >> n;
        set<fraction> v;
        for (int den = 1; den <= n; ++den) {
            for (int num = 0; num <= den; ++num) {
                v.insert(fraction(num, den));
            }
        }
        for (const fraction& f : v) {
            out << f.num << "/" << f.den << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    frac1 solver;
    std::ifstream in("frac1.in");
    std::ofstream out("frac1.out");
    solver.solve(in, out);
    return 0;
}
