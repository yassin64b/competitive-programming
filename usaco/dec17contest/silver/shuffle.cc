/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class Shuffle {
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        vector<int> a(N);
        for (int i = 0; i < N; ++i) {
            in >> a[i];
            --a[i];
        }
        int comp_id = 0, res = 0;
        vector<int> comp(N, 0);
        vector<int> num(N, 0);
        for (int i = 0; i < N; ++i) {
            if (comp[i] == 0) {
                int j = i, cur = 0;
                ++comp_id;
                while (comp[j] == 0) {
                    comp[j] = comp_id;
                    num[j] = cur++;
                    j = a[j];
                }
                if (comp[j] == comp_id)
                    res += cur - num[j];
            }
        }
        //for (int x : comp)
        //    cout << x << " ";
        //cout << endl;
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    Shuffle solver;
    std::ifstream in("shuffle.in");
    std::ofstream out("shuffle.out");
    solver.solve(in, out);
    return 0;
}
