/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr double eps = 1e-9;

class homework {
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        vector<int> scores(N);
        for (int i = 0; i < N; ++i)
            in >> scores[i];
        
        vector<int> ks;
        double sum = scores[N - 1];
        multiset<int> cur{scores[N - 1]};
        double mx = -1;
        
        for (int i = N - 2; i >= 1; --i) {
            sum += scores[i];
            cur.insert(scores[i]);
            int m = cur.size() - 1;
            double avg = (sum - *cur.begin()) / m;
            if (avg > mx + eps) {
                mx = avg;
                ks.clear();
                ks.push_back(i);
            } else if (abs(avg - mx) < eps) {
                ks.push_back(i);
            }
            //cout << i << " " << m << " " << sum << " " << avg << endl;
            //cout << eps << endl;
        }
        
        sort(ks.begin(), ks.end());
        for (int k : ks)
            out << k << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    homework solver;
    std::ifstream in("homework.in");
    std::ofstream out("homework.out");
    solver.solve(in, out);
    return 0;
}
