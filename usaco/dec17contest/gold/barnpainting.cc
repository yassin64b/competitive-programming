/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

constexpr int MOD = 1000 * 1000 * 1000 + 7;

class barnpainting {
private:
    void dfs(int u, const vector<vector<int>>& g, const map<int, int>& m,
            vector<vector<int>>& dp, vector<int>& vis) {
        vis[u] = 1;
        dp[u][0] = dp[u][1] = dp[u][2] = 1;
        for (int v : g[u]) {
            if (!vis[v]) {
                vis[v] = 1;
                dfs(v, g, m, dp, vis);
                for (int i = 0; i < 3; ++i) {
                    int sum = 0;
                    for (int j = 0; j < 3; ++j) {
                        if (i != j)
                            sum += dp[v][j];
                    }
                    dp[u][i] = (1LL * dp[u][i] * sum) % MOD;
                }
            }
        }
        if (m.find(u) != m.end()) {
            for (int i = 0; i < 3; ++i)
                if (m.at(u) != i) dp[u][i] = 0;
        }
        
        //cout << u << ": " << dp[u][0] << "," << dp[u][1] << "," << dp[u][2] << endl;
    }
public:
    void solve(istream& in, ostream& out) {
        int N, K;
        in >> N >> K;
        vector<vector<int>> g(N);
        for (int i = 0; i < N - 1; ++i) {
            int x, y;
            in >> x >> y;
            --x; --y;
            g[x].push_back(y);
            g[y].push_back(x);
        }
        map<int, int> m;
        for (int i = 0; i < K; ++i) {
            int b, c;
            in >> b >> c;
            --b; --c;
            m[b] = c;
        }
        vector<vector<int>> dp(N, vector<int>(3));
        vector<int> vis(N, 0);
        vis[0] = 1;
        dfs(0, g, m, dp, vis);
        out << ((dp[0][0] + dp[0][1]) % MOD + dp[0][2]) % MOD  << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    barnpainting solver;
    std::ifstream in("barnpainting.in");
    std::ofstream out("barnpainting.out");
    solver.solve(in, out);
    return 0;
}
