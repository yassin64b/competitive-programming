/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class measurement {
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        vector<tuple<int, string, int>> meas(N);
        for (int i = 0; i < N; ++i)
            in >> get<0>(meas[i]) >> get<1>(meas[i]) >> get<2>(meas[i]);
        sort(meas.begin(), meas.end());
        
        constexpr int def = 7;
        map<int, set<string>> valcow;
        map<string, int> cowval;
        for (int i = 0; i < N; ++i) {
            valcow[def].insert(get<1>(meas[i]));
            cowval[get<1>(meas[i])] = def;
        }
        
        int res = 0;
        for (int i = 0; i < N; ++i) {
            int day, change;
            string name;
            tie(day, name, change) = meas[i];
            
            set<string> mxs = valcow.rbegin()->second;
            
            valcow[cowval[name]].erase(name);
            if (valcow[cowval[name]].empty())
                valcow.erase(cowval[name]);
            
            cowval[name] += change;
            valcow[cowval[name]].insert(name);
            
            if (mxs != valcow.rbegin()->second)
                ++res;
        }
        out << res << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    measurement solver;
    std::ifstream in("measurement.in");
    std::ofstream out("measurement.out");
    solver.solve(in, out);
    return 0;
}
