/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <bits/stdc++.h>

using namespace std;
using i64 = long long;

class dirtraverse {
private:
    int num_leaves = 0;
    void dfs1(int u, const vector<vector<int>> &g, vector<i64> &d, vector<i64> &sz,
            const vector<string> &name)
    {
        if (g[u].empty()) {
            sz[u] = 1;
            d[u] = 0;
        }
        for (int v : g[u]) {
            dfs1(v, g, d, sz, name);
            int len = name[v].size(), leaf = !g[v].empty();
            d[u] += d[v] + sz[v] * (len + leaf);
            sz[u] += sz[v];
        }
    }
    void dfs2(int u, const vector<vector<int>> &g, const vector<i64> &d, int par,
            const vector<i64> &sz, vector<i64>& res, const vector<string> &name)
    {
        if (par != -1) {
            int len = name[u].size(), leaf = !g[u].empty();
            res[u] = res[par] + 3 * (num_leaves - sz[u]) - sz[u] * (len + leaf);
        } else {
            res[u] = d[u];
        }
        for (int v : g[u]) {
            dfs2(v, g, d, u, sz, res, name);
        }
    }
public:
    void solve(istream& in, ostream& out) {
        int N;
        in >> N;
        vector<vector<int>> g(N);
        vector<string> name(N);
        for (int i = 0; i < N; ++i) {
            int m;
            in >> name[i] >> m;
            num_leaves += (m == 0);
            for (int j = 0; j < m; ++j) {
                int v;
                in >> v;
                g[i].push_back(v - 1);
            }
        }
        vector<i64> d(N, 0), res(N, 0);
        vector<i64> sz(N, 0);
        dfs1(0, g, d, sz, name);
        dfs2(0, g, d, -1, sz, res, name);
        int id = 0;
        for (int u = 0; u < N; ++u) {
            if (res[u] < res[id]) {
                id = u;
            }
        }
        out << res[id] << "\n";
    }
};

int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    dirtraverse solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
