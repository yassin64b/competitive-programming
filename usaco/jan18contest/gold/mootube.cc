/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class UnionFind {
private:
    vector<int> p, rank, sz;
    int num_sets;
public:
    UnionFind(int N) {
        rank.assign(N, 0);
        p.assign(N, 0);
        sz.assign(N, 1);
        for (int i = 0; i < N; ++i) {
            p[i] = i;
        }
        num_sets = N;
    }
    int find_set(int i) {
        return (p[i] == i) ? i : (p[i] = find_set(p[i]));
    }
    bool is_same_set(int i, int j) {
        return find_set(i) == find_set(j);
    }
    void union_set(int i, int j) {
        if (!is_same_set(i, j)) {
            --num_sets;
            int x = find_set(i), y = find_set(j);
            if (rank[x] > rank[y]) {
                p[y] = x;
                sz[x] += sz[y];
            } else {
                p[x] = y;
                sz[y] += sz[x];
                if (rank[x] == rank[y]) {
                    rank[y]++;
                }
            }
        }
    }
    int num_disjoint_sets() {
        return num_sets;
    }
    int set_sz(int i) {
        int x = find_set(i);
        return sz[x];
    }
};

class mootube {
public:
    void solve(istream& in, ostream& out) {
        int N, Q;
        in >> N >> Q;
        vector<tuple<int, int, int>> edges(N - 1);
        for (int i = 0; i < N - 1; ++i) {
            in >> get<1>(edges[i]) >> get<2>(edges[i]) >> get<0>(edges[i]);
            --get<1>(edges[i]);
            --get<2>(edges[i]);
        }
        sort(edges.begin(), edges.end());
        reverse(edges.begin(), edges.end());
        vector<tuple<int, int, int>> queries(Q);
        for (int q = 0; q < Q; ++q) {
            in >> get<0>(queries[q]) >> get<1>(queries[q]);
            --get<1>(queries[q]);
            get<2>(queries[q]) = q;
        }
        sort(queries.begin(), queries.end());
        reverse(queries.begin(), queries.end());
        UnionFind uf(N);
        vector<int> res(Q);
        for (int q = 0, i = 0; q < Q; ++q) {
            while (i < N - 1 && get<0>(edges[i]) >= get<0>(queries[q])) {
                uf.union_set(get<1>(edges[i]), get<2>(edges[i]));
                ++i;
            }
            res[get<2>(queries[q])] = uf.set_sz(get<1>(queries[q]));
        }
        for (int q = 0; q < Q; ++q) {
            out << res[q] - 1 << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    mootube solver;
    std::ifstream in("mootube.in");
    std::ofstream out("mootube.out");
    solver.solve(in, out);
    return 0;
}
