/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class RAINBOW {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int n;
            in >> n;
            vector<vector<int>> c(n, vector<int>(n));
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < n; ++j) {
                    in >> c[i][j];
                }
            }
            
            vector<int> v(n);
            for (int i = 0; i < n; ++i) {
                v[i] = i;
            }
            
            bool flag = true;
            while (flag) {
                flag = false;
                for (auto it = v.begin(); it != v.end(); ++it) {
                    int i = *it;
                    set<int> cols;
                    for (int j : v) {
                        if (i == j) continue;
                        cols.insert(c[i][j]);
                    }
                    if (cols.size() < 2) {
                        v.erase(it);
                        flag = true;
                        break;
                    }
                }
            }
            out << v.size() << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    RAINBOW solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
