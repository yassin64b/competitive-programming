/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class ALMROW {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int N, K;
            in >> N >> K;
            vector<vector<int>> g(N);
            vector<vector<int>> dist(N, vector<int>(N, 1000*1000*1000));
            for (int i = 0; i < N-1; ++i) {
                g[i].push_back(i+1);
                g[i+1].push_back(i);
                dist[i][i+1] = dist[i+1][i] = 1;
            }
            for (int i = 0; i < K; ++i) {
                int a, b;
                in >> a >> b;
                g[a-1].push_back(b-1);
                g[b-1].push_back(a-1);
                dist[a-1][b-1] = dist[b-1][a-1] = 1;
            }
    
            for (int k = 0; k < N; k++) {
                for (int i = 0; i < N; i++) {
                    for (int j = 0; j < N; j++) {
                        if (dist[i][k] + dist[k][j] < dist[i][j]) {
                            dist[i][j] = dist[i][k] + dist[k][j];
                        }
                    }
                }
            }
            
            long long res = 0;
            for (int s = 0; s < N; ++s) {
                for (int t = s+1; t < N; ++t) {
                    res += dist[s][t];
                }
            }
            out << res << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    ALMROW solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
