/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class SAMESNAK {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int x[2][2], y[2][2];
            for (int i = 0; i < 2; ++i) {
                for (int j = 0; j < 2; ++j) {
                    in >> x[i][j] >> y[i][j];
                }
            }
            
            if (x[0][0] == x[0][1] && x[1][0] == x[1][1]) { //same row
                if (x[0][0] != x[1][0]) {
                    out << "no\n";
                } else if (max(y[0][0], y[0][1]) < min(y[1][0], y[1][1])
                        || min(y[0][0], y[0][1]) > max(y[1][0], y[1][1])) {
                    out << "no\n";
                } else {
                    out << "yes\n";
                }
            } else if (y[0][0] == y[0][1] && y[1][0] == y[1][1]) {
                if (y[0][0] != y[1][0]) {
                    out << "no\n";
                } else if (max(x[0][0], x[0][1]) < min(x[1][0], x[1][1])
                           || min(x[0][0], x[0][1]) > max(x[1][0], x[1][1])) {
                    out << "no\n";
                } else {
                    out << "yes\n";
                }
            } else {
                if ((x[0][0] == x[1][0] && y[0][0] == y[1][0])
                        || (x[0][1] == x[1][0] && y[0][1] == y[1][0])) {
                    out << "yes\n";
                } else if ((x[0][0] == x[1][1] && y[0][0] == y[1][1])
                           || (x[0][1] == x[1][1] && y[0][1] == y[1][1])) {
                    out << "yes\n";
                } else {
                    out << "no\n";
                }
            }
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    SAMESNAK solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
