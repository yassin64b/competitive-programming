/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class ROWSOLD {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            string s;
            in >> s;
            int n = s.size();
            vector<int> v(n);
            for (int i = 0; i < n; ++i) {
                v[i] = s[i] - '0';
            }
            
            int carry = 0;
            long long time = 0;
            for (int i = 0; i < n-1; ++i) {
                if (v[i]) {
                    if (v[i + 1]) {
                        ++carry;
                    } else {
                        int j = i+1;
                        while (j < n && !v[j]) {
                            ++j;
                        }
                        --j;
                        //out << "move " << i << " to " << j << " with " << carry << endl;
                        //move current soldier to j, and carry other soldiers behind
                        time += (j - i) + 1;
                        time += 1LL * carry * ((j - i) + 1);
                        ++carry;
                        i = j;
                    }
                }
            }
            out << time << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    ROWSOLD solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
