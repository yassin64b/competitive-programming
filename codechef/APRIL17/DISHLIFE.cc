/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class DISHLIFE {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int N, K;
            in >> N >> K;
            vector<vector<int>> ings(N);
            vector<int> cnt(K, 0);
            for (int i = 0; i < N; ++i) {
                int P;
                in >> P;
                ings[i].resize(P);
                for (int j = 0; j < P; ++j) {
                    in >> ings[i][j];
                    ++cnt[--ings[i][j]];
                }
            }
            bool flag = false;
            for (int i = 0; !flag && i < K; ++i) {
                if (cnt[i] == 0) {
                    out << "sad\n";
                    flag = true;
                }
            }
            if (flag) {
                continue;
            }
            
            for (int i = 0; !flag && i < N; ++i) {
                flag = true;
                for (int j = 0; flag && j < (int)ings[i].size(); ++j) {
                    flag = (cnt[ings[i][j]] > 1);
                }
            }
            out << (flag ? "some" : "all") << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    DISHLIFE solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class DISHLIFE {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int N, K;
            in >> N >> K;
            vector<vector<int>> ings(N);
            vector<int> cnt(K, 0);
            for (int i = 0; i < N; ++i) {
                int P;
                in >> P;
                ings[i].resize(P);
                for (int j = 0; j < P; ++j) {
                    in >> ings[i][j];
                    ++cnt[--ings[i][j]];
                }
            }
            bool flag = false;
            for (int i = 0; !flag && i < K; ++i) {
                if (cnt[i] == 0) {
                    out << "sad\n";
                    flag = true;
                }
            }
            if (flag) {
                continue;
            }
            
            for (int i = 0; !flag && i < N; ++i) {
                flag = true;
                for (int j = 0; flag && j < (int)ings[i].size(); ++j) {
                    flag = (cnt[ings[i][j]] > 1);
                }
            }
            out << (flag ? "some" : "all") << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    DISHLIFE solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
