/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <cassert>

using namespace std;

class XORPRO {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int N;
            in >> N;
            vector<unsigned long long> v(N);
            for (int i = 0; i < N; ++i) {
                in >> v[i];
            }
            
            vector<unsigned long long> sum(N);
            sum[0] = v[0];
            for (int i = 1; i < N; ++i) {
                sum[i] = sum[i-1] ^ v[i];
                //cout << sum[i] << " ";
            }
            //cout << endl;
    
            unsigned long long res = 10000ULL*1000*1000;
            for (int i = 0; i < N; ++i) {
                unsigned long long cur = sum[N-1] ^ v[i];
                unsigned long long dist;
                if (cur > v[i]) {
                    dist = cur - v[i];
                } else {
                    dist = v[i] - cur;
                }
                //cout << cur << " " << dist << endl;
                res = min(res, (unsigned long long)dist);
            }
            
            out << res << "\n";
        }
    }
};


int main() {
    std::ios::sync_with_stdio(false);

    XORPRO solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
