/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

using int64 = long long;

class year2018p3 {
public:
    void solve(istream& in, ostream& out) {
        int64 N, M, K;
        in >> N >> M >> K;
        vector<int64> h(N);
        for (int i = 0; i < N; ++i)
            in >> h[i];
        int64 low = *min_element(h.begin(), h.end()), ans = low;
        int64 high = *max_element(h.begin(), h.end()) + K + 1;
        while (low <= high) {
            int64 mid = (low + high) / 2;
            vector<int64> add(N, 0);
            int64 cur_add = 0, num_adds = 0;
            for (int i = 0; i < N; ++i) {
                cur_add += add[i];
                if (h[i] + cur_add < mid) {
                    int64 dist = mid - (h[i] + cur_add);
                    cur_add += dist;
                    num_adds += dist;
                    if (i + M < N)
                        add[i + M] -= dist;
                }
            }
            if (num_adds <= K) {
                ans = mid;
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        out << ans << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    year2018p3 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
