/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

class year2018p4 {
private:
    inline int sum_of_dig(long long x) {
        int res = 0;
        while (x) {
            res += x % 10;
            x /= 10;
        }
        return res;
    }
public:
    void solve(istream& in, ostream& out) {
        long long L, R;
        in >> L >> R;
        int mn = sum_of_dig(L), mx = sum_of_dig(R);
        string s1(to_string(L)), s2(to_string(R));
        string s3, s4;
        if (s1[0] != '9')
            s3 += s1[0] + 1;
        else
            s3 += "10";
        for (int i = 1; i < (int)s1.size(); ++i)
            s3 += "0";
        long long num1 = stoll(s3);
        if (num1 <= R)
            mn = min(mn, sum_of_dig(num1));
        string s5;
        s5 += "10";
        for (int i = 1; i < (int)s1.size(); ++i)
            s5 += "0";
        long long num3 = stoll(s5);
        if (num3 <= R)
            mn = min(mn, sum_of_dig(num3));
        if (s2[0] != '1')
            s4 += s2[0] - 1;
        for (int i = 1; i < (int)s2.size(); ++i)
            s4 += '9';
        long long num2 = stoll(s4);
        if (num2 >= L)
            mx = max(mx, sum_of_dig(num2));
        //cout << mn << " " << mx << endl;
        out << mx - mn + 1 << "\n";
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    year2018p4 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
