/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>
#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>
#include <sstream>

using namespace std;

constexpr int INF = 1'000'000'000;

class tle_p2 {
public:
    void solve(istream& in, ostream& out) {
        int N, D;
        in >> N >> D;
        vector<int> x(N);
        for (int i = 0; i < N; ++i) {
            in >> x[i];
        }
        vector<pair<int, int>> p(D);
        int a_s = INF, a_e = -INF, b_s = -INF, b_e = INF;
        for (int i = 0; i < D; ++i) {
            in >> p[i].first >> p[i].second;
            --p[i].first;
            --p[i].second;
            if (x[p[i].first] < x[p[i].second]) {
                a_s = min(a_s, x[p[i].first]);
                a_e = max(a_e, x[p[i].second]);
            } else {
                b_s = max(b_s, x[p[i].first]);
                b_e = min(b_e, x[p[i].second]);
            }
        }
        if (a_s == INF) {
            out << b_s - b_e << "\n";
        } else if (b_s == -INF) {
            out << a_e - a_s << "\n";
        } else {
            int res_a = a_e - a_s + abs(b_s - a_e) + b_s - b_e;
            int res_b = b_s - b_e + abs(b_e - a_s) + a_e - a_s;
            out << min(res_a, res_b) << "\n";
        }
        
    }
};


int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);
    tle_p2 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
